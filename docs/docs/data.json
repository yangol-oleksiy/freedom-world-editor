{
    "project": {},
    "files": {
        "source\\core\\animation\\AnimationMixer.js": {
            "name": "source\\core\\animation\\AnimationMixer.js",
            "modules": {},
            "classes": {
                "AnimationMixer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\geometries\\modifiers\\TwistModifier.js": {
            "name": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "modules": {},
            "classes": {
                "TwistModifier": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\geometries\\CapsuleBufferGeometry.js": {
            "name": "source\\core\\geometries\\CapsuleBufferGeometry.js",
            "modules": {},
            "classes": {
                "CapsuleBufferGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\geometries\\ParametricBufferGeometry.js": {
            "name": "source\\core\\geometries\\ParametricBufferGeometry.js",
            "modules": {},
            "classes": {
                "ParametricBufferGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\geometries\\RoundedBoxBufferGeometry.js": {
            "name": "source\\core\\geometries\\RoundedBoxBufferGeometry.js",
            "modules": {},
            "classes": {
                "RoundedBoxBufferGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\geometries\\TerrainBufferGeometry.js": {
            "name": "source\\core\\geometries\\TerrainBufferGeometry.js",
            "modules": {},
            "classes": {
                "TerrainBufferGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\Gamepad.js": {
            "name": "source\\core\\input\\Gamepad.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "Gamepad": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\Gyroscope.js": {
            "name": "source\\core\\input\\Gyroscope.js",
            "modules": {},
            "classes": {
                "Gyroscope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\Key.js": {
            "name": "source\\core\\input\\Key.js",
            "modules": {},
            "classes": {
                "Key": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\Keyboard.js": {
            "name": "source\\core\\input\\Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\Mouse.js": {
            "name": "source\\core\\input\\Mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\input\\TizenKeyboard.js": {
            "name": "source\\core\\input\\TizenKeyboard.js",
            "modules": {},
            "classes": {
                "TizenKeyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\AudioLoader.js": {
            "name": "source\\core\\loaders\\AudioLoader.js",
            "modules": {
                "Loaders": 1
            },
            "classes": {
                "AudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\FontLoader.js": {
            "name": "source\\core\\loaders\\FontLoader.js",
            "modules": {},
            "classes": {
                "FontLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\GeometryLoader.js": {
            "name": "source\\core\\loaders\\GeometryLoader.js",
            "modules": {},
            "classes": {
                "GeometryLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\ImageLoader.js": {
            "name": "source\\core\\loaders\\ImageLoader.js",
            "modules": {},
            "classes": {
                "ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\LegacyGeometryLoader.js": {
            "name": "source\\core\\loaders\\LegacyGeometryLoader.js",
            "modules": {},
            "classes": {
                "LegacyGeometryLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\MaterialLoader.js": {
            "name": "source\\core\\loaders\\MaterialLoader.js",
            "modules": {},
            "classes": {
                "MaterialLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\ObjectLoader.js": {
            "name": "source\\core\\loaders\\ObjectLoader.js",
            "modules": {},
            "classes": {
                "ObjectLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\TextureLoader.js": {
            "name": "source\\core\\loaders\\TextureLoader.js",
            "modules": {},
            "classes": {
                "TextureLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\loaders\\VideoLoader.js": {
            "name": "source\\core\\loaders\\VideoLoader.js",
            "modules": {},
            "classes": {
                "VideoLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\audio\\AudioEmitter.js": {
            "name": "source\\core\\objects\\audio\\AudioEmitter.js",
            "modules": {
                "Audio": 1
            },
            "classes": {
                "AudioEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\audio\\PositionalAudio.js": {
            "name": "source\\core\\objects\\audio\\PositionalAudio.js",
            "modules": {},
            "classes": {
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\cameras\\CubeCamera.js": {
            "name": "source\\core\\objects\\cameras\\CubeCamera.js",
            "modules": {},
            "classes": {
                "CubeCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\cameras\\OrthographicCamera.js": {
            "name": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "modules": {
                "Cameras": 1
            },
            "classes": {
                "OrthographicCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\cameras\\PerspectiveCamera.js": {
            "name": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "modules": {},
            "classes": {
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\cameras\\Viewport.js": {
            "name": "source\\core\\objects\\cameras\\Viewport.js",
            "modules": {},
            "classes": {
                "Viewport": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\controls\\FirstPersonControls.js": {
            "name": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "modules": {
                "Controls": 1
            },
            "classes": {
                "FirstPersonControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\controls\\OrbitControls.js": {
            "name": "source\\core\\objects\\controls\\OrbitControls.js",
            "modules": {},
            "classes": {
                "OrbitControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\AmbientLight.js": {
            "name": "source\\core\\objects\\lights\\AmbientLight.js",
            "modules": {},
            "classes": {
                "AmbientLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\DirectionalLight.js": {
            "name": "source\\core\\objects\\lights\\DirectionalLight.js",
            "modules": {},
            "classes": {
                "DirectionalLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\DirectionalLightCSM.js": {
            "name": "source\\core\\objects\\lights\\DirectionalLightCSM.js",
            "modules": {},
            "classes": {
                "DirectionalLightCSM": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\HemisphereLight.js": {
            "name": "source\\core\\objects\\lights\\HemisphereLight.js",
            "modules": {},
            "classes": {
                "HemisphereLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\LightProbe.js": {
            "name": "source\\core\\objects\\lights\\LightProbe.js",
            "modules": {},
            "classes": {
                "LightProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\PointLight.js": {
            "name": "source\\core\\objects\\lights\\PointLight.js",
            "modules": {},
            "classes": {
                "PointLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\RectAreaLight.js": {
            "name": "source\\core\\objects\\lights\\RectAreaLight.js",
            "modules": {},
            "classes": {
                "RectAreaLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\lights\\SpotLight.js": {
            "name": "source\\core\\objects\\lights\\SpotLight.js",
            "modules": {},
            "classes": {
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\mesh\\InstancedMesh.js": {
            "name": "source\\core\\objects\\mesh\\InstancedMesh.js",
            "modules": {},
            "classes": {
                "InstancedMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\mesh\\Mesh.js": {
            "name": "source\\core\\objects\\mesh\\Mesh.js",
            "modules": {},
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\mesh\\SkinnedMesh.js": {
            "name": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "modules": {},
            "classes": {
                "SkinnedMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\misc\\BillboardGroup.js": {
            "name": "source\\core\\objects\\misc\\BillboardGroup.js",
            "modules": {},
            "classes": {
                "BillboardGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\misc\\Group.js": {
            "name": "source\\core\\objects\\misc\\Group.js",
            "modules": {
                "Misc": 1
            },
            "classes": {
                "Group": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\misc\\HTMLView.js": {
            "name": "source\\core\\objects\\misc\\HTMLView.js",
            "modules": {},
            "classes": {
                "HTMLView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\misc\\LensFlare.js": {
            "name": "source\\core\\objects\\misc\\LensFlare.js",
            "modules": {},
            "classes": {
                "LensFlare": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\misc\\Sky.js": {
            "name": "source\\core\\objects\\misc\\Sky.js",
            "modules": {
                "Lights": 1
            },
            "classes": {
                "Sky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js": {
            "name": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "modules": {},
            "classes": {
                "ParticleEmitterControlOptions": 1,
                "ParticleEmitterControl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\core\\ParticleGroup.js": {
            "name": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "modules": {},
            "classes": {
                "{Object} ParticleGroupOptions": 1,
                "ParticleGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\core\\ShaderUtils.js": {
            "name": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "modules": {},
            "classes": {
                "ShaderUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js": {
            "name": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "modules": {},
            "classes": {
                "ShaderAttribute": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js": {
            "name": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "modules": {},
            "classes": {
                "TypedArrayHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\ParticleDistributions.js": {
            "name": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "modules": {},
            "classes": {
                "ParticleDistributions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\particle\\ParticleEmitter.js": {
            "name": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "modules": {
                "Particles": 1
            },
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\physics\\PhysicsObject.js": {
            "name": "source\\core\\objects\\physics\\PhysicsObject.js",
            "modules": {},
            "classes": {
                "PhysicsObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\script\\nodes\\BaseNode.js": {
            "name": "source\\core\\objects\\script\\nodes\\BaseNode.js",
            "modules": {
                "Script": 1
            },
            "classes": {
                "BaseNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\script\\nodes\\OperationNode.js": {
            "name": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "modules": {},
            "classes": {
                "OperationNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\script\\NodeScript.js": {
            "name": "source\\core\\objects\\script\\NodeScript.js",
            "modules": {},
            "classes": {
                "NodeScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\script\\PythonScript.js": {
            "name": "source\\core\\objects\\script\\PythonScript.js",
            "modules": {},
            "classes": {
                "PythonScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\script\\Script.js": {
            "name": "source\\core\\objects\\script\\Script.js",
            "modules": {},
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\spine\\SpineAnimation.js": {
            "name": "source\\core\\objects\\spine\\SpineAnimation.js",
            "modules": {
                "Animations": 1
            },
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\spine\\SpineTexture.js": {
            "name": "source\\core\\objects\\spine\\SpineTexture.js",
            "modules": {},
            "classes": {
                "SpineTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\sprite\\CanvasSprite.js": {
            "name": "source\\core\\objects\\sprite\\CanvasSprite.js",
            "modules": {},
            "classes": {
                "CanvasSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\sprite\\Sprite.js": {
            "name": "source\\core\\objects\\sprite\\Sprite.js",
            "modules": {
                "Sprite": 1
            },
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\text\\TextBitmap.js": {
            "name": "source\\core\\objects\\text\\TextBitmap.js",
            "modules": {},
            "classes": {
                "TextBitmap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\text\\TextMesh.js": {
            "name": "source\\core\\objects\\text\\TextMesh.js",
            "modules": {
                "Meshes": 1
            },
            "classes": {
                "TextMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\text\\TextSprite.js": {
            "name": "source\\core\\objects\\text\\TextSprite.js",
            "modules": {},
            "classes": {
                "TextSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\Program.js": {
            "name": "source\\core\\objects\\Program.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Program": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\objects\\Scene.js": {
            "name": "source\\core\\objects\\Scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\platform\\TargetConfig.js": {
            "name": "source\\core\\platform\\TargetConfig.js",
            "modules": {},
            "classes": {
                "TargetConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js": {
            "name": "source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js",
            "modules": {
                "Postprocessing": 1
            },
            "classes": {
                "FXAAPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js": {
            "name": "source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\AfterimagePass.js": {
            "name": "source\\core\\postprocessing\\pass\\AfterimagePass.js",
            "modules": {},
            "classes": {
                "AfterimagePass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\BloomPass.js": {
            "name": "source\\core\\postprocessing\\pass\\BloomPass.js",
            "modules": {},
            "classes": {
                "BloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\BokehPass.js": {
            "name": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "modules": {},
            "classes": {
                "BokehPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\ColorifyPass.js": {
            "name": "source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "modules": {},
            "classes": {
                "ColorifyPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\CopyPass.js": {
            "name": "source\\core\\postprocessing\\pass\\CopyPass.js",
            "modules": {},
            "classes": {
                "CopyPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\DotScreenPass.js": {
            "name": "source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "modules": {},
            "classes": {
                "DotScreenPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\FilmPass.js": {
            "name": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "modules": {},
            "classes": {
                "FilmPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\HueSaturationPass.js": {
            "name": "source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "modules": {},
            "classes": {
                "HueSaturationPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\SSAONOHPass.js": {
            "name": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "modules": {},
            "classes": {
                "SSAONOHPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\SSAOPass.js": {
            "name": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "modules": {},
            "classes": {
                "SSAOPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\SobelPass.js": {
            "name": "source\\core\\postprocessing\\pass\\SobelPass.js",
            "modules": {},
            "classes": {
                "SobelPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\TechnicolorPass.js": {
            "name": "source\\core\\postprocessing\\pass\\TechnicolorPass.js",
            "modules": {},
            "classes": {
                "TechnicolorPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\pass\\UnrealBloomPass.js": {
            "name": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "modules": {},
            "classes": {
                "UnrealBloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\shaders\\SSAOShader.js": {
            "name": "source\\core\\postprocessing\\shaders\\SSAOShader.js",
            "modules": {},
            "classes": {
                "SSAOShader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\EffectComposer.js": {
            "name": "source\\core\\postprocessing\\EffectComposer.js",
            "modules": {},
            "classes": {
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\Pass.js": {
            "name": "source\\core\\postprocessing\\Pass.js",
            "modules": {},
            "classes": {
                "Pass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\RenderPass.js": {
            "name": "source\\core\\postprocessing\\RenderPass.js",
            "modules": {},
            "classes": {
                "RenderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\postprocessing\\ShaderPass.js": {
            "name": "source\\core\\postprocessing\\ShaderPass.js",
            "modules": {},
            "classes": {
                "ShaderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\renderer\\css\\CSS3DObject.js": {
            "name": "source\\core\\renderer\\css\\CSS3DObject.js",
            "modules": {},
            "classes": {
                "CSS3DObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\renderer\\css\\CSS3DRenderer.js": {
            "name": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "modules": {},
            "classes": {
                "CSS3DRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\renderer\\css\\CSS3DSprite.js": {
            "name": "source\\core\\renderer\\css\\CSS3DSprite.js",
            "modules": {},
            "classes": {
                "CSS3DSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\renderer\\RendererConfiguration.js": {
            "name": "source\\core\\renderer\\RendererConfiguration.js",
            "modules": {},
            "classes": {
                "RendererConfiguration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\renderer\\RendererState.js": {
            "name": "source\\core\\renderer\\RendererState.js",
            "modules": {},
            "classes": {
                "RendererState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Audio.js": {
            "name": "source\\core\\resources\\Audio.js",
            "modules": {
                "Resources": 1
            },
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Font.js": {
            "name": "source\\core\\resources\\Font.js",
            "modules": {},
            "classes": {
                "Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Image.js": {
            "name": "source\\core\\resources\\Image.js",
            "modules": {},
            "classes": {
                "Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Model.js": {
            "name": "source\\core\\resources\\Model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Resource.js": {
            "name": "source\\core\\resources\\Resource.js",
            "modules": {},
            "classes": {
                "Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\ResourceContainer.js": {
            "name": "source\\core\\resources\\ResourceContainer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\ResourceManager.js": {
            "name": "source\\core\\resources\\ResourceManager.js",
            "modules": {},
            "classes": {
                "ResourceManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\TextFile.js": {
            "name": "source\\core\\resources\\TextFile.js",
            "modules": {},
            "classes": {
                "TextFile": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\Video.js": {
            "name": "source\\core\\resources\\Video.js",
            "modules": {},
            "classes": {
                "Video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\resources\\VideoStream.js": {
            "name": "source\\core\\resources\\VideoStream.js",
            "modules": {},
            "classes": {
                "VideoStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\CanvasTexture.js": {
            "name": "source\\core\\texture\\CanvasTexture.js",
            "modules": {
                "Textures": 1
            },
            "classes": {
                "CanvasTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\CompressedTexture.js": {
            "name": "source\\core\\texture\\CompressedTexture.js",
            "modules": {},
            "classes": {
                "CompressedTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\CubeTexture.js": {
            "name": "source\\core\\texture\\CubeTexture.js",
            "modules": {},
            "classes": {
                "CubeTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\DataTexture.js": {
            "name": "source\\core\\texture\\DataTexture.js",
            "modules": {},
            "classes": {
                "DataTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\SpriteSheetTexture.js": {
            "name": "source\\core\\texture\\SpriteSheetTexture.js",
            "modules": {},
            "classes": {
                "SpriteSheetTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\Texture.js": {
            "name": "source\\core\\texture\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\VideoTexture.js": {
            "name": "source\\core\\texture\\VideoTexture.js",
            "modules": {},
            "classes": {
                "VideoTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\texture\\WebcamTexture.js": {
            "name": "source\\core\\texture\\WebcamTexture.js",
            "modules": {},
            "classes": {
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\three\\core\\Object3D.js": {
            "name": "source\\core\\three\\core\\Object3D.js",
            "modules": {},
            "classes": {
                "Object3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\three\\materials\\Material.js": {
            "name": "source\\core\\three\\materials\\Material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\three\\objects\\Skeleton.js": {
            "name": "source\\core\\three\\objects\\Skeleton.js",
            "modules": {
                "Animation": 1
            },
            "classes": {
                "Skeleton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\three\\scenes\\Fog.js": {
            "name": "source\\core\\three\\scenes\\Fog.js",
            "modules": {
                "THREE": 1
            },
            "classes": {
                "Fog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\binary\\ArraybufferUtils.js": {
            "name": "source\\core\\utils\\binary\\ArraybufferUtils.js",
            "modules": {
                "BinaryUtils": 1
            },
            "classes": {
                "ArraybufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\binary\\Base64Utils.js": {
            "name": "source\\core\\utils\\binary\\Base64Utils.js",
            "modules": {},
            "classes": {
                "Base64Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\binary\\BufferUtils.js": {
            "name": "source\\core\\utils\\binary\\BufferUtils.js",
            "modules": {},
            "classes": {
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\binary\\ByteArrayUtils.js": {
            "name": "source\\core\\utils\\binary\\ByteArrayUtils.js",
            "modules": {},
            "classes": {
                "ByteArrayUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\struct\\Tree.js": {
            "name": "source\\core\\utils\\struct\\Tree.js",
            "modules": {},
            "classes": {
                "Tree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\struct\\TreeUtils.js": {
            "name": "source\\core\\utils\\struct\\TreeUtils.js",
            "modules": {},
            "classes": {
                "TreeUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\timer\\AnimationTimer.js": {
            "name": "source\\core\\utils\\timer\\AnimationTimer.js",
            "modules": {},
            "classes": {
                "AnimationTimer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\timer\\Timer.js": {
            "name": "source\\core\\utils\\timer\\Timer.js",
            "modules": {},
            "classes": {
                "Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\worker\\WorkerPool.js": {
            "name": "source\\core\\utils\\worker\\WorkerPool.js",
            "modules": {},
            "classes": {
                "WorkerPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\worker\\WorkerTask.js": {
            "name": "source\\core\\utils\\worker\\WorkerTask.js",
            "modules": {},
            "classes": {
                "WorkerTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\EventManager.js": {
            "name": "source\\core\\utils\\EventManager.js",
            "modules": {
                "Utils": 1
            },
            "classes": {
                "EventManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\LocalStorage.js": {
            "name": "source\\core\\utils\\LocalStorage.js",
            "modules": {},
            "classes": {
                "LocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\MathUtils.js": {
            "name": "source\\core\\utils\\MathUtils.js",
            "modules": {},
            "classes": {
                "MathUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\ObjectUtils.js": {
            "name": "source\\core\\utils\\ObjectUtils.js",
            "modules": {},
            "classes": {
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\PhysicsGenerator.js": {
            "name": "source\\core\\utils\\PhysicsGenerator.js",
            "modules": {
                "Physics": 1
            },
            "classes": {
                "PhysicsGenerator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\SimplexNoise.js": {
            "name": "source\\core\\utils\\SimplexNoise.js",
            "modules": {},
            "classes": {
                "SimplexNoise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\utils\\UnitConverter.js": {
            "name": "source\\core\\utils\\UnitConverter.js",
            "modules": {},
            "classes": {
                "UnitConverter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\xr\\ARHandler.js": {
            "name": "source\\core\\xr\\ARHandler.js",
            "modules": {},
            "classes": {
                "ARHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\xr\\VRHandler.js": {
            "name": "source\\core\\xr\\VRHandler.js",
            "modules": {},
            "classes": {
                "VRHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\App.js": {
            "name": "source\\core\\App.js",
            "modules": {},
            "classes": {
                "App": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\FileSystem.js": {
            "name": "source\\core\\FileSystem.js",
            "modules": {
                "Files": 1
            },
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source\\core\\Nunu.js": {
            "name": "source\\core\\Nunu.js",
            "modules": {
                "Runtime": 1
            },
            "classes": {
                "Nunu": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Animation": {
            "name": "Animation",
            "submodules": {},
            "elements": {},
            "classes": {
                "Skeleton": 1,
                "AnimationMixer": 1,
                "TwistModifier": 1,
                "CapsuleBufferGeometry": 1,
                "ParametricBufferGeometry": 1,
                "RoundedBoxBufferGeometry": 1,
                "TerrainBufferGeometry": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 5,
            "description": "Use an array of bones to create a skeleton that can be used by a SkinnedMesh."
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {
                "Gamepad": 1,
                "Gyroscope": 1,
                "Key": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "TizenKeyboard": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 1,
            "description": "Gamepad provides basic support for gamepads.\n\nSome gamepads require a button press to being detected.\n\nGamepad implementation across browsers is still fragmented, every browser implements it a bit differently, so test it on every target before deploying an application using it.\n\nFor more information about the Gamepad API state take look at the W3C Gamepad API page https:// www.w3.org/TR/gamepad/."
        },
        "Loaders": {
            "name": "Loaders",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioLoader": 1,
                "FontLoader": 1,
                "GeometryLoader": 1,
                "ImageLoader": 1,
                "LegacyGeometryLoader": 1,
                "MaterialLoader": 1,
                "ObjectLoader": 1,
                "TextureLoader": 1,
                "VideoLoader": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\loaders\\VideoLoader.js",
            "line": 5,
            "description": "Audio loader can be used to load external audio resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Audio": {
            "name": "Audio",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioEmitter": 1,
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 7,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene."
        },
        "Misc": {
            "name": "Misc",
            "submodules": {},
            "elements": {},
            "classes": {
                "Group": 1,
                "CubeCamera": 1,
                "HTMLView": 1,
                "LensFlare": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\misc\\LensFlare.js",
            "line": 5,
            "description": "Groups are used to group objects together.\n\nThey are not drawn in the scene are just used as logic containers."
        },
        "Cameras": {
            "name": "Cameras",
            "submodules": {},
            "elements": {},
            "classes": {
                "OrthographicCamera": 1,
                "PerspectiveCamera": 1,
                "Viewport": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 4,
            "description": "Orthographic Camera is used for 2D like image projection.\n\nBased on OrthographicCamera, original documentation available at https:// threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera."
        },
        "Controls": {
            "name": "Controls",
            "submodules": {},
            "elements": {},
            "classes": {
                "FirstPersonControls": 1,
                "OrbitControls": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 5,
            "description": "First person controls can be controlled using the mouse and keyboard.\n\nProvides a navigations system familiar to the one found on FPS games.\n\nThe mouse left button can be used to look around, and the keyboard arrows for movement."
        },
        "Lights": {
            "name": "Lights",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sky": 1,
                "AmbientLight": 1,
                "DirectionalLight": 1,
                "DirectionalLightCSM": 1,
                "HemisphereLight": 1,
                "LightProbe": 1,
                "PointLight": 1,
                "RectAreaLight": 1,
                "SpotLight": 1,
                "ParticleEmitterControlOptions": 1,
                "ParticleEmitterControl": 1,
                "{Object} ParticleGroupOptions": 1,
                "ParticleGroup": 1,
                "ShaderUtils": 1,
                "ShaderAttribute": 1,
                "TypedArrayHelper": 1,
                "ParticleDistributions": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "line": 1,
            "description": "Sky class if composed of a HemisphereLight, DirectionalLight and a dynamic generated Sky sphere geometry.\n\nThis object is composed by 3 internal objects\n\t- Hemisphere light\n\t- Directional Light\n\t- Mesh"
        },
        "Meshes": {
            "name": "Meshes",
            "submodules": {},
            "elements": {},
            "classes": {
                "TextMesh": 1,
                "InstancedMesh": 1,
                "Mesh": 1,
                "SkinnedMesh": 1,
                "BillboardGroup": 1,
                "TextSprite": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 4,
            "description": "Special mesh type used to draw 3D text.\n\nIt receives a Font resource that is used to triangulate and extrude font data into a 3D mesh."
        },
        "Particles": {
            "name": "Particles",
            "submodules": {},
            "elements": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 7,
            "description": "Particle emitter is a wrapper for SPE particle system.\n\nSPE is a threejs based particle emitter engine.\n\nDocumentation for SPE particle engine can be found here https:// squarefeet.github.io/ShaderParticleEngine/docs/api/index.html"
        },
        "Physics": {
            "name": "Physics",
            "submodules": {},
            "elements": {},
            "classes": {
                "PhysicsGenerator": 1,
                "PhysicsObject": 1,
                "SimplexNoise": 1,
                "UnitConverter": 1,
                "ARHandler": 1,
                "VRHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 3,
            "description": "Physics generator is used to create Cannon.js shapes from three.js geometries.\n\nCan be used with any object that contains a geometry.\n\nIt is based on the original Mesh2Shape converted by @donmccurdy."
        },
        "Script": {
            "name": "Script",
            "submodules": {},
            "elements": {},
            "classes": {
                "BaseNode": 1,
                "OperationNode": 1,
                "NodeScript": 1,
                "PythonScript": 1,
                "Script": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 10,
            "description": "Base node are used as a basis for all other nodes, they implement the necessary common functionality for all nodes.\n\nBase nodes add a destructible function with a button which allows the user to destroy them.\n\nWhen the node gets destroyed it automatically gets removed from the graph."
        },
        "Animations": {
            "name": "Animations",
            "submodules": {},
            "elements": {},
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 7,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine. These animations are created using the Spine animation studio software.\n\nBased on the official three.js runtime code available at https:// github.com/EsotericSoftware/spine-runtimes.\n\nMore information about spine available at www.esotericsoftware.com."
        },
        "Textures": {
            "name": "Textures",
            "submodules": {},
            "elements": {},
            "classes": {
                "CanvasTexture": 1,
                "SpineTexture": 1,
                "CanvasSprite": 1,
                "CompressedTexture": 1,
                "CubeTexture": 1,
                "DataTexture": 1,
                "SpriteSheetTexture": 1,
                "Texture": 1,
                "VideoTexture": 1,
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime, using the context property.\n\nCanvas textures always start with black background and a red text \"Canvas Texture\"."
        },
        "Sprite": {
            "name": "Sprite",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sprite": 1,
                "TextBitmap": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 8,
            "description": "Sprites always face the screen are used for 2D elements.\n\nBased on Sprite documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Objects/Sprite."
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "Program": 1,
                "Scene": 1,
                "TargetConfig": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\platform\\TargetConfig.js",
            "line": 1,
            "description": "Program class contains all the data of a app.\n\nIs stores and manages all available resources used by the children objects.\n\nIs responsible for handling runtime tasks, initialization, update, resizes etc."
        },
        "Postprocessing": {
            "name": "Postprocessing",
            "submodules": {},
            "elements": {},
            "classes": {
                "FXAAPass": 1,
                "AfterimagePass": 1,
                "BloomPass": 1,
                "BokehPass": 1,
                "ColorifyPass": 1,
                "CopyPass": 1,
                "DotScreenPass": 1,
                "FilmPass": 1,
                "HueSaturationPass": 1,
                "SSAONOHPass": 1,
                "SSAOPass": 1,
                "SobelPass": 1,
                "TechnicolorPass": 1,
                "UnrealBloomPass": 1,
                "SSAOShader": 1,
                "EffectComposer": 1,
                "Pass": 1,
                "RenderPass": 1,
                "ShaderPass": 1,
                "CSS3DObject": 1,
                "CSS3DRenderer": 1,
                "CSS3DSprite": 1,
                "RendererConfiguration": 1,
                "RendererState": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\renderer\\RendererState.js",
            "line": 3,
            "description": "Fast approximate anti-aliasing (FXAA) is an anti-aliasing algorithm to smooth jagged edges on post procesing effects.\n\nMore information about FXAA available here:\n - https:// developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf",
            "author": "miibond"
        },
        "Resources": {
            "name": "Resources",
            "submodules": {},
            "elements": {},
            "classes": {
                "Audio": 1,
                "Font": 1,
                "Image": 1,
                "Model": 1,
                "Resource": 1,
                "ResourceManager": 1,
                "TextFile": 1,
                "Video": 1,
                "VideoStream": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\resources\\VideoStream.js",
            "line": 4,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API."
        },
        "THREE": {
            "name": "THREE",
            "submodules": {},
            "elements": {},
            "classes": {
                "Fog": 1,
                "Object3D": 1,
                "Material": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\three\\scenes\\Fog.js",
            "line": 1,
            "description": "Fog class is used to store fog attributes attached to a Scene\n\nOriginal documentation for fog available here https:// threejs.org/docs/index.html#Reference/Scenes/Fog and for exponential fog here https:// threejs.org/docs/index.html#Reference/Scenes/FogExp2"
        },
        "BinaryUtils": {
            "name": "BinaryUtils",
            "submodules": {},
            "elements": {},
            "classes": {
                "ArraybufferUtils": 1,
                "Base64Utils": 1,
                "BufferUtils": 1,
                "ByteArrayUtils": 1,
                "Tree": 1,
                "TreeUtils": 1,
                "AnimationTimer": 1,
                "Timer": 1,
                "WorkerPool": 1,
                "WorkerTask": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\utils\\worker\\WorkerTask.js",
            "line": 3,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format"
        },
        "Utils": {
            "name": "Utils",
            "submodules": {},
            "elements": {},
            "classes": {
                "EventManager": 1,
                "LocalStorage": 1,
                "MathUtils": 1,
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "EventManager is used to manager DOM events creationg and destruction in a single function call.\n\nIt is used by objects to make it easier to add, manager and remove events from DOM elements."
        },
        "Runtime": {
            "name": "Runtime",
            "submodules": {
                "undefined": 1
            },
            "elements": {},
            "classes": {
                "Nunu": 1,
                "App": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\Nunu.js",
            "line": 17,
            "description": "Freedom World Editor core main file.\n\nStore development version, timestamp and contains global method to check browser feature support."
        },
        "Files": {
            "name": "Files",
            "submodules": {},
            "elements": {},
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "source\\core\\FileSystem.js",
            "line": 6,
            "description": "FileSystem is used to read and write files using Freedom World Editor.\n\nIts implements multiple solutions for each method depending on the platform (NodeJS, brower or cordova).\n\nSome operations are platform specific and might not work everywhere.",
            "static": 1
        }
    },
    "classes": {
        "AnimationMixer": {
            "name": "AnimationMixer",
            "shortname": "AnimationMixer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 3,
            "description": "The AnimationMixer is a player for animations on a particular object in the scene.\n\nWhen multiple objects in the scene are animated independently, one AnimationMixer may be used for each object.\n\nThe object stores animations in its animations attribute, which is an array an of animation clips.",
            "extends": "{AnimationMixer}",
            "params": [
                {
                    "name": "root",
                    "description": "Animation root object",
                    "type": "Object3D"
                }
            ]
        },
        "TwistModifier": {
            "name": "TwistModifier",
            "shortname": "TwistModifier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 3,
            "description": "The twist modifier applies a tornado twist like deformation to the geometry.\n\nIt follows a vector from a start to and end point in the vector and rotates all vertex for each point up to a defined final angle."
        },
        "CapsuleBufferGeometry": {
            "name": "CapsuleBufferGeometry",
            "shortname": "CapsuleBufferGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\geometries\\CapsuleBufferGeometry.js",
            "line": 3,
            "description": "Capsule like geometry shape consisting of a cylinder with hemispherical ends.\n\nThe geometry is fully configurable booth in size and details, and can also be used to generate sections of capsule.",
            "author": "maximequiblier",
            "is_constructor": 1
        },
        "ParametricBufferGeometry": {
            "name": "ParametricBufferGeometry",
            "shortname": "ParametricBufferGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\geometries\\ParametricBufferGeometry.js",
            "line": 3,
            "description": "Parametric bufffer geometry are constructed from javascript code describing a parametric surface.\n\nA parametric function receives a (u, v) coordinate value and returns a Vector3 with the surface point for those values.\n\n(u, v) values are normalized and might need readjusting to match the parametric function generator domain.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code that receive (u: number, v: number, target?: Vector3) as parameters, the target paramter might be undefined.",
                    "type": "String"
                },
                {
                    "name": "slices",
                    "description": "The count of slices to use for the parametric function.",
                    "type": "Number"
                },
                {
                    "name": "stacks",
                    "description": "The count of stacks to use for the parametric function.",
                    "type": "Number"
                }
            ]
        },
        "RoundedBoxBufferGeometry": {
            "name": "RoundedBoxBufferGeometry",
            "shortname": "RoundedBoxBufferGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\geometries\\RoundedBoxBufferGeometry.js",
            "line": 3,
            "description": "Rounded corners box buffer geometry, composed of a box with spherical corners and cylindrical edges.\n\nThe rounded parts of the geometry can be configured in detail level.",
            "author": "pailhead / http://dusanbosnjak.com",
            "is_constructor": 1
        },
        "TerrainBufferGeometry": {
            "name": "TerrainBufferGeometry",
            "shortname": "TerrainBufferGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\geometries\\TerrainBufferGeometry.js",
            "line": 4,
            "description": "Terrrain geometry is a plane like geometry deformed by a height map texture.\n\nThis geometry type can be used to create large terrains. Its possible to generate the height data using scripts and create terrain dynamically.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "Width of the terrain.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the terrain.",
                    "type": "Number"
                },
                {
                    "name": "widthSegments",
                    "description": "How many segments compose the terrain width.",
                    "type": "Number"
                },
                {
                    "name": "heightSegments",
                    "description": "How many segments compose the terrain height.",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "Scale of the terrain in height (maximum altitude of the terrain).",
                    "type": "Number"
                },
                {
                    "name": "image",
                    "description": "Image containing the height data of the terrain.",
                    "type": "Image"
                }
            ]
        },
        "Gamepad": {
            "name": "Gamepad",
            "shortname": "Gamepad",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\Gamepad.js",
            "line": 3,
            "description": "Gamepad provides basic support for gamepads.\n\nSome gamepads require a button press to being detected.\n\nGamepad implementation across browsers is still fragmented, every browser implements it a bit differently, so test it on every target before deploying an application using it.\n\nFor more information about the Gamepad API state take look at the W3C Gamepad API page https:// www.w3.org/TR/gamepad/."
        },
        "Gyroscope": {
            "name": "Gyroscope",
            "shortname": "Gyroscope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 4,
            "description": "Gyroscope object can be used to get the orientation from the device."
        },
        "Key": {
            "name": "Key",
            "shortname": "Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\Key.js",
            "line": 1,
            "description": "Key is used by Keyboard, Mouse, etc, to represent a key state."
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\Keyboard.js",
            "line": 4,
            "description": "Keyboard instance for input in sync with the running application, internally stores the key transitions provided by the browser.\n\nAllow to detect every key press, release event in sync with the app frame update.\n\nThe keyboard object provided by scripts is automatically updated by the runtime handler.",
            "params": [
                {
                    "name": "dontInitialize",
                    "description": "If true the mouse events are not created.",
                    "type": "Boolean"
                }
            ]
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\Mouse.js",
            "line": 5,
            "description": "Mouse instance for sync input the mouse should be updated everytime before.\n\nAutomatically calculates the diff of position between frames.\n\nThe mouse object provided by scripts is automatically updated by the runtime handler.",
            "params": [
                {
                    "name": "domElement",
                    "description": "DOM element to craete the mouse events.",
                    "type": "Component"
                },
                {
                    "name": "dontInitialize",
                    "description": "If true the mouse events are not created.",
                    "type": "Boolean"
                }
            ]
        },
        "TizenKeyboard": {
            "name": "TizenKeyboard",
            "shortname": "TizenKeyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 1,
            "description": "Tizen keyboard contains codes of multiple tizen specific key codes.\n\nThese key codes are used in Samsung Tizen TV, more infomration available\n - https:// developer.samsung.com/stream-code101/tv/using-the-remote-control",
            "static": 1
        },
        "AudioLoader": {
            "name": "AudioLoader",
            "shortname": "AudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\AudioLoader.js",
            "line": 5,
            "description": "Audio loader can be used to load external audio resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "FontLoader": {
            "name": "FontLoader",
            "shortname": "FontLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\FontLoader.js",
            "line": 5,
            "description": "FontLoader can be used to load external font resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "GeometryLoader": {
            "name": "GeometryLoader",
            "shortname": "GeometryLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\GeometryLoader.js",
            "line": 8,
            "description": "Geometry loader can be used to load geometry files.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ImageLoader": {
            "name": "ImageLoader",
            "shortname": "ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\ImageLoader.js",
            "line": 4,
            "description": "ImageLoader can be used to load external image resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "LegacyGeometryLoader": {
            "name": "LegacyGeometryLoader",
            "shortname": "LegacyGeometryLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\LegacyGeometryLoader.js",
            "line": 3,
            "description": "Legacy geometry loader is used to load the old geometry file format.\n\nMay be necessary to load old project files.",
            "author": "alteredq / http:// alteredqualia.com/"
        },
        "MaterialLoader": {
            "name": "MaterialLoader",
            "shortname": "MaterialLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\MaterialLoader.js",
            "line": 3,
            "description": "MaterialLoader can be used to load external materials.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ObjectLoader": {
            "name": "ObjectLoader",
            "shortname": "ObjectLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 46,
            "description": "Objectloader can be used to load external objects from files.\n\nAlso loads all resources attached to the objects being loaded.\n\nCan parse be used to load on runtime resources and objects from external project files."
        },
        "TextureLoader": {
            "name": "TextureLoader",
            "shortname": "TextureLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 11,
            "description": "TextureLoader can be used to load external textures.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "VideoLoader": {
            "name": "VideoLoader",
            "shortname": "VideoLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "source\\core\\loaders\\VideoLoader.js",
            "line": 5,
            "description": "VideoLoader can be used to load external video resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "AudioEmitter": {
            "name": "AudioEmitter",
            "shortname": "AudioEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 3,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene.",
            "author": "Reece Aaron Lecrivain",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{Audio}"
        },
        "PositionalAudio": {
            "name": "PositionalAudio",
            "shortname": "PositionalAudio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 7,
            "description": "PositionalAudio is used to play audio with positional audio effect using a WebAudio panner.\n\nUsing the positional audio object the sound is controlled by the camera that renders first in the scene.",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{AudioEmitter}"
        },
        "CubeCamera": {
            "name": "CubeCamera",
            "shortname": "CubeCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 6,
            "description": "Reflection probes are used to create CubeTextures dinamically.\n\nThese CubeTextures can be attributed to materials programatically.",
            "extends": "{Object3D}"
        },
        "OrthographicCamera": {
            "name": "OrthographicCamera",
            "shortname": "OrthographicCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 7,
            "description": "Orthographic Camera is used for 2D like image projection.\n\nBased on OrthographicCamera, original documentation available at https:// threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera.",
            "extends": "{OrthographicCamera}",
            "params": [
                {
                    "name": "size",
                    "description": "Camera size relative to resize mode",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio X/Y",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Camera resize mode (RESIZE_HORIZONTAL or RESIZE_VERTICAL)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane",
                    "type": "Number"
                }
            ]
        },
        "PerspectiveCamera": {
            "name": "PerspectiveCamera",
            "shortname": "PerspectiveCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 7,
            "description": "Perspective camera, used for 3D scenes with objects getting smaller as they get away from the camera.\n\nBased on PerspectiveCamera, original documentation available at https:// threejs.org/docs/index.html#Reference/Cameras/PerspectiveCamera.",
            "extends": "{PerspectiveCamera}",
            "params": [
                {
                    "name": "fov",
                    "description": "Field of view",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane (how closer can be objects visible by this camera)",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane (how far can be objects visible by this camera)",
                    "type": "Number"
                }
            ]
        },
        "Viewport": {
            "name": "Viewport",
            "shortname": "Viewport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 4,
            "description": "The viewport object is used to handle virtual visualization windows for the WebGL renderer.\n\nIt uses normalized coordinates [0 to 1] when using RELATIVE mode or pixel based coordinated for ABSOLUTE mode.",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "FirstPersonControls": {
            "name": "FirstPersonControls",
            "shortname": "FirstPersonControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controls",
            "namespace": "",
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 6,
            "description": "First person controls can be controlled using the mouse and keyboard.\n\nProvides a navigations system familiar to the one found on FPS games.\n\nThe mouse left button can be used to look around, and the keyboard arrows for movement.",
            "extends": "{Group}"
        },
        "OrbitControls": {
            "name": "OrbitControls",
            "shortname": "OrbitControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controls",
            "namespace": "",
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 5,
            "description": "Orbit controls object can be controlled using the mouse.\n\nIt can be rotated using the mouse left button, moved with the mouse right button or mouse wheel.",
            "extends": "{Group}"
        },
        "AmbientLight": {
            "name": "AmbientLight",
            "shortname": "AmbientLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\AmbientLight.js",
            "line": 3,
            "description": "Ambient lights are used to create base ilumanition for the scene.\n\nThey are not influenced by position, scale or rotation.\n\nBased on AmbientLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/AmbientLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                }
            ],
            "extends": "{AmbientLight}"
        },
        "DirectionalLight": {
            "name": "DirectionalLight",
            "shortname": "DirectionalLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 3,
            "description": "A light that gets emitted in a specific direction.\n\nThis light will behave as though it is infinitely far away and the rays produced from it are all parallel.\n\nBased on DirectionalLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/DirectionalLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{DirectionalLight}"
        },
        "DirectionalLightCSM": {
            "name": "DirectionalLightCSM",
            "shortname": "DirectionalLightCSM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\DirectionalLightCSM.js",
            "line": 4,
            "description": "A light that gets emitted in a specific direction and has a cascaded shadow map set.\n\nAllows to project shadows over large distances by splitting the shadow frustum sections into multiple shadow maps with diferent resolution.",
            "extends": "{Object3D}"
        },
        "HemisphereLight": {
            "name": "HemisphereLight",
            "shortname": "HemisphereLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\HemisphereLight.js",
            "line": 3,
            "description": "A light source positioned directly above the scene, with color fading from the sky color to the ground color.\n\nBased on HemisphereLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/HemisphereLight",
            "params": [
                {
                    "name": "skyColor",
                    "description": "Sky light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "groundColor",
                    "description": "Ground light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{HemisphereLight}"
        },
        "LightProbe": {
            "name": "LightProbe",
            "shortname": "LightProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\LightProbe.js",
            "line": 4,
            "description": "A LightProbe is a source of indirect-diffuse light.",
            "params": [
                {
                    "name": "sh",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{LightProbe}"
        },
        "PointLight": {
            "name": "PointLight",
            "shortname": "PointLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\PointLight.js",
            "line": 4,
            "description": "PointLights emit light from a single point in all directions.\n\nBased on PointLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/PointLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Maximum PointLight range",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{PointLight}"
        },
        "RectAreaLight": {
            "name": "RectAreaLight",
            "shortname": "RectAreaLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\RectAreaLight.js",
            "line": 3,
            "description": "A RectAreLight emit light from a rectagular surface.\n\nBased on RectAreaLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/RectAreaLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{RectAreaLight}"
        },
        "SpotLight": {
            "name": "SpotLight",
            "shortname": "SpotLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\lights\\SpotLight.js",
            "line": 3,
            "description": "A SpotLight emit light from a point in a specific direction in a cone volume.\n\nSpotLight has a target that is always represented in words coordinates, and can be moved to change where the light is pointing at.\n\nBased on SpotLight documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Lights/SpotLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "SpotLight maximum range",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{SpotLight}"
        },
        "InstancedMesh": {
            "name": "InstancedMesh",
            "shortname": "InstancedMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\mesh\\InstancedMesh.js",
            "line": 3,
            "description": "A instanced mesh is a mesh that can be drawn multiple times at once, it can be used to optimize the draw of large amount of the same geometry material combination.\n\nThe usage of InstancedMesh will help you to reduce the number of draw calls and thus improve the overall rendering performance in your application.",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "extends": "{InstancedMesh}"
        },
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\mesh\\Mesh.js",
            "line": 3,
            "description": "A Mesh combines a geometry and a material forming a complete rederizable object.\n\nBased on Mesh documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Objects/Mesh.",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "extends": "{Mesh}"
        },
        "SkinnedMesh": {
            "name": "SkinnedMesh",
            "shortname": "SkinnedMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 3,
            "description": "SkinnedMesh is a Mesh that has a Skeleton attached.\n\nA skeleton contains bones that are used to animate the vertices of the geometry.\n\nBased on SkinnedMesh documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Objects/SkinnedMesh",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "extends": "{SkinnedMesh}"
        },
        "BillboardGroup": {
            "name": "BillboardGroup",
            "shortname": "BillboardGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\misc\\BillboardGroup.js",
            "line": 3,
            "description": "Object that makes it rotation be the same as the camera.\n\nIt is rotated every frame before rendering to always face the camera direction.",
            "extends": "{THREE.Group}"
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "source\\core\\objects\\misc\\Group.js",
            "line": 3,
            "description": "Groups are used to group objects together.\n\nThey are not drawn in the scene are just used as logic containers.",
            "extends": "{Group}"
        },
        "HTMLView": {
            "name": "HTMLView",
            "shortname": "HTMLView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "source\\core\\objects\\misc\\HTMLView.js",
            "line": 3,
            "description": "HTMLView object is used to navigate webpages inside of the 3D scene.\n\nCan be used to display external web widget using a iframe. Some pages might present limitations regarding their usage inside of a iframe element.",
            "extends": "{CSS3DObject}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to be opened by default.",
                    "type": "String"
                }
            ]
        },
        "LensFlare": {
            "name": "LensFlare",
            "shortname": "LensFlare",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "source\\core\\objects\\misc\\LensFlare.js",
            "line": 5,
            "description": "LensFlare object can be used to simulate lens flare from lights.\n\nStores a list of Flares.\n\nFor optimal result LensFlare object should be attached to a light source.\n\nWorks with perspective and orthographic cameras.",
            "extends": "{Object3D}",
            "author": "tentone"
        },
        "Sky": {
            "name": "Sky",
            "shortname": "Sky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 7,
            "description": "Sky class if composed of a HemisphereLight, DirectionalLight and a dynamic generated Sky sphere geometry.\n\nThis object is composed by 3 internal objects\n\t- Hemisphere light\n\t- Directional Light\n\t- Mesh",
            "params": [
                {
                    "name": "autoUpdate",
                    "description": "If true sky auto updated its state",
                    "type": "Boolean"
                },
                {
                    "name": "dayTime",
                    "description": "Day duration in seconds",
                    "type": "Number"
                },
                {
                    "name": "sunDistance",
                    "description": "Distance of the sun",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "Starting time",
                    "type": "Number"
                }
            ],
            "extends": "{Object3D}"
        },
        "ParticleEmitterControlOptions": {
            "name": "ParticleEmitterControlOptions",
            "shortname": "ParticleEmitterControlOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 6,
            "description": "A map of options to configure an ParticleEmitterControl instance.",
            "itemtype": "property",
            "type": "Distribution"
        },
        "ParticleEmitterControl": {
            "name": "ParticleEmitterControl",
            "shortname": "ParticleEmitterControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 70,
            "description": "The ParticleEmitterControl class.",
            "is_constructor": 1,
            "author": "Luke Moody",
            "params": [
                {
                    "name": "options",
                    "description": "A map of options to configure the emitter.",
                    "type": "ParticleEmitterControlOptions"
                }
            ]
        },
        "{Object} ParticleGroupOptions": {
            "name": "{Object} ParticleGroupOptions",
            "shortname": "{Object} ParticleGroupOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 8,
            "description": "A map of options to configure an ParticleGroup instance.",
            "itemtype": "property",
            "type": "Object",
            "params": [
                {
                    "name": "texture.value",
                    "description": "An instance of Texture.",
                    "type": "Object"
                },
                {
                    "name": "texture.frames",
                    "description": "A Vector2 instance describing the number of frames on the x- and y-axis of the given texture. If not provided, the texture will NOT be treated as a sprite-sheet and as such will NOT be animated.",
                    "type": "Object="
                },
                {
                    "name": "texture.frameCount",
                    "description": "The total number of frames in the sprite-sheet.                                Allows for sprite-sheets that don't fill the entire                                texture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "texture.frames.x * texture.frames.y"
                },
                {
                    "name": "texture.loop",
                    "description": "The number of loops through the sprite-sheet that should   be performed over the course of a single particle\"s lifetime.",
                    "type": "Number"
                },
                {
                    "name": "fixedTimeStep",
                    "description": "If no dt (or deltaTime) value is passed to this group\"s    tick() function, this number will be used to move the particle    simulation forward. Value in SECONDS.",
                    "type": "Number"
                },
                {
                    "name": "hasPerspective",
                    "description": "Whether the distance a particle is from the camera should affect the particle\"s size.",
                    "type": "Boolean"
                },
                {
                    "name": "colorize",
                    "description": "Whether the particles in this group should be rendered with color, or whether the only color of particles will come from the provided texture.",
                    "type": "Boolean"
                },
                {
                    "name": "blending",
                    "description": "One of Three.js\"s blending modes to apply to this group\"s ShaderMaterial.",
                    "type": "Number"
                },
                {
                    "name": "transparent",
                    "description": "Whether these particle\"s should be rendered with transparency.",
                    "type": "Boolean"
                },
                {
                    "name": "alphaTest",
                    "description": "Sets the alpha value to be used when running an alpha test on the texture.value property. Value between 0 and 1.",
                    "type": "Number"
                },
                {
                    "name": "depthWrite",
                    "description": "Whether rendering the group has any effect on the depth buffer.",
                    "type": "Boolean"
                },
                {
                    "name": "depthTest",
                    "description": "Whether to have depth test enabled when rendering this group.",
                    "type": "Boolean"
                },
                {
                    "name": "fog",
                    "description": "Whether this group\"s particles should be affected by their scene\"s fog.",
                    "type": "Boolean"
                },
                {
                    "name": "scale",
                    "description": "The scale factor to apply to this group\"s particle sizes. Useful for setting particle sizes to be relative to renderer size.",
                    "type": "Number"
                }
            ]
        },
        "ParticleGroup": {
            "name": "ParticleGroup",
            "shortname": "ParticleGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 29,
            "description": "The ParticleGroup class. Creates a new group, containing a material, geometry, and mesh.",
            "is_constructor": 1,
            "author": "Luke Moody",
            "params": [
                {
                    "name": "options",
                    "description": "A map of options to configure the group instance.",
                    "type": "ParticleGroupOptions"
                }
            ]
        },
        "ShaderUtils": {
            "name": "ShaderUtils",
            "shortname": "ShaderUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 3,
            "description": "A bunch of utility functions used throughout the library.",
            "static": 1,
            "author": "Luke Moody"
        },
        "ShaderAttribute": {
            "name": "ShaderAttribute",
            "shortname": "ShaderAttribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 4,
            "description": "A helper to handle creating and updating a BufferAttribute instance.",
            "is_constructor": 1,
            "author": "Luke Moody",
            "params": [
                {
                    "name": "type",
                    "description": "The buffer attribute type. See ShaderAttribute.typeSizeMap for valid values.",
                    "type": "String"
                },
                {
                    "name": "dynamicBuffer",
                    "description": "Whether this buffer attribute should be marked as dynamic or not.",
                    "type": "Boolean"
                },
                {
                    "name": "arrayType",
                    "description": "A reference to a TypedArray constructor. Defaults to Float32Array if none provided.",
                    "type": "Function"
                }
            ]
        },
        "TypedArrayHelper": {
            "name": "TypedArrayHelper",
            "shortname": "TypedArrayHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 1,
            "description": "A helper class for TypedArrays.\n\nAllows for easy resizing, assignment of various component-based types (e.g. Vector2, Vector3, Mat3, Color, ...) Numbers, and setting from other TypedArrays.",
            "is_constructor": 1,
            "author": "Luke Moody",
            "params": [
                {
                    "name": "TypedArrayConstructor",
                    "description": "The constructor to use (Float32Array, Uint8Array, etc.)",
                    "type": "Function"
                },
                {
                    "name": "size",
                    "description": "The size of the array to create",
                    "type": "Number"
                },
                {
                    "name": "componentSize",
                    "description": "The number of components per-value (ie. 3 for a vec3, 9 for a Mat3, etc.)",
                    "type": "Number"
                },
                {
                    "name": "indexOffset",
                    "description": "The index in the array from which to start assigning values. Default 0 if none provided",
                    "type": "Number"
                }
            ]
        },
        "ParticleDistributions": {
            "name": "ParticleDistributions",
            "shortname": "ParticleDistributions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "line": 1,
            "description": "A map of supported distribution types used by ParticleEmitterControl instances.\n\nThese distribution types can be applied to an emitter globally, which will affect the position, velocity, and acceleration value calculations for an emitter, or they can be applied on a per-property basis."
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Particles",
            "namespace": "",
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 7,
            "description": "Particle emitter is a wrapper for SPE particle system.\n\nSPE is a threejs based particle emitter engine.\n\nDocumentation for SPE particle engine can be found here https:// squarefeet.github.io/ShaderParticleEngine/docs/api/index.html",
            "extends": "{Points}"
        },
        "PhysicsObject": {
            "name": "PhysicsObject",
            "shortname": "PhysicsObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 5,
            "description": "Wrapper for cannon.js physics objects.\n\nThe editor includes tools to create cannon shapes from three.js geometry objects.\n\nDocumentation for cannon.js physics available here http:// schteppe.github.io/cannon.js/docs/",
            "extends": "{Group}"
        },
        "BaseNode": {
            "name": "BaseNode",
            "shortname": "BaseNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "source\\core\\objects\\script\\nodes\\BaseNode.js",
            "line": 4,
            "description": "Base node are used as a basis for all other nodes, they implement the necessary common functionality for all nodes.\n\nBase nodes add a destructible function with a button which allows the user to destroy them.\n\nWhen the node gets destroyed it automatically gets removed from the graph.",
            "is_constructor": 1
        },
        "OperationNode": {
            "name": "OperationNode",
            "shortname": "OperationNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "line": 5,
            "description": "Operation nodes can be used for simple math operations with two input values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "operation",
                    "description": "Math operation symbol to be performed.",
                    "type": "String"
                }
            ]
        },
        "NodeScript": {
            "name": "NodeScript",
            "shortname": "NodeScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 4,
            "description": "Node scripts are build using a graph composed of operations.\n\nThey can be used to create interaction without requiring any coding, logic can be build from provided blocks.",
            "extends": "{Object}"
        },
        "PythonScript": {
            "name": "PythonScript",
            "shortname": "PythonScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 7,
            "description": "Python scripts are similar to Script object by are written using the Python programming language.\n\nSupport for Python is provided using the Brython (https://github.com/brython-dev/brython) transpiler.\n\nIt is not possible to include external python code and libraries to the script.",
            "extends": "{Script}",
            "params": [
                {
                    "name": "code",
                    "description": "Code to be used by this script",
                    "type": "String"
                }
            ]
        },
        "Script": {
            "name": "Script",
            "shortname": "Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 10,
            "description": "Script objects are used to control other objects present in the scene.\n\nThese scripts can access everything inside of the program where they are running they should be used to control logic aspect of the application.\n\nIts possible to extend these scripts by using libraries that can be imported using the include() function provided. Libraries can be stored locally on the project or loaded from remote sources.",
            "extends": "{Object}",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code to be used by this script",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Mode used to import external code into the script.",
                    "type": "Number"
                }
            ]
        },
        "SpineAnimation": {
            "name": "SpineAnimation",
            "shortname": "SpineAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animations",
            "namespace": "",
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 7,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine. These animations are created using the Spine animation studio software.\n\nBased on the official three.js runtime code available at https:// github.com/EsotericSoftware/spine-runtimes.\n\nMore information about spine available at www.esotericsoftware.com.",
            "extends": "{spine.threejs.SkeletonMesh}",
            "params": [
                {
                    "name": "json",
                    "description": "Object containing the spine JSON encoded data for this animation.",
                    "type": "Object"
                },
                {
                    "name": "atlas",
                    "description": "Atlas file path.",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "Path to retrieve images from.",
                    "type": "String"
                },
                {
                    "name": "textures",
                    "description": "List of textures provided for this animation.",
                    "type": "Texture[]"
                }
            ]
        },
        "SpineTexture": {
            "name": "SpineTexture",
            "shortname": "SpineTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\objects\\spine\\SpineTexture.js",
            "line": 4,
            "description": "Spine animation textures are used alognside with SpineAnimation objects.\n\nEach animations sprite atlas uses a SpineTexture object.",
            "params": [
                {
                    "name": "texture",
                    "description": "Texture to be used inside of this spine texture.",
                    "type": "Texture"
                }
            ]
        },
        "CanvasSprite": {
            "name": "CanvasSprite",
            "shortname": "CanvasSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\objects\\sprite\\CanvasSprite.js",
            "line": 4,
            "description": "Canvas sprite is used to render canvas based elements in a 2D canvas.\n\nThe sprite can be configured to keep a relative size to the screen of an absolute size.",
            "extends": "{Sprite}"
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sprite",
            "namespace": "",
            "file": "source\\core\\objects\\sprite\\Sprite.js",
            "line": 3,
            "description": "Sprites always face the screen are used for 2D elements.\n\nBased on Sprite documentation for the object can be found at https:// threejs.org/docs/index.html#Reference/Objects/Sprite.",
            "params": [
                {
                    "name": "material",
                    "description": "Material used to draw sprites",
                    "type": "Material"
                }
            ],
            "extends": "{Script}"
        },
        "TextBitmap": {
            "name": "TextBitmap",
            "shortname": "TextBitmap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sprite",
            "namespace": "",
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 8,
            "description": "Text bitmap atlas with support for signed distance field data.\n\nInput data should be composed of a BMFont file (can be a .fnt, .json. etc) file and a character atlas texture from an image.\n\nFont atlas can be generate using the tool http:// www.angelcode.com/products/bmfont/\n\nBased on the three-bmfont-text library.\n - https:// github.com/Jam3/three-bmfont-text\n - https:// github.com/Jam3/load-bmfont",
            "extends": "{Mesh}",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object with all parameters for bmfont.",
                    "type": "Object"
                },
                {
                    "name": "texture",
                    "description": "Texture with the image character atlas to be used.",
                    "type": "Texture"
                },
                {
                    "name": "shader",
                    "description": "The text rendering shader to be used (Bitmap, SDF, MSDF).",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "Color of the text.",
                    "type": "Number"
                }
            ]
        },
        "TextMesh": {
            "name": "TextMesh",
            "shortname": "TextMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 4,
            "description": "Special mesh type used to draw 3D text.\n\nIt receives a Font resource that is used to triangulate and extrude font data into a 3D mesh.",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be draw",
                    "type": "String"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the surface of the geometry",
                    "type": "Material"
                },
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                },
                {
                    "name": "height",
                    "description": "Text height",
                    "type": "Number"
                },
                {
                    "name": "bevel",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "bevelThickness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bevelSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "curveSegments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "extruded",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "{Mesh}"
        },
        "TextSprite": {
            "name": "TextSprite",
            "shortname": "TextSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 4,
            "description": "Text sprite is used to represent text as a sprite.\n\nThis approach is memory expensive since it needs to write a new texture for each text. But allows the used to access any font available in the browser.\n\nThe text is rendered to canvas and then copied to a texture. It automatically ajusts the object scale to match the text aspect.",
            "extends": "{CanvasSprite}"
        },
        "Program": {
            "name": "Program",
            "shortname": "Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "source\\core\\objects\\Program.js",
            "line": 15,
            "description": "Program class contains all the data of a app.\n\nIs stores and manages all available resources used by the children objects.\n\nIs responsible for handling runtime tasks, initialization, update, resizes etc.",
            "extends": "{ResourceManager}"
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "source\\core\\objects\\Scene.js",
            "line": 6,
            "description": "Scenes allow you to set up what and where is to be rendered by the engine.\n\nThis is where you place objects, lights and cameras.\n\nA program may contain multiple scenes, its possible to change between scene using scripts.\n\nScene three.js documentation available here https://threejs.org/docs/index.html#Reference/Scenes/Scene.",
            "extends": "{Scene}"
        },
        "TargetConfig": {
            "name": "TargetConfig",
            "shortname": "TargetConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "source\\core\\platform\\TargetConfig.js",
            "line": 1,
            "description": "Target configuration stores platform specific configurations used when exporting the application to a platform."
        },
        "FXAAPass": {
            "name": "FXAAPass",
            "shortname": "FXAAPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js",
            "line": 4,
            "description": "Fast approximate anti-aliasing (FXAA) is an anti-aliasing algorithm to smooth jagged edges on post procesing effects.\n\nMore information about FXAA available here:\n - https:// developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf"
        },
        "AfterimagePass": {
            "name": "AfterimagePass",
            "shortname": "AfterimagePass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\AfterimagePass.js",
            "line": 5,
            "description": "After image render pass blends the current frame with the previous frame.\n\nA dampening value is applied in the blend, that is performed additively."
        },
        "BloomPass": {
            "name": "BloomPass",
            "shortname": "BloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\BloomPass.js",
            "line": 6,
            "description": "Simple bloom effect pass.",
            "author": "alteredq / http:// alteredqualia.com/",
            "params": [
                {
                    "name": "strength",
                    "description": "Bloom effect strength.",
                    "type": "Number"
                },
                {
                    "name": "kernelSize",
                    "description": "Bloom kernel size.",
                    "type": "Number"
                },
                {
                    "name": "sigma",
                    "description": "Sigma.",
                    "type": "Number"
                },
                {
                    "name": "resolution",
                    "description": "Bloom buffer resolution.",
                    "type": "Number"
                }
            ]
        },
        "BokehPass": {
            "name": "BokehPass",
            "shortname": "BokehPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 5,
            "description": "Depth-of-field post-process with bokeh shader.",
            "params": [
                {
                    "name": "focus",
                    "description": "Focus distance.",
                    "type": "Number"
                },
                {
                    "name": "aperture",
                    "description": "Camera aperture.",
                    "type": "Number"
                },
                {
                    "name": "maxblur",
                    "description": "Maximum level of blur.",
                    "type": "Number"
                }
            ]
        },
        "ColorifyPass": {
            "name": "ColorifyPass",
            "shortname": "ColorifyPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "line": 5,
            "description": "Colorify pass can be used to colorify the scene."
        },
        "CopyPass": {
            "name": "CopyPass",
            "shortname": "CopyPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\CopyPass.js",
            "line": 4,
            "description": "Copy pass can be used to copy the actual content on the composer to the screen."
        },
        "DotScreenPass": {
            "name": "DotScreenPass",
            "shortname": "DotScreenPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 5,
            "description": "DotScreen pass generates a poster like effect on top of the scene.",
            "author": "alteredq / http:// alteredqualia.com/",
            "params": [
                {
                    "name": "center",
                    "description": "Dot rotation center.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "Dot rotation angle.",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "Dot scale.",
                    "type": "Number"
                }
            ]
        },
        "FilmPass": {
            "name": "FilmPass",
            "shortname": "FilmPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 5,
            "description": "Film pass is used to simulate a film/TV like effect.",
            "author": "alteredq / http:// alteredqualia.com/"
        },
        "HueSaturationPass": {
            "name": "HueSaturationPass",
            "shortname": "HueSaturationPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "line": 5,
            "description": "Hue and saturation pass.",
            "params": [
                {
                    "name": "hue",
                    "description": "Hue rotation from -1 to 1",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "Color saturation from -1  to 1",
                    "type": "Number"
                }
            ]
        },
        "SSAONOHPass": {
            "name": "SSAONOHPass",
            "shortname": "SSAONOHPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 7,
            "description": "Screen space ambient occlusion (SSAO) pass is used to simulate ambient occlusion shadowing effect.\n\nUses the normal-oriented hemisphere method produces a more realistic-looking than the basic Crysis method.\n\nBased on the article from http:// john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html\n\nMore information about SSAO here\n - http:// developer.download.nvidia.com/SDK/10.5/direct3d/Source/ScreenSpaceAO/doc/ScreenSpaceAO.pdf"
        },
        "SSAOPass": {
            "name": "SSAOPass",
            "shortname": "SSAOPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 6,
            "description": "Screen space ambient occlusion (SSAO) pass is used to simulate ambient occlusion shadowing effect.\n\nThis variant of SSAO produces a halo like effect to simulate the effect.\n\nMore information about SSAO here\n - http:// developer.download.nvidia.com/SDK/10.5/direct3d/Source/ScreenSpaceAO/doc/ScreenSpaceAO.pdf",
            "author": "alteredq / http:// alteredqualia.com/"
        },
        "SobelPass": {
            "name": "SobelPass",
            "shortname": "SobelPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\SobelPass.js",
            "line": 4,
            "description": "Sobel pass is used to create a edge highlight effect with a sobel operator."
        },
        "TechnicolorPass": {
            "name": "TechnicolorPass",
            "shortname": "TechnicolorPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\TechnicolorPass.js",
            "line": 4,
            "description": "Simulate technicolor television colors."
        },
        "UnrealBloomPass": {
            "name": "UnrealBloomPass",
            "shortname": "UnrealBloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 6,
            "description": "Unreal engine like bloom effect pass.\n\nMore information available here\n - https:// docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/",
            "author": "spidersharma / http:// eduperiment.com/",
            "params": [
                {
                    "name": "strength",
                    "description": "Bloom effect strength.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Bloom effect radius.",
                    "type": "Number"
                },
                {
                    "name": "threshold",
                    "description": "White point threshold.",
                    "type": "Number"
                }
            ]
        },
        "SSAOShader": {
            "name": "SSAOShader",
            "shortname": "SSAOShader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\shaders\\SSAOShader.js",
            "line": 5,
            "description": "Screen-space ambient occlusion shader\n   - http:// devlog-martinsh.blogspot.com (assembled by Martins Upitis)\n   - http:// www.gamedev.net/topic/550699-ssao-no-halo-artifacts/ (original technique is made by ArKano22)\n\nModified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)",
            "static": 1,
            "author": "alteredq / http:// alteredqualia.com/"
        },
        "EffectComposer": {
            "name": "EffectComposer",
            "shortname": "EffectComposer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 25,
            "description": "The effect composer is used to organize multiple post-processing passes.\n\nIt is used by camera objects to organize the rendering pipeline."
        },
        "Pass": {
            "name": "Pass",
            "shortname": "Pass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 3,
            "description": "A render Pass is used to render something in the graphics pipeline.\n\nCan be used to render a scene, apply post processing effects, merge buffers,  etc."
        },
        "RenderPass": {
            "name": "RenderPass",
            "shortname": "RenderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\RenderPass.js",
            "line": 3,
            "description": "Render pass is used to render the scene the same way as if were using the renderer directly.",
            "extends": "{Pass}"
        },
        "ShaderPass": {
            "name": "ShaderPass",
            "shortname": "ShaderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\postprocessing\\ShaderPass.js",
            "line": 4,
            "description": "Shader pass is used to apply a post processing effect over an already rendered scene.",
            "author": "alteredq / http:// alteredqualia.com/"
        },
        "CSS3DObject": {
            "name": "CSS3DObject",
            "shortname": "CSS3DObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\renderer\\css\\CSS3DObject.js",
            "line": 3,
            "description": "CSS 3D element projected in the 3D scene.\n\nEncapsulated a DOM element that is projected into 3D space using the 3D object transform values.\n\nCSS3D object always stay above everything elese in the 3D scene.",
            "extends": "{Object3D}",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element encapsulated in the object container.",
                    "type": "Component"
                }
            ]
        },
        "CSS3DRenderer": {
            "name": "CSS3DRenderer",
            "shortname": "CSS3DRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 3,
            "description": "3D renderer using DOM elements.\n\nApplies the threejs transformation hierarchy to the DOM element using CSS3D.\n\nOnly renders CSS specific objects, the output of the renderer is not combined with the WebGL output. Everything is renderer of top.\n\nBased on the three.js adaptation (mrdoob, yomotsu) of http:// www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs",
            "params": [
                {
                    "name": "domElement",
                    "description": "DOM division to place rendered objects.",
                    "type": "Component"
                }
            ]
        },
        "CSS3DSprite": {
            "name": "CSS3DSprite",
            "shortname": "CSS3DSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\renderer\\css\\CSS3DSprite.js",
            "line": 3,
            "description": "CSS 3D element drawn as a billboard.\n\nAlways faces the screen orientation (does not rotate).",
            "extends": "{CSS3DObject}",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element encapsulated in the object container.",
                    "type": "Component"
                }
            ]
        },
        "RendererConfiguration": {
            "name": "RendererConfiguration",
            "shortname": "RendererConfiguration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 3,
            "description": "Renderer configuration stores all the WebGL renderer related parameters.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options object with the values to be used in the rendere configuration, values not specified are set to default.",
                    "type": "Object"
                }
            ]
        },
        "RendererState": {
            "name": "RendererState",
            "shortname": "RendererState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "source\\core\\renderer\\RendererState.js",
            "line": 3,
            "description": "Renderer state can be used to store and restore a renderer state between postprocessing passes.\n\nIt stores the clean configurations of the renderer."
        },
        "Audio": {
            "name": "Audio",
            "shortname": "Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Audio.js",
            "line": 6,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to Audio file or ArrayBuffer data.",
                    "type": "ArrayBuffer | string"
                },
                {
                    "name": "encoding",
                    "description": "Audio encoding (mp3, wav, etc).",
                    "type": "String"
                }
            ]
        },
        "Font": {
            "name": "Font",
            "shortname": "Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Font.js",
            "line": 7,
            "description": "Font class stores font data, font data can be stored as an  json or as a TTF file (stored in Base64).\n\nFont objects are used to draw text using the TextMesh object and/or generate text bitmap.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to font file",
                    "type": "String"
                }
            ]
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Image.js",
            "line": 7,
            "description": "Image class is used to store image data that is used to create Textures.\n\nImages can be stored in mutiple formats.\n\nSome formats (tga, tiff, etc) are converted to png or jpeg in order to work with the rest of the code.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "Can be URL to image, ArrayBuffer data or base64 encoded data.",
                    "type": "ArrayBuffer | string"
                },
                {
                    "name": "encoding",
                    "description": "Image encoding, required for ArrayBuffer data.",
                    "type": "String"
                }
            ]
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Model.js",
            "line": 4,
            "description": "Model is used to load and check file type for external 3D models, animations, scenes etc.\n\nIt wraps other threejs loaders and loads files using them depending on file format.",
            "extends": "{Resource}"
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Resource.js",
            "line": 4,
            "description": "Resource class is used to represent resources.\n\nResources store data that is used by objects."
        },
        "ResourceManager": {
            "name": "ResourceManager",
            "shortname": "ResourceManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 10,
            "description": "Resource manager is used to manage available resources used by objects\n\nThe resource manager is used to extend Object3D elements and is not meant to be used as a standalone.\n\nFor standalone resource management use the resource container.",
            "extends": "{Object3D}"
        },
        "TextFile": {
            "name": "TextFile",
            "shortname": "TextFile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\TextFile.js",
            "line": 3,
            "description": "Text file resource can be used to store data or code.\n\nText file data can be used to store information to be consumend by the application or runtime code that can be imported by scripts.",
            "extends": "{Resource}"
        },
        "Video": {
            "name": "Video",
            "shortname": "Video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\Video.js",
            "line": 6,
            "description": "Video resources are used to store video.\n\nVideo data stored in base64.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to video file.",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "Image encoding, required for ArrayBuffer data.",
                    "type": "String"
                }
            ]
        },
        "VideoStream": {
            "name": "VideoStream",
            "shortname": "VideoStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "source\\core\\resources\\VideoStream.js",
            "line": 4,
            "description": "Video stream resource, used to load streamable video files directly from URL.",
            "extends": "{Video}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to video file.",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "Image encoding, required for ArrayBuffer data.",
                    "type": "String"
                }
            ]
        },
        "CanvasTexture": {
            "name": "CanvasTexture",
            "shortname": "CanvasTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime, using the context property.\n\nCanvas textures always start with black background and a red text \"Canvas Texture\".",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "width",
                    "description": "Canvas width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Canvas height",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "CompressedTexture": {
            "name": "CompressedTexture",
            "shortname": "CompressedTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\CompressedTexture.js",
            "line": 3,
            "description": "CompressTexture class is used to store textures using GPU compatible compressed data.\n\nThe advantage of using these texture is the fact that the texture does not get uncompressed in the GPU memory saving not only project space but also saving video memory during runtime.\n\nThe problem with compressed textures is that its hardware dependent (they dont work everywhere)\n- DXT: supported on desktop and some Android smartphones\n- PVR: supported on iOS and some Android smartphones\n- ETC1: supported by most Android smartphones\n\nThe usage of these format can free a lot of video memory and is a must for mobile devices.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mipmaps",
                    "description": "Mipmaps levels",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "CubeTexture": {
            "name": "CubeTexture",
            "shortname": "CubeTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 5,
            "description": "CubeTextures represent 360 view using six images, these images correspond to the faces of a cube.\n\nCubeTextures can be used to simulate reflections and transparency refraction in materials.\n\nIs also possible to create dynamic cubetextures using the CubeCamera object.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "images",
                    "description": "Image array",
                    "type": "Array"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "DataTexture": {
            "name": "DataTexture",
            "shortname": "DataTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\DataTexture.js",
            "line": 3,
            "description": "Data texture stored binary RAW texture data values.\n\nCan be used to store render target result or to load custom image formats. Pixels can be manipulated individually in the data array.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "data",
                    "description": "Image data array",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "SpriteSheetTexture": {
            "name": "SpriteSheetTexture",
            "shortname": "SpriteSheetTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 5,
            "description": "SpriteSheet texture, can be used load spritesheet animations as textures.\n\nThe images have to be aligned in a grid without overlapping if the spritesheet is not full the last rows or blocks should be empty.\n\nImages are played row by row, changing every animationSpeed seconds.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "framesHorizontal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "framesVertical",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "totalFrames",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\Texture.js",
            "line": 4,
            "description": "Basic image texture object wraps a texture from a img DOM element\n\nSupport for GIF animations without playback controls.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "Image | String"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "VideoTexture": {
            "name": "VideoTexture",
            "shortname": "VideoTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 4,
            "description": "Video texture, uses a video DOM element instead of a img element.\n\nVideoTexture also provides methods for playback control.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "WebcamTexture": {
            "name": "WebcamTexture",
            "shortname": "WebcamTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Webcam texture is used to capture and display video from a webcam in real-time.\n\nIt uses WebRTC, the host must support it, otherwise WebcamTexture will display a black image.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Object3D": {
            "name": "Object3D",
            "shortname": "Object3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 451,
            "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\n\nThis page provides documentation for some of the main features of this class, the original documentation of this class can be found at https:// threejs.org/docs/index.html#Reference/Core/Object3D.\n\nAll Freedom World Editor objects extend the Object3D class of some other higher level class from three.js."
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "source\\core\\three\\materials\\Material.js",
            "line": 3,
            "description": "Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don\"t have to rewrite materials if you decide to use a different renderer.\n\nOriginal documentation available here https:// threejs.org/docs/index.html#Reference/Materials/Material"
        },
        "Skeleton": {
            "name": "Skeleton",
            "shortname": "Skeleton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 5,
            "description": "Use an array of bones to create a skeleton that can be used by a SkinnedMesh.",
            "params": [
                {
                    "name": "bones",
                    "description": "Bone array.",
                    "type": "Array"
                },
                {
                    "name": "boneInverses",
                    "description": "An array of Matrix4.",
                    "type": "Array"
                }
            ]
        },
        "Fog": {
            "name": "Fog",
            "shortname": "Fog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "source\\core\\three\\scenes\\Fog.js",
            "line": 1,
            "description": "Fog class is used to store fog attributes attached to a Scene\n\nOriginal documentation for fog available here https:// threejs.org/docs/index.html#Reference/Scenes/Fog and for exponential fog here https:// threejs.org/docs/index.html#Reference/Scenes/FogExp2"
        },
        "ArraybufferUtils": {
            "name": "ArraybufferUtils",
            "shortname": "ArraybufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 1,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format",
            "static": 1
        },
        "Base64Utils": {
            "name": "Base64Utils",
            "shortname": "Base64Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 2,
            "description": "Base64Utils contains methods to convert from and to Base64 binary format.",
            "static": 1
        },
        "BufferUtils": {
            "name": "BufferUtils",
            "shortname": "BufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\binary\\BufferUtils.js",
            "line": 1,
            "description": "BufferUtils contains methods to convert from and to Node.js Buffer binary format",
            "static": 1
        },
        "ByteArrayUtils": {
            "name": "ByteArrayUtils",
            "shortname": "ByteArrayUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\binary\\ByteArrayUtils.js",
            "line": 1,
            "description": "ByteArrayUtils contains methods to convert from and to ByteArray binary format\n\nA byte array is a numeric array that stores a 8 bit (0 to 255) value for each position.",
            "static": 1
        },
        "Tree": {
            "name": "Tree",
            "shortname": "Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\struct\\Tree.js",
            "line": 3,
            "description": "Tree structure used to represent Trees.\n\nEvery tree stores Trees as children and have a parent children.\n\nIf the parent is null then the Tree is the root."
        },
        "TreeUtils": {
            "name": "TreeUtils",
            "shortname": "TreeUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\struct\\TreeUtils.js",
            "line": 3,
            "description": "TreeUtils used to compare Tree.\n\nCan also be used to compare Object structure.",
            "static": 1
        },
        "AnimationTimer": {
            "name": "AnimationTimer",
            "shortname": "AnimationTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 3,
            "description": "Animation timer is a special type of timer that uses the requestAnimationFrame() method.\n\nThis timer calls the method with the same rate as the screen refresh rate.",
            "params": [
                {
                    "name": "callback",
                    "description": "Timer callback function.",
                    "type": "Function"
                }
            ]
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 2,
            "description": "Time is user to call functions in loop at a defined rate.\n\nLoop time can be changed dynamically, it is readjusted on the next timer call.",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback task method called at the rate of the time.",
                    "type": "Function"
                },
                {
                    "name": "Time",
                    "description": "in ms to run the timer task.",
                    "type": "Number"
                }
            ]
        },
        "WorkerPool": {
            "name": "WorkerPool",
            "shortname": "WorkerPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 3,
            "description": "Worker pool is used to manage and execute mutiple task of the same type using a predefined number of workers.\n\nWorkers are pre initialized to avoid the overhead of creation during execution.\n\nThese workers receive messages with a uuid of the task and the data to be processed.\n\n{\n  uuid: <Task UUID>,\n  data: <Data object>\n}\n\nThe worker should respond with a message using the same structure.",
            "params": [
                {
                    "name": "file",
                    "description": "Worker JS file path.",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "Number of workers to be created for this pool.",
                    "type": "Number"
                }
            ]
        },
        "WorkerTask": {
            "name": "WorkerTask",
            "shortname": "WorkerTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "source\\core\\utils\\worker\\WorkerTask.js",
            "line": 3,
            "description": "A worker task is processed by a worker pool.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be sent to the worker.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function called when the task finishes.",
                    "type": "Function"
                }
            ]
        },
        "EventManager": {
            "name": "EventManager",
            "shortname": "EventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "source\\core\\utils\\EventManager.js",
            "line": 3,
            "description": "EventManager is used to manager DOM events creationg and destruction in a single function call.\n\nIt is used by objects to make it easier to add, manager and remove events from DOM elements.",
            "is_constructor": 1
        },
        "LocalStorage": {
            "name": "LocalStorage",
            "shortname": "LocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "source\\core\\utils\\LocalStorage.js",
            "line": 2,
            "description": "Utils to access the browser local storage.",
            "static": 1
        },
        "MathUtils": {
            "name": "MathUtils",
            "shortname": "MathUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "source\\core\\utils\\MathUtils.js",
            "line": 1,
            "description": "MathUtils contains auxiliary values and function to help with mathematical operations.",
            "static": 1
        },
        "ObjectUtils": {
            "name": "ObjectUtils",
            "shortname": "ObjectUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "Object utils is a collection of methods to apply operations to Object3D instances.",
            "static": 1
        },
        "PhysicsGenerator": {
            "name": "PhysicsGenerator",
            "shortname": "PhysicsGenerator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 5,
            "description": "Physics generator is used to create Cannon.js shapes from three.js geometries.\n\nCan be used with any object that contains a geometry.\n\nIt is based on the original Mesh2Shape converted by @donmccurdy.",
            "static": 1
        },
        "SimplexNoise": {
            "name": "SimplexNoise",
            "shortname": "SimplexNoise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\utils\\SimplexNoise.js",
            "line": 1,
            "description": "Simplex noise generator object. Can generate 1D, 2D, 3D and 4D noise.\n\nPorted from Stefan Gustavson's java implementation (http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf) Stefan's excellent paper for details on how this code works.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "r",
                    "description": "Optional, random number generator object, it is assumed to have a random() method.",
                    "type": "Any"
                }
            ]
        },
        "UnitConverter": {
            "name": "UnitConverter",
            "shortname": "UnitConverter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\utils\\UnitConverter.js",
            "line": 2,
            "description": "The unit convertor is responsible for performing unit conversion between values.\n\nUnits are represented by their natural texture unit representation (m/s, km/s, n/m, etc).",
            "static": 1
        },
        "ARHandler": {
            "name": "ARHandler",
            "shortname": "ARHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 3,
            "description": "AR class handles all the augmented reality related tasks.\n\nCan be used to detect if the host system is capable of displaying AR content and checks for the availability of WebXR with the required modes."
        },
        "VRHandler": {
            "name": "VRHandler",
            "shortname": "VRHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 3,
            "description": "VR class handles all the virtual reality related tasks.\n\nCan be used to detect if the host system is capable of displaying VR content and checks for the availability of WebXR and/or WebVR."
        },
        "App": {
            "name": "App",
            "shortname": "App",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Runtime",
            "namespace": "",
            "file": "source\\core\\App.js",
            "line": 10,
            "description": "app is the main class of the runtime system, is used to embed projects into external webpages and applications.\n\nProject files can be loaded directly from their project files into any kind of project. The app class handles all the runtime and control of the application lifecycle.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be used by the runtime, if no canvas is provided a new one is created and added to the document.body, to create a new App without canvas a null value can be passed.",
                    "type": "Component"
                }
            ]
        },
        "FileSystem": {
            "name": "FileSystem",
            "shortname": "FileSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Files",
            "namespace": "",
            "file": "source\\core\\FileSystem.js",
            "line": 6,
            "description": "FileSystem is used to read and write files using Freedom World Editor.\n\nIts implements multiple solutions for each method depending on the platform (NodeJS, brower or cordova).\n\nSome operations are platform specific and might not work everywhere."
        },
        "Nunu": {
            "name": "Nunu",
            "shortname": "Nunu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Runtime",
            "namespace": "",
            "file": "source\\core\\Nunu.js",
            "line": 17,
            "description": "Freedom World Editor core main file.\n\nStore development version, timestamp and contains global method to check browser feature support."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 24,
            "description": "Create actions from array of animations.",
            "itemtype": "method",
            "name": "createActions",
            "params": [
                {
                    "name": "animations",
                    "description": "Array of animations.",
                    "type": "Array"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 45,
            "description": "Set animation mixer time.",
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "time",
                    "description": "Time in seconds.",
                    "type": "Number"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 63,
            "description": "Play animation.",
            "itemtype": "method",
            "name": "play",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 73,
            "description": "Stop animation playback.",
            "itemtype": "method",
            "name": "stop",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 84,
            "description": "Pause animation playback.",
            "itemtype": "method",
            "name": "pause",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\animation\\AnimationMixer.js",
            "line": 100,
            "description": "Update animation state.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "Time since last call.",
                    "type": "Number"
                },
                {
                    "name": "forceUpdate",
                    "description": "If set true the mixer is updated even if it isnt playing.",
                    "type": "Boolean"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 12,
            "description": "Indicates if the output should be a buffer geometry or a regular geometry.",
            "itemtype": "attribute",
            "name": "bufferGeometry",
            "type": "{boolean}",
            "class": "TwistModifier",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 20,
            "description": "Twist direction vector, the twist is performed around this vector in its direction.",
            "itemtype": "attribute",
            "name": "direction",
            "type": "{Vector3}",
            "class": "TwistModifier",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 28,
            "description": "Twist angle of rotation, applied from the start to the end of rotation.",
            "itemtype": "attribute",
            "name": "angle",
            "type": "{number}",
            "class": "TwistModifier",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 36,
            "description": "Start height of the twist rotation.\n\nThis values is in geometry coordinate space.",
            "itemtype": "attribute",
            "name": "start",
            "type": "{number}",
            "class": "TwistModifier",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\modifiers\\TwistModifier.js",
            "line": 57,
            "description": "Apply the modifier to a geometry object, creates a new geometry with the result.",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry to be transformed.",
                    "type": "Geometry | BufferGeometry"
                }
            ],
            "return": {
                "description": "Result geometry after applying the modifier.",
                "type": "Geometry | BufferGeometry"
            },
            "class": "TwistModifier",
            "module": "Animation"
        },
        {
            "file": "source\\core\\geometries\\ParametricBufferGeometry.js",
            "line": 33,
            "description": "Compile the generator code and generate a function to be passed to the geometry generator.",
            "itemtype": "method",
            "name": "compile",
            "return": {
                "description": "Compiled function to calculate the position of the vertex from (U, V) coordinates.",
                "type": "Function"
            },
            "class": "ParametricBufferGeometry",
            "module": "Animation"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 17,
            "description": "Vendor code of the gamepad device.",
            "itemtype": "attribute",
            "name": "vendor",
            "type": "{number}",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 25,
            "description": "Product code of the gamepad device.",
            "itemtype": "attribute",
            "name": "product",
            "type": "{number}",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 33,
            "description": "Connected state of the gamepad.",
            "itemtype": "attribute",
            "name": "connected",
            "type": "{boolean}",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 43,
            "description": "Gamepad buttons with their associated state.\n\nShould be different for every gamepad.",
            "itemtype": "attribute",
            "name": "buttons",
            "type": "{Array}",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 72,
            "description": "Set which gamepad should be used by this Gamepad instance.\n\nCan be used to override the gamepad attached to this object and enable multiple gamepad support.",
            "params": [
                {
                    "name": "Browser",
                    "description": "gamepad object.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setGamepad",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 106,
            "description": "Disconnect this gamepad object.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 121,
            "description": "Get vendor id and product id for the connected gamepad.",
            "itemtype": "method",
            "name": "setProductVendor",
            "params": [
                {
                    "name": "gamepad",
                    "description": "Gamepad object.",
                    "type": "Object"
                }
            ],
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 154,
            "description": "Update the gamepad state.\n\nShould be called every frame before checking the buttons values.",
            "itemtype": "method",
            "name": "update",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 174,
            "description": "Get analog button value between 0 and 1.\n\nIf the button is not analog enabled it will return 0 if button is not pressed or 1 if the button is pressed.",
            "itemtype": "method",
            "name": "getAnalogueButton",
            "params": [
                {
                    "name": "button",
                    "description": "Button to get analogue value from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Value between 0 and 1 depending how hard the button is pressed.",
                "type": "Number"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 188,
            "description": "Get axis value between -1 and 1 depending on the direction.",
            "itemtype": "method",
            "name": "getAxis",
            "params": [
                {
                    "name": "Axis",
                    "description": "to get value from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Value between -1 and 1 depending on the axis direction",
                "type": "Number"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 200,
            "description": "Check if a button exists in the connected Gamepad.",
            "itemtype": "method",
            "name": "buttonExists",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button exists in the connected gamepad.",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 212,
            "description": "Check if gamepad button is currently pressed.",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button is currently pressed",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 224,
            "description": "Check if a gamepad button was just pressed.",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just pressed",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 236,
            "description": "Check if a gamepad button was just released.",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just released",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 248,
            "description": "Gamepad LEFT button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 256,
            "description": "Gamepad RIGHT button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 264,
            "description": "Gamepad DOWN button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "DOWN",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 272,
            "description": "Gamepad UP button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "UP",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 280,
            "description": "Gamepad SELECT button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "SELECT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 288,
            "description": "Gamepad START button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "START",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 296,
            "description": "Gamepad HOME button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "HOME",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 304,
            "description": "Gamepad LEFT_TRIGGER_A button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT_TRIGGER_A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 312,
            "description": "Gamepad LEFT_TRIGGER_B button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT_TRIGGER_B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 320,
            "description": "Gamepad RIGHT_TRIGGER_A button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT_TRIGGER_A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 328,
            "description": "Gamepad RIGHT_TRIGGER_B button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT_TRIGGER_B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 336,
            "description": "Gamepad L1 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "L1",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 344,
            "description": "Gamepad L2 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "L2",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 352,
            "description": "Gamepad L3 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "L3",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 360,
            "description": "Gamepad R1 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "R1",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 368,
            "description": "Gamepad R2 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "R2",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 376,
            "description": "Gamepad R3 button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "R3",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 384,
            "description": "Gamepad A button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 392,
            "description": "Gamepad B button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 400,
            "description": "Gamepad C button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "C",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 408,
            "description": "Gamepad D button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "D",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 416,
            "description": "Gamepad X button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "X",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 424,
            "description": "Gamepad Y button.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "Y",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 432,
            "description": "Gamepad LEFT_ANALOGUE_BUT axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_BUT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 440,
            "description": "Gamepad LEFT_ANALOGUE_HOR axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_HOR",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 448,
            "description": "Gamepad LEFT_ANALOGUE_VERT axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_VERT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 456,
            "description": "Gamepad RIGHT_ANALOGUE_BUT axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_BUT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 464,
            "description": "Gamepad RIGHT_ANALOGUE_HOR axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_HOR",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gamepad.js",
            "line": 472,
            "description": "Gamepad RIGHT_ANALOGUE_VERT axis.",
            "type": "{number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_VERT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 12,
            "description": "Alpha rotation.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 20,
            "description": "Beta rotation.",
            "itemtype": "property",
            "name": "beta",
            "type": "{number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 28,
            "description": "Gamma rotation.",
            "itemtype": "property",
            "name": "gamma",
            "type": "{number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 36,
            "description": "Device orientation.",
            "itemtype": "property",
            "name": "orientation",
            "type": "{number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 66,
            "description": "Sets a object rotation to match the device orientation.\n\nThe angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type ZXY",
            "itemtype": "method",
            "name": "setObjectQuaternion",
            "params": [
                {
                    "name": "object",
                    "description": "Object to oriented.",
                    "type": "Object3D"
                }
            ],
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Gyroscope.js",
            "line": 90,
            "description": "Dispose the gyroscope controller.\n\nCleans all events created by this controller.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 9,
            "description": "Indicates if this key is currently pressed.",
            "itemtype": "property",
            "name": "pressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 18,
            "description": "Indicates if this key was just pressed.",
            "itemtype": "property",
            "name": "justPressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 27,
            "description": "Indicates if this key was just released.",
            "itemtype": "property",
            "name": "justReleased",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 37,
            "description": "Down",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 45,
            "description": "Up",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 53,
            "description": "Reset",
            "itemtype": "attribute",
            "name": "RESET",
            "type": "{number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 63,
            "description": "Update Key status based on new key state.",
            "itemtype": "method",
            "name": "update",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 96,
            "description": "Set this key attributes manually.",
            "itemtype": "method",
            "name": "set",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Key.js",
            "line": 108,
            "description": "Reset key to default values.",
            "itemtype": "method",
            "name": "reset",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 17,
            "description": "Array with keyboard keys status.",
            "itemtype": "property",
            "name": "keys",
            "type": "{Array}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 25,
            "description": "The actions array serves as a buffer for the key input actions.\n\nUntil the update method is called it stores all the key stroke actions.\n\nOn update the key strokes are updated and the keys array stores the correct values.",
            "itemtype": "property",
            "name": "actions",
            "type": "{Array}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 40,
            "description": "Event manager used to handle the keyup, keydown and focus events.\n\nOn each event actions are added to the actions array.",
            "itemtype": "property",
            "name": "events",
            "type": "{EventManager}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 73,
            "description": "Update key flags synchronously.",
            "itemtype": "method",
            "name": "update",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 103,
            "description": "Reset keyboard status to default.\n\nDoes not clean the action list.",
            "itemtype": "method",
            "name": "reset",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 122,
            "description": "Check if a key is pressed.",
            "itemtype": "method",
            "name": "keyPressed",
            "return": {
                "description": "True is the key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 133,
            "description": "Check is a key as just pressed.",
            "itemtype": "method",
            "name": "keyJustPressed",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 144,
            "description": "Check if a key was just released.",
            "itemtype": "method",
            "name": "keyJustReleased",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 155,
            "description": "Create keyboard events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 165,
            "description": "Dispose keyboard events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 175,
            "description": "TAB key",
            "itemtype": "attribute",
            "name": "TAB",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 183,
            "description": "ENTER key",
            "itemtype": "attribute",
            "name": "ENTER",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 191,
            "description": "SHIFT key",
            "itemtype": "attribute",
            "name": "SHIFT",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 199,
            "description": "CTRL key",
            "itemtype": "attribute",
            "name": "CTRL",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 207,
            "description": "ALT key",
            "itemtype": "attribute",
            "name": "ALT",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 215,
            "description": "CAPS_LOCK key",
            "itemtype": "attribute",
            "name": "CAPS_LOCK",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 223,
            "description": "ESC key",
            "itemtype": "attribute",
            "name": "ESC",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 231,
            "description": "SPACEBAR key",
            "itemtype": "attribute",
            "name": "SPACEBAR",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 239,
            "description": "PAGE_UP key",
            "itemtype": "attribute",
            "name": "PAGE_UP",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 247,
            "description": "PAGE_DOWN key",
            "itemtype": "attribute",
            "name": "PAGE_DOWN",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 255,
            "description": "END key",
            "itemtype": "attribute",
            "name": "END",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 263,
            "description": "HOME key",
            "itemtype": "attribute",
            "name": "HOME",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 271,
            "description": "INSERT key",
            "itemtype": "attribute",
            "name": "INSERT",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 279,
            "description": "DEL key",
            "itemtype": "attribute",
            "name": "DEL",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 287,
            "description": "LEFT key",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 295,
            "description": "RIGHT key",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 303,
            "description": "UP key",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 311,
            "description": "DOWN key",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 319,
            "description": "NUM0 key",
            "itemtype": "attribute",
            "name": "NUM0",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 327,
            "description": "NUM1 key",
            "itemtype": "attribute",
            "name": "NUM1",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 335,
            "description": "NUM2 key",
            "itemtype": "attribute",
            "name": "NUM2",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 343,
            "description": "NUM3 key",
            "itemtype": "attribute",
            "name": "NUM3",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 351,
            "description": "NUM4 key",
            "itemtype": "attribute",
            "name": "NUM4",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 359,
            "description": "NUM5 key",
            "itemtype": "attribute",
            "name": "NUM5",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 367,
            "description": "NUM6 key",
            "itemtype": "attribute",
            "name": "NUM6",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 375,
            "description": "NUM7 key",
            "itemtype": "attribute",
            "name": "NUM7",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 383,
            "description": "NUM8 key",
            "itemtype": "attribute",
            "name": "NUM8",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 391,
            "description": "NUM9 key",
            "itemtype": "attribute",
            "name": "NUM9",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 399,
            "description": "A key",
            "itemtype": "attribute",
            "name": "A",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 407,
            "description": "B key",
            "itemtype": "attribute",
            "name": "B",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 415,
            "description": "C key",
            "itemtype": "attribute",
            "name": "C",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 423,
            "description": "D key",
            "itemtype": "attribute",
            "name": "D",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 431,
            "description": "E key",
            "itemtype": "attribute",
            "name": "E",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 439,
            "description": "F key",
            "itemtype": "attribute",
            "name": "F",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 447,
            "description": "G key",
            "itemtype": "attribute",
            "name": "G",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 455,
            "description": "H key",
            "itemtype": "attribute",
            "name": "H",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 463,
            "description": "I key",
            "itemtype": "attribute",
            "name": "I",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 471,
            "description": "J key",
            "itemtype": "attribute",
            "name": "J",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 479,
            "description": "K key",
            "itemtype": "attribute",
            "name": "K",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 487,
            "description": "L key",
            "itemtype": "attribute",
            "name": "L",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 495,
            "description": "M key",
            "itemtype": "attribute",
            "name": "M",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 503,
            "description": "N key",
            "itemtype": "attribute",
            "name": "N",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 511,
            "description": "O key",
            "itemtype": "attribute",
            "name": "O",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 519,
            "description": "P key",
            "itemtype": "attribute",
            "name": "P",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 527,
            "description": "Q key",
            "itemtype": "attribute",
            "name": "Q",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 535,
            "description": "R key",
            "itemtype": "attribute",
            "name": "R",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 543,
            "description": "S key",
            "itemtype": "attribute",
            "name": "S",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 551,
            "description": "T key",
            "itemtype": "attribute",
            "name": "T",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 559,
            "description": "U key",
            "itemtype": "attribute",
            "name": "U",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 567,
            "description": "V key",
            "itemtype": "attribute",
            "name": "V",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 575,
            "description": "W key",
            "itemtype": "attribute",
            "name": "W",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 583,
            "description": "X key",
            "itemtype": "attribute",
            "name": "X",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 591,
            "description": "Y key",
            "itemtype": "attribute",
            "name": "Y",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 599,
            "description": "Z key",
            "itemtype": "attribute",
            "name": "Z",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 607,
            "description": "F1 key",
            "itemtype": "attribute",
            "name": "F1",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 615,
            "description": "F2 key",
            "itemtype": "attribute",
            "name": "F2",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 623,
            "description": "F3 key",
            "itemtype": "attribute",
            "name": "F3",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 631,
            "description": "F4 key",
            "itemtype": "attribute",
            "name": "F4",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 639,
            "description": "F5 key",
            "itemtype": "attribute",
            "name": "F5",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 647,
            "description": "F6 key",
            "itemtype": "attribute",
            "name": "F6",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 655,
            "description": "F7 key",
            "itemtype": "attribute",
            "name": "F7",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 663,
            "description": "F8 key",
            "itemtype": "attribute",
            "name": "F8",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 671,
            "description": "F9 key",
            "itemtype": "attribute",
            "name": "F9",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 679,
            "description": "F10 key",
            "itemtype": "attribute",
            "name": "F10",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 687,
            "description": "F11 key",
            "itemtype": "attribute",
            "name": "F11",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Keyboard.js",
            "line": 695,
            "description": "F12 key",
            "itemtype": "attribute",
            "name": "F12",
            "type": "{number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 28,
            "description": "Array with mouse buttons status.",
            "type": "{array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 36,
            "description": "Mouse position inside of the window (coordinates in window space).",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "position",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 44,
            "description": "Mouse movement (coordinates in window space).",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "delta",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 52,
            "description": "Mouse scroll wheel movement.",
            "type": "{number}",
            "itemtype": "property",
            "name": "wheel",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 60,
            "description": "Indicates a button of the mouse was double clicked.",
            "type": "{Array}",
            "itemtype": "property",
            "name": "doubleClicked",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 68,
            "description": "DOM element where to attach the mouse events.",
            "itemtype": "property",
            "name": "domElement",
            "type": "{Element}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 76,
            "description": "Canvas attached to this mouse instance used to calculate position and delta in element space coordinates.",
            "type": "{Element}",
            "itemtype": "property",
            "name": "canvas",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 84,
            "description": "Event manager responsible for updating the raw data variables.\n\nDiferent events are used depending on the host platform.\n\nWhen the update method is called the raw data is reset.",
            "itemtype": "property",
            "name": "events",
            "type": "{EventManager}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 213,
            "description": "Left mouse button.",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 221,
            "description": "Middle mouse button.",
            "itemtype": "attribute",
            "name": "MIDDLE",
            "type": "{number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 229,
            "description": "Right mouse button.",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 237,
            "description": "Back mouse navigation button.",
            "itemtype": "attribute",
            "name": "BACK",
            "type": "{number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 245,
            "description": "Forward mouse navigation button.",
            "itemtype": "attribute",
            "name": "FORWARD",
            "type": "{number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 253,
            "description": "Element to be used to calculate coordinates relative to that canvas.",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be attached to the Mouse instance",
                    "type": "Component"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 276,
            "description": "Check if mouse is inside attached canvas (updated async).",
            "itemtype": "method",
            "name": "insideCanvas",
            "return": {
                "description": "True if mouse is currently inside the canvas",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 287,
            "description": "Set mouse lock, if true mouse lock will be request, if false the mouse will be released.",
            "itemtype": "method",
            "name": "setLock",
            "params": [
                {
                    "name": "value",
                    "description": "If true pointer lock will be requested for the canvas attached to the Mouse instance",
                    "type": "Boolean"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 323,
            "description": "Check if mouse button is currently pressed.",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button is currently pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 335,
            "description": "Check if Mouse button was double clicked.",
            "itemtype": "method",
            "name": "buttonDoubleClicked",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if some mouse button was just double clicked",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 347,
            "description": "Check if a mouse button was just pressed.",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 359,
            "description": "Check if a mouse button was just released.",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just released",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 371,
            "description": "Update mouse position.",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "xDiff",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yDiff",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 395,
            "description": "Update a mouse button.",
            "itemtype": "method",
            "name": "updateKey",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 410,
            "description": "Update mouse buttons state, position, wheel and delta synchronously.",
            "itemtype": "method",
            "name": "update",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 470,
            "description": "Create mouse events.",
            "itemtype": "method",
            "name": "create",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\Mouse.js",
            "line": 480,
            "description": "Dispose mouse events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 13,
            "description": "Left key.",
            "itemtype": "attribute",
            "name": "ARROW_LEFT",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 21,
            "description": "Up key.",
            "itemtype": "attribute",
            "name": "ARROW_UP",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 29,
            "description": "Right key.",
            "itemtype": "attribute",
            "name": "ARROW_RIGHT",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 37,
            "description": "Down key.",
            "itemtype": "attribute",
            "name": "ARROW_DOWN",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 45,
            "description": "Tizen specific enter key.",
            "itemtype": "attribute",
            "name": "ENTER",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 53,
            "description": "Tizen specific back key.",
            "itemtype": "attribute",
            "name": "BACK",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 61,
            "description": "Volume up key.",
            "itemtype": "attribute",
            "name": "VOLUME_UP",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 69,
            "description": "Volume down key.",
            "itemtype": "attribute",
            "name": "VOLUME_DOWN",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 77,
            "description": "Volume mute key.",
            "itemtype": "attribute",
            "name": "VOLUME_MUTE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 85,
            "description": "Channel up key.",
            "itemtype": "attribute",
            "name": "CHANNEL_UP",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 93,
            "description": "Channel down key.",
            "itemtype": "attribute",
            "name": "CHANNEL_DOWN",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 101,
            "description": "Red/F0 key.",
            "itemtype": "attribute",
            "name": "F0_RED",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 109,
            "description": "Green/F1 key.",
            "itemtype": "attribute",
            "name": "F1_GREEN",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 117,
            "description": "Yellow/F2 key.",
            "itemtype": "attribute",
            "name": "F2_YELLOW",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 125,
            "description": "Blue/F3 key.",
            "itemtype": "attribute",
            "name": "F3_BLUE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 133,
            "description": "Number 0 key.",
            "itemtype": "attribute",
            "name": "NUM_0",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 141,
            "description": "Number 1 key.",
            "itemtype": "attribute",
            "name": "NUM_1",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 149,
            "description": "Number 2 key.",
            "itemtype": "attribute",
            "name": "NUM_2",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 157,
            "description": "Number 3 key.",
            "itemtype": "attribute",
            "name": "NUM_3",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 165,
            "description": "Number 4 key.",
            "itemtype": "attribute",
            "name": "NUM_4",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 173,
            "description": "Number 5 key.",
            "itemtype": "attribute",
            "name": "NUM_5",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 181,
            "description": "Number 6 key.",
            "itemtype": "attribute",
            "name": "NUM_6",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 189,
            "description": "Number 7 key.",
            "itemtype": "attribute",
            "name": "NUM_7",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 197,
            "description": "Number 8 key.",
            "itemtype": "attribute",
            "name": "NUM_8",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 205,
            "description": "Number 9 key.",
            "itemtype": "attribute",
            "name": "NUM_9",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 213,
            "description": "Minus key.",
            "itemtype": "attribute",
            "name": "MINUS",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 221,
            "description": "E-manual key.",
            "itemtype": "attribute",
            "name": "E_MANUAL",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 229,
            "description": "Previous channel key.",
            "itemtype": "attribute",
            "name": "PREVIOUS_CHANNEL",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 237,
            "description": "Picture size key.",
            "itemtype": "attribute",
            "name": "PICTURE_SIZE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 245,
            "description": "Soccer key.",
            "itemtype": "attribute",
            "name": "SOCCER",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 253,
            "description": "Teletext key.",
            "itemtype": "attribute",
            "name": "TELETEXT",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 261,
            "description": "Search key.",
            "itemtype": "attribute",
            "name": "SEARCH",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 269,
            "description": "Guide key.",
            "itemtype": "attribute",
            "name": "GUIDE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 277,
            "description": "Source selection key.",
            "itemtype": "attribute",
            "name": "SOURCE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 285,
            "description": "Extra key.",
            "itemtype": "attribute",
            "name": "EXTRA",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 293,
            "description": "MTS key.",
            "itemtype": "attribute",
            "name": "MTS",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 301,
            "description": "Tizen specific media play and pause key.",
            "itemtype": "attribute",
            "name": "MEDIA_PLAY_PAUSE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 309,
            "description": "Tizen specific menu key.",
            "itemtype": "attribute",
            "name": "MENU",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 317,
            "description": "Tizen specific media rewind key.",
            "itemtype": "attribute",
            "name": "MEDIA_REWIND",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 325,
            "description": "Tizen specific media rewind key.",
            "itemtype": "attribute",
            "name": "MEDIA_REWIND",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 333,
            "description": "Tizen specific media fast forward key.",
            "itemtype": "attribute",
            "name": "MEDIA_FAST_FORWARD",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 341,
            "description": "Tizen specific info key.",
            "itemtype": "attribute",
            "name": "INFO",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 349,
            "description": "Tizen specific media play key.",
            "itemtype": "attribute",
            "name": "MEDIA_PLAY",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 357,
            "description": "Tizen specific exit key.",
            "itemtype": "attribute",
            "name": "EXIT",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 365,
            "description": "Tizen specific media pause key.",
            "itemtype": "attribute",
            "name": "MEDIA_PAUSE",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 373,
            "description": "Tizen specific media stop key.",
            "itemtype": "attribute",
            "name": "MEDIA_STOP",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 381,
            "description": "Tizen specific caption key.",
            "itemtype": "attribute",
            "name": "CAPTION",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 389,
            "description": "Tizen specific media record key.",
            "itemtype": "attribute",
            "name": "MEDIA_RECORD",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 397,
            "description": "Tizen specific channel list key.",
            "itemtype": "attribute",
            "name": "CHANNEL_LIST",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 405,
            "description": "Tizen specific media track previous key.",
            "itemtype": "attribute",
            "name": "MEDIA_TRACK_PREVIOUS",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 413,
            "description": "Tizen specific media next track key.",
            "itemtype": "attribute",
            "name": "MEDIA_TRACK_NEXT",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\input\\TizenKeyboard.js",
            "line": 421,
            "description": "Tizen specific 3D key.",
            "itemtype": "attribute",
            "name": "MEDIA_3D",
            "type": "{number}",
            "class": "TizenKeyboard",
            "module": "Input"
        },
        {
            "file": "source\\core\\loaders\\AudioLoader.js",
            "line": 17,
            "description": "Load audio file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "AudioLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\AudioLoader.js",
            "line": 35,
            "description": "Parse audio json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Audio resource",
                "type": "Audio"
            },
            "class": "AudioLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\FontLoader.js",
            "line": 17,
            "description": "Load font file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FontLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\FontLoader.js",
            "line": 35,
            "description": "Parse font json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Font resource",
                "type": "Font"
            },
            "class": "FontLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\GeometryLoader.js",
            "line": 24,
            "description": "Set list of images to be used by the loader.",
            "itemtype": "method",
            "name": "setImages",
            "params": [
                {
                    "name": "images",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\GeometryLoader.js",
            "line": 36,
            "description": "Set list of shapes to be used by this loader.",
            "itemtype": "method",
            "name": "setShapes",
            "params": [
                {
                    "name": "shapes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\GeometryLoader.js",
            "line": 49,
            "description": "Load geometry json file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\GeometryLoader.js",
            "line": 67,
            "description": "Parse geometry json.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Geometry loaded from json.",
                "type": "Geometry"
            },
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ImageLoader.js",
            "line": 19,
            "description": "Set cross origin path for the loader.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ImageLoader"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ImageLoader.js",
            "line": 32,
            "description": "Set base path for texture loading.",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "Path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ImageLoader"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ImageLoader.js",
            "line": 45,
            "description": "Load image resource from url.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ImageLoader.js",
            "line": 65,
            "description": "Parse image json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Image resource",
                "type": "Image"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\MaterialLoader.js",
            "line": 16,
            "description": "Load material file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\MaterialLoader.js",
            "line": 36,
            "description": "Set texture array to be used when loading materials",
            "itemtype": "method",
            "name": "setTextures",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\MaterialLoader.js",
            "line": 47,
            "description": "Parse material JSON.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "material",
                "type": "Material"
            },
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 67,
            "description": "Load object file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 91,
            "description": "Parse JSON object and create the correct Object structure.\n\nData can be loaded from a file and should be parsed into Object.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "JSON data to be loaded.",
                    "type": "Object"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Program loaded from json data.",
                "type": "Object"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 134,
            "description": "Define base path for external texture loading.",
            "itemtype": "method",
            "name": "setTexturePath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 145,
            "description": "Set cross origin.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 156,
            "description": "Parse resources on JSON.",
            "itemtype": "method",
            "name": "parseResources",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "resources",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 181,
            "description": "Parse geometries on JSON.",
            "itemtype": "method",
            "name": "parseShape",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "geometries",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 202,
            "description": "Parse geometries on JSON.",
            "itemtype": "method",
            "name": "parseGeometries",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "geometries",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 226,
            "description": "Parse materials on json.",
            "itemtype": "method",
            "name": "parseMaterials",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "materials",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 249,
            "description": "Parse images on json.",
            "itemtype": "method",
            "name": "parseImages",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "images",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 270,
            "description": "Parse videos on json.",
            "itemtype": "method",
            "name": "parseVideos",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "videos",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 291,
            "description": "Parse audio on json.",
            "itemtype": "method",
            "name": "parseAudio",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "audio",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 312,
            "description": "Parse fonts on json.",
            "itemtype": "method",
            "name": "parseFonts",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "fonts",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 333,
            "description": "Parse textures on json.",
            "itemtype": "method",
            "name": "parseTextures",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "textures",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 357,
            "description": "Parse array of skeletons from JSON object.",
            "itemtype": "method",
            "name": "parseSkeletons",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 377,
            "description": "Auxiliar method to bind skeletons to loaded objects.\n\nLook for skeletonUUID property, wich is a placeholder with the skeleton UUID and replace it with the skeleton object.",
            "itemtype": "method",
            "name": "bindSkeletons",
            "params": [
                {
                    "name": "object",
                    "description": "Object3D that contains objects",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\ObjectLoader.js",
            "line": 407,
            "description": "Parse objects from json data,",
            "itemtype": "method",
            "name": "parseObjects",
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 30,
            "description": "Set cross origin path for the loader.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "TextureLoader"
            },
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 43,
            "description": "Set base path for texture loading.",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "Path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "TextureLoader"
            },
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 56,
            "description": "Set list of images to be used by this loader.",
            "itemtype": "method",
            "name": "setImages",
            "params": [
                {
                    "name": "images",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 68,
            "description": "Set list of videos to be used by this loader.",
            "itemtype": "method",
            "name": "setVideos",
            "params": [
                {
                    "name": "videos",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 80,
            "description": "Set list of fonts to be used by this loader.",
            "itemtype": "method",
            "name": "setFonts",
            "params": [
                {
                    "name": "fonts",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 92,
            "description": "Load texture from URL.\n\nDoes the same as creating a new Texture object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 128,
            "description": "Load texture object from JSON.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\TextureLoader.js",
            "line": 148,
            "description": "Parse a texture object JSON description.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\VideoLoader.js",
            "line": 17,
            "description": "Load video resource from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "VideoLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\loaders\\VideoLoader.js",
            "line": 37,
            "description": "Parse material JSON.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "material",
                "type": "Material"
            },
            "class": "VideoLoader",
            "module": "Loaders"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 20,
            "description": "AudioListener used by this emmiter.\n\nEvery AudioEmitter has a different WebAudio AudioListener.",
            "itemtype": "property",
            "name": "listener",
            "type": "{AudioListener}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 32,
            "description": "WebAudio gain node, used to control the volume.\n\nhttps:// developer.mozilla.org/en-US/docs/Web/API/GainNode",
            "itemtype": "property",
            "name": "gain",
            "type": "{GainNode}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 47,
            "description": "Audio source type, can have the following values:\n - empty\n - buffer\n - audioNode",
            "itemtype": "property",
            "name": "sourceType",
            "type": "{string}",
            "default": "{\"empty\"}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 59,
            "description": "Audio source resource.",
            "itemtype": "property",
            "name": "audio",
            "type": "{Audio}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 67,
            "description": "If true the playback starts automatically.",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 76,
            "description": "Audio volume.",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 85,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 94,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 103,
            "description": "If true the audio plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 112,
            "description": "Modify pitch, measured in cents. +/- 100 is a semitone. +/- 1200 is an octave.",
            "itemtype": "property",
            "name": "detune",
            "type": "{number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 128,
            "description": "Possible source types for the audio emitter.",
            "static": 1,
            "itemtype": "attribute",
            "name": "SOURCE",
            "type": "{Object}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 141,
            "description": "Method called when the audio playback stopped.",
            "itemtype": "method",
            "name": "onEnded",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 151,
            "description": "Connect the audio source.\n\nUsed internally on initialisation and when setting / removing",
            "itemtype": "method",
            "name": "connect",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 180,
            "description": "Disconnect the audio source.\n\nUsed internally when setting / removing filters.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 208,
            "description": "Initialize audio object, loads audio data decodes it and starts playback ifautoplay is set to True.",
            "itemtype": "method",
            "name": "initialize",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 235,
            "description": "Set audio buffer to be used by this emitter.",
            "itemtype": "method",
            "name": "setBuffer",
            "params": [
                {
                    "name": "audioBuffer",
                    "description": "Audio buffer to be used.",
                    "type": "AudioBuffer"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 255,
            "description": "Play audio.",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 288,
            "description": "Pauses audio playback.",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 303,
            "description": "Stops audio playback and resets time to 0.",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 318,
            "description": "Change audio resource.\n\nIf changed after initialization the audio buffer will be disconnected and reintialized.",
            "itemtype": "method",
            "name": "setAudio",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio resource.",
                    "type": "Audio"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 347,
            "description": "Get audio emitter volume.",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "getVolume",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 358,
            "description": "Set audio emitter volume.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 373,
            "description": "Set loop mode. If loop set to True the audio repeats after ending.",
            "itemtype": "method",
            "name": "setLoop",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 392,
            "description": "Set detune value.",
            "itemtype": "method",
            "name": "setDetune",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 411,
            "description": "Get loop mode.",
            "itemtype": "method",
            "name": "getLoop",
            "return": {
                "description": "Loop mode.",
                "type": "Boolean"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 422,
            "description": "Set playback speed.",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 441,
            "description": "Get the playback speed.",
            "itemtype": "method",
            "name": "getPlaybackRate",
            "return": {
                "description": "Playback speed.",
                "type": "Number"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 452,
            "description": "Get Array with all the filters applied to this audio emitter.",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "Filters in this audio emitter.",
                "type": "Array"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 463,
            "description": "Set the entire filters array.",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 491,
            "description": "Get a filter to the filters array.",
            "itemtype": "method",
            "name": "getFilter",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the filter.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Filter."
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 503,
            "description": "Set a filter to the filters array.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 514,
            "description": "Change the source audio node.",
            "itemtype": "method",
            "name": "setNodeSource",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 532,
            "description": "Get output audio node.",
            "itemtype": "method",
            "name": "getOutput",
            "return": {
                "description": "Output audio node.",
                "type": "Object"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 543,
            "description": "Dispose audio object, stops the playback and disconnects audio node.",
            "itemtype": "method",
            "name": "dispose",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 24,
            "description": "Distance model to be applied to the audio panner.",
            "itemtype": "property",
            "name": "distanceModel",
            "type": "{string}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 32,
            "description": "Model to be applied to the audio panner.",
            "itemtype": "property",
            "name": "panningModel",
            "type": "{string}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 40,
            "description": "WebAudio panner effect.\n\nhttps:// developer.mozilla.org/en-US/docs/Web/API/PannerNode",
            "itemtype": "property",
            "name": "panner",
            "type": "{PannerNode}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 59,
            "description": "Runtime pointer to the scene to get the camera list.",
            "itemtype": "attribute",
            "name": "scene",
            "type": "{Scene}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 74,
            "description": "Initialize audio object, loads audio data decodes it and starts playback if autoplay is set to True.",
            "itemtype": "method",
            "name": "initialize",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 96,
            "description": "Update positional audio panner relative to the camera.",
            "itemtype": "method",
            "name": "update",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 126,
            "description": "Get output audio node.",
            "itemtype": "method",
            "name": "getOutput",
            "return": {
                "description": "Output audio node.",
                "type": "Object"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 137,
            "description": "Get reference distance.",
            "itemtype": "method",
            "name": "getRefDistance",
            "return": {
                "description": "Reference distance.",
                "type": "Number"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 148,
            "description": "Set reference distance.",
            "itemtype": "method",
            "name": "setRefDistance",
            "params": [
                {
                    "name": "value",
                    "description": "Reference distance.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 159,
            "description": "Get rolloff factor.",
            "itemtype": "method",
            "name": "getRolloffFactor",
            "return": {
                "description": "Rolloff factor.",
                "type": "Number"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 170,
            "description": "Set rolloff factor.",
            "itemtype": "method",
            "name": "setRolloffFactor",
            "params": [
                {
                    "name": "value",
                    "description": "Rolloff factor.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 182,
            "description": "Get distance model in use by this audio emitter.",
            "itemtype": "method",
            "name": "getDistanceModel",
            "return": {
                "description": "Distance model.",
                "type": "String"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 193,
            "description": "Set distance model to be used.\n\nDistance model defined how the emitter controls its volume from its position in the world, relative to the camera.\n\nBy default the mode used is \"inverse\", can be also set to:\n - \"linear\": A linear distance model calculating the gain induced by the distance according to\n   - 1 - rolloffFactor * (distance - refDistance) / (maxDistance - refDistance)\n - \"inverse\": An inverse distance model calculating the gain induced by the distance according to:\n   - refDistance / (refDistance + rolloffFactor * (distance - refDistance))\n - \"exponential\": An exponential distance model calculating the gain induced by the distance according to:\n   - pow(distance / refDistance, -rolloffFactor).",
            "itemtype": "method",
            "name": "setDistanceModel",
            "params": [
                {
                    "name": "model",
                    "description": "Distance Model to be used.",
                    "type": "String"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 214,
            "description": "Get maximum distance for this audio emitter.",
            "itemtype": "method",
            "name": "getMaxDistance",
            "return": {
                "description": "Maximum distance."
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 225,
            "description": "Set maximum distance for this audio emitter.",
            "itemtype": "method",
            "name": "setMaxDistance",
            "params": [
                {
                    "name": "value",
                    "description": "Maximum distance.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 22,
            "description": "CubeCamera near plane.",
            "itemtype": "property",
            "name": "near",
            "type": "{number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 30,
            "description": "CubeCamera far plane.",
            "itemtype": "property",
            "name": "far",
            "type": "{number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 38,
            "description": "Resolution of each face. Should be a power of 2 (32, 64, 128, ...).",
            "itemtype": "property",
            "name": "resolution",
            "type": "{number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 46,
            "description": "Auto update indicates if the cube camera is updated automatically each frame.",
            "itemtype": "property",
            "name": "autoUpdate",
            "type": "{boolean}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 54,
            "description": "Array of 6 cameras used to render each face of the cube.",
            "itemtype": "property",
            "name": "cameras",
            "type": "{Array}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 81,
            "description": "WebGL cube render target to where the scene is rendered.",
            "itemtype": "property",
            "name": "target",
            "type": "{WebGLCubeRenderTarget}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 99,
            "description": "CubeTexture generated by this CubeCamera.\n\nCan be attached to materials as envMap.",
            "itemtype": "property",
            "name": "cube",
            "type": "{CubeTexture}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 120,
            "description": "Initialize CubeCamera object.\n\nGets the attached scene and the renderer in use.",
            "itemtype": "method",
            "name": "initialize",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 147,
            "description": "Update CubeCamera object.\n\nIf autoUpdate is set to true the CubeCamera updates the CubeTexture automatically.",
            "itemtype": "method",
            "name": "update",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 165,
            "description": "Set the CubeCamera resolution.",
            "itemtype": "method",
            "name": "setResolution",
            "params": [
                {
                    "name": "resolution",
                    "description": "CubeCamera resolution (per face). Should be a 2 pot.",
                    "type": "Number"
                }
            ],
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 177,
            "description": "Clear cube camera render target.",
            "itemtype": "method",
            "name": "clear",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\CubeCamera.js",
            "line": 195,
            "description": "Render new cube faces. \n\nShould be called every time a change in the scene is made.",
            "itemtype": "method",
            "name": "updateCubeMap",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer to be used.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be renderer.",
                    "type": "Scene"
                }
            ],
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 27,
            "description": "Camera size relative to resize mode.",
            "itemtype": "property",
            "name": "size",
            "default": "10.0",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 36,
            "description": "Aspect ratio X/Y.",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 45,
            "description": "Camera resize mode.",
            "itemtype": "property",
            "name": "mode",
            "default": "RESIZE_HORIZONTAL",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 54,
            "description": "Camera viewport indicates where the image is drawn on the screen.",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Viewport}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 62,
            "description": "Clear screen color flag.",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 71,
            "description": "Clear depth flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 80,
            "description": "Clear stencil buffer flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 89,
            "description": "Camera draw order preference.\n\nIf more than one camera has the same order value the draw order is undefined for those cameras.",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 102,
            "description": "Effect composed of this camera. Is used to render the scene to the screen and apply effects.\n\nIt is inialized with a RenderPass attached to it.",
            "itemtype": "property",
            "name": "composer",
            "type": "{EffectComposer}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 119,
            "description": "Used to set camera to resize horizontally",
            "itemtype": "attribute",
            "name": "RESIZE_HORIZONTAL",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 127,
            "description": "Used to set camera to resize vertically.",
            "itemtype": "attribute",
            "name": "RESIZE_VERTICAL",
            "type": "{number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 135,
            "description": "Resize this camera, should be called every time after resizing the screen.\n\nUpdates the viewport, rendering composer and the camera projection matrix.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width of the screen.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height of the screen.",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "Viewport that encapsulates the viewport of the camera.",
                    "type": "Viewport"
                }
            ],
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 157,
            "description": "Prepare the renderer to render the frame using the camera settings.\n\nShould be called before the render() method to setup clear configuration and viewport.",
            "itemtype": "method",
            "name": "setupRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to configure.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 171,
            "description": "Render a scene using this camera and the internal EffectComposer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be rendered.",
                    "type": "Scene"
                }
            ],
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 183,
            "description": "Destroy camera object and remove it from the scene.",
            "itemtype": "method",
            "name": "destroy",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 199,
            "description": "Update camera projection matrix.\n\nAlso updates left right, top and bottom values from aspect and size.\n\nShould be called after chaging projection parameters.",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 20,
            "description": "Camera field of view in degrees.",
            "itemtype": "property",
            "name": "fov",
            "default": "50",
            "type": "{number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 27,
            "description": "Camera aspect ratio X/Y.",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 34,
            "description": "Camera zoom.",
            "itemtype": "property",
            "name": "zoom",
            "default": "1.0",
            "type": "{number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 43,
            "description": "Camera viewport indicates where the image is drawn on the screen.",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Viewport}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 55,
            "description": "Clear screen color flag.",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 64,
            "description": "Clear depth flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 73,
            "description": "Clear stencil buffer flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 82,
            "description": "Camera draw order preference.\n\nIf more than one camera has the same order value the draw order is undefined for those cameras.",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 93,
            "description": "Effect composed of this camera. Is used to render the scene to the screen and apply effects.\n\nIt is inialized with a RenderPass attached to it.",
            "itemtype": "property",
            "name": "composer",
            "type": "{EffectComposer}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 110,
            "description": "Resize this camera, should be called every time after resizing the screen.\n\nUpdates the viewport, rendering composer and the camera projection matrix.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width of the screen.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height of the screen.",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "Viewport that encapsulates the viewport of the camera.",
                    "type": "Viewport"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 132,
            "description": "Prepare the renderer to render the frame using the camera settings.\n\nShould be called before the render() method to setup clear configuration and viewport.",
            "itemtype": "method",
            "name": "setupRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to configure.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 146,
            "description": "Render a scene using this camera and the internal EffectComposer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be rendered.",
                    "type": "Scene"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 158,
            "description": "Destroy camera object and remove it from the scene.",
            "itemtype": "method",
            "name": "destroy",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 174,
            "description": "Update camera projection matrix.\n\nShould be called after chaging projection parameters.",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 14,
            "description": "Camera viewport offset.\n\nValues range from 0.0 to 1.0 in screen space when in RELATIVE mode.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 24,
            "description": "Camera viewport size.\n\nValues range from 0.0 to 1.0 in screen space when in RELATIVE mode.",
            "itemtype": "property",
            "name": "size",
            "type": "{Vector2}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 34,
            "description": "Viewport sizing mode.\n\nCan be RELATIVE or ABSOLUTE.",
            "itemtype": "property",
            "name": "mode",
            "type": "{number}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 44,
            "description": "Positioning anchor of the viewport.",
            "itemtype": "property",
            "name": "anchor",
            "type": "{number}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 52,
            "description": "Width of the final output canvas.\n\nThis width should match the canvas size / rendering resolution.",
            "itemtype": "property",
            "name": "width",
            "type": "{number}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 62,
            "description": "Height of the final output canvas.\n\nThis height should match the canvas size / rendering resolution.",
            "itemtype": "property",
            "name": "height",
            "type": "{number}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 72,
            "description": "Calculated absolute viewport values (x, y, width, height) stored in a vector.\n\nIt is calculated using the update() method that should be called after applying changes.",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector4}",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 83,
            "description": "Viewport calculated relatively to the screen viewport.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RELATIVE",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 91,
            "description": "Viewport defined absolutely in pixels.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ABSOLUTE",
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 104,
            "description": "Update the viewport box from the values.\n\nHas to be called after applying changes to the viewport, the viewport is resized of the",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "container",
                    "description": "Viewport that contains this viewport (optional).",
                    "type": "Viewport"
                }
            ],
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 163,
            "description": "Get the aspect ratio of this viewport in x / y.",
            "itemtype": "method",
            "name": "getAspectRatio",
            "return": {
                "description": "The aspect ratio of the viewport.",
                "type": "Number"
            },
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 174,
            "description": "Check if the mouse is inside this viewport.",
            "itemtype": "method",
            "name": "isInside",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas for offset calculation.",
                    "type": "Component"
                },
                {
                    "name": "mouse",
                    "description": "Mouse object with coordinates inside of the canvas.",
                    "type": "Mouse"
                }
            ],
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 189,
            "description": "Get normalized coordinates between [-1, 1] for a canvas size and mouse position.\n\nUsefull to use raycasting for object picking in a viewport.",
            "itemtype": "method",
            "name": "getNormalized",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas for offset calculation.",
                    "type": "Component"
                },
                {
                    "name": "mouse",
                    "description": "Mouse object with coordinates inside of the canvas.",
                    "type": "Mouse"
                }
            ],
            "return": {
                "description": "Normalized coordinated of the mouse.",
                "type": "Vector2"
            },
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 214,
            "description": "Enable this viewport for rendering using a WebGLRenderer\n\nAfter rendering the WebGL renderer has to manually reset to the original values.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 228,
            "description": "Serializer viewport data to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "Serialized viewport object.",
                "type": "Object"
            },
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\cameras\\Viewport.js",
            "line": 244,
            "description": "Fill viewport data from serialized JSON data.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "data",
                    "description": "Serialized viewport object.",
                    "type": "Object"
                }
            ],
            "class": "Viewport",
            "module": "Cameras"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 24,
            "description": "Mouse sensitivity.",
            "itemtype": "property",
            "name": "sensitivity",
            "type": "{number}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 32,
            "description": "Flag to indicate if the button left button needs to be pressed to rotate the object.",
            "itemtype": "property",
            "name": "needsButtonPressed",
            "default": "true",
            "type": "{boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 41,
            "description": "Indicates if its possible to move the object using the Keyboard keys.",
            "itemtype": "property",
            "name": "movementEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 50,
            "description": "Movement speed, relative to the world.",
            "itemtype": "property",
            "name": "moveSpeed",
            "default": "moveSpeed",
            "type": "{number}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 59,
            "description": "If set to true the object will only move on X and Z axis.",
            "itemtype": "property",
            "name": "moveOnPlane",
            "default": "false",
            "type": "{boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 68,
            "description": "Array with keys to be used to move the object.\n - Forward\n - Backward\n - Left\n - Right",
            "itemtype": "property",
            "name": "moveKeys",
            "type": "{Array}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 80,
            "description": "Orientation of the camera.\n\nX is the horizontal orientation and Y the vertical orientation.",
            "itemtype": "property",
            "name": "vector",
            "type": "{Vector2}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 181,
            "description": "Update controls position and rotation.\n\nShould be called if some of its properties are changed manually.",
            "itemtype": "method",
            "name": "updateControls",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 199,
            "description": "Used to get camera direction for this controller.\n\nController direction can be used to simplify controlling physics objects, create objects in the camera direction, etc.",
            "itemtype": "method",
            "name": "getDirection",
            "return": {
                "description": "Normalized camera direction.",
                "type": "Vector3"
            },
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 21,
            "description": "Initial distance of the object relative to the center.",
            "itemtype": "property",
            "name": "distance",
            "default": "3",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 30,
            "description": "Maximum Distance allowed.",
            "itemtype": "property",
            "name": "maxDistance",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 38,
            "description": "Minimum distance allowed.",
            "itemtype": "property",
            "name": "minDistance",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 46,
            "description": "Mouse sensitivity.",
            "itemtype": "property",
            "name": "sensitivity",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 54,
            "description": "Mouse scroll sensitivity.",
            "itemtype": "property",
            "name": "zoomSensitivity",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 62,
            "description": "Top limit angle.",
            "itemtype": "property",
            "name": "limitUp",
            "default": "1.57",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 71,
            "description": "Bottom limit angle.",
            "itemtype": "property",
            "name": "limitDown",
            "default": "-1.57",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 80,
            "description": "Indicates if the button left button needs to be pressed to rotate the object.",
            "itemtype": "property",
            "name": "needsButtonPressed",
            "default": "true",
            "type": "{boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 89,
            "description": "Indicates if its possible to zoom in and out to the center point.",
            "itemtype": "property",
            "name": "zoomEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 98,
            "description": "Indicates if its possible to move the object around.",
            "itemtype": "property",
            "name": "movementEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 107,
            "description": "Central point of the orbit.",
            "itemtype": "property",
            "name": "center",
            "type": "{Vector3}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 115,
            "description": "Orientation of the camera.\n\nX is the horizontal orientation and Y the vertical orientation.",
            "itemtype": "property",
            "name": "vector",
            "type": "{Vector2}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 125,
            "description": "Enables smooth orbit movement.",
            "itemtype": "property",
            "name": "smooth",
            "type": "{boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 133,
            "description": "Orbit speed friction, higher value allow the orbit to retain more speed.\n\nOnly used when smooth is set true.",
            "itemtype": "property",
            "name": "friction",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 143,
            "description": "Obit movement speed.\n\nOnly used when smooth is set true.",
            "itemtype": "property",
            "name": "friction",
            "type": "{number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 153,
            "description": "If set true the Y orientation movement is inverted.",
            "itemtype": "property",
            "name": "invertNavigation",
            "type": "{boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\controls\\OrbitControls.js",
            "line": 303,
            "description": "Update controls position and rotation.\n\nShould be called if some of its properties are changed manually.",
            "itemtype": "method",
            "name": "updateControls",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 30,
            "description": "Update light shadow map attributes at runtime.",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "DirectionalLight",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\lights\\LightProbe.js",
            "line": 23,
            "description": "Generate light probe data from cube camera render.",
            "itemtype": "method",
            "name": "generate",
            "class": "LightProbe",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\lights\\PointLight.js",
            "line": 32,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "PointLight",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\lights\\SpotLight.js",
            "line": 36,
            "description": "SpotLight looks to the target object coordinates.\n\nThe target object should always be at the scene root.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "Target object.",
                    "type": "Object3D"
                }
            ],
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\lights\\SpotLight.js",
            "line": 49,
            "description": "Update light shadow map atributtes at runtime.",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\mesh\\InstancedMesh.js",
            "line": 26,
            "description": "The number of instances. The count value represents the maximum number of instances of this mesh.\n\nYou can change the number of instances at runtime to an integer value in the range [0, count].",
            "itemtype": "attribute",
            "name": "url",
            "type": "{string}",
            "class": "InstancedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\Mesh.js",
            "line": 26,
            "description": "Dispose mesh along with its material and geometry.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\Mesh.js",
            "line": 45,
            "description": "Geometry defines the object structure.",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\Mesh.js",
            "line": 52,
            "description": "Material is used to define how the geometry surface is shaded.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\Mesh.js",
            "line": 59,
            "description": "Determines how the mesh triangles are constructed from the vertices.\n\nOnly works when the geometry is a BufferGeometry.",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 30,
            "description": "Dispose mesh along with its material and geometry.",
            "itemtype": "method",
            "name": "dispose",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 79,
            "description": "Geometry defined the object structure.",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 86,
            "description": "Material is used to define how the geometry surface is shaded.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 93,
            "description": "Bind a skeleton to this SkinnedMesh. The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.\n\nThis is called automatically in the constructor, and the skeleton is created from the bones of the Geometry passed in the constructor.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "skeleton",
                    "description": "",
                    "type": "Skeleton"
                },
                {
                    "name": "bindMatrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 103,
            "description": "Determines how the mesh triangles are constructed from the vertices.\n\nOnly works when the geometry is a BufferGeometry.",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\misc\\HTMLView.js",
            "line": 27,
            "description": "URL of the webpage to open in the view.",
            "itemtype": "attribute",
            "name": "url",
            "type": "{string}",
            "class": "HTMLView",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\misc\\HTMLView.js",
            "line": 43,
            "description": "Width in pixels of the web view port.",
            "itemtype": "attribute",
            "name": "size",
            "type": "{number}",
            "class": "HTMLView",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\misc\\HTMLView.js",
            "line": 59,
            "description": "Height in pixels of the web view port.",
            "itemtype": "attribute",
            "name": "height",
            "type": "{number}",
            "class": "HTMLView",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\misc\\HTMLView.js",
            "line": 84,
            "description": "Process URL to transform it into embedded URL when possible for common services.",
            "itemtype": "method",
            "name": "processURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HTMLView",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\misc\\LensFlare.js",
            "line": 233,
            "description": "Add texture to the lensFlare object.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "texture",
                    "description": "Texture to be used forthe new layer.",
                    "type": "Texture"
                },
                {
                    "name": "size",
                    "description": "Size in pixels (-1 = use texture.width)",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Distance (0-1) from light source (0=at light source)",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "Texture color",
                    "type": "Color"
                }
            ],
            "class": "LensFlare",
            "module": "Misc"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 30,
            "description": "Array with top sky colors.",
            "itemtype": "property",
            "name": "colorTop",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 38,
            "description": "Array with bottom sky colors.",
            "itemtype": "property",
            "name": "colorBottom",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 46,
            "description": "Sun color in hex RGB.",
            "itemtype": "property",
            "name": "sunColor",
            "type": "{number}",
            "default": "0xFFFFAA",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 55,
            "description": "Sun color intensity.",
            "itemtype": "property",
            "name": "intensity",
            "type": "{number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 63,
            "description": "Moon color in hex RGB.",
            "itemtype": "property",
            "name": "moonColor",
            "type": "{number}",
            "default": "0x5555BB",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 72,
            "description": "Hemisphere light used to match ambient ligth with sky color.",
            "itemtype": "property",
            "name": "hemisphere",
            "type": "{HemisphereLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 83,
            "description": "Directional light to simulate sun light and cast shadows.",
            "itemtype": "property",
            "name": "sun",
            "type": "{DirectionalLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 115,
            "description": "Sky mesh with material shader to calculate dinamically sky color.",
            "itemtype": "property",
            "name": "sky",
            "type": "{Mesh}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 132,
            "description": "If set to true the sky auto updates its time.",
            "itemtype": "property",
            "name": "autoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 141,
            "description": "Sun distance.",
            "itemtype": "property",
            "name": "sunDistance",
            "type": "{number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 149,
            "description": "Day time in seconds.",
            "itemtype": "property",
            "name": "dayTime",
            "type": "{number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 157,
            "description": "Current day time in seconds.",
            "itemtype": "property",
            "name": "time",
            "type": "{number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 177,
            "description": "Update sky state, updates the time value and the gradient uniform values.",
            "itemtype": "method",
            "name": "update",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\misc\\Sky.js",
            "line": 199,
            "description": "Update sky color and sun position.\n\nIf autoUpdate set to true is automatically called by the update method.",
            "itemtype": "method",
            "name": "updateSky",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 741,
            "description": "Simulates one frame worth of particles, updating particles that are already alive, and marking ones that are currently dead but should be alive as alive.\n\nIf the emitter is marked as static, then this function will do nothing.",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds to simulate (deltaTime)",
                    "type": "Number"
                }
            ],
            "class": "ParticleEmitterControl",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 808,
            "description": "Resets all the emitter\"s particles to their start positions and marks the particles as dead if the force argument is true.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "force",
                    "description": "If true, all particles will be marked as dead instantly.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "This emitter instance.",
                "type": "ParticleEmitterControl"
            },
            "class": "ParticleEmitterControl",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 843,
            "description": "Enables the emitter. If not already enabled, the emitter will start emitting particles.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "This emitter instance.",
                "type": "ParticleEmitterControl"
            },
            "class": "ParticleEmitterControl",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 855,
            "description": "Disables th emitter, but does not instantly remove it's particles fromt the scene. When called, the emitter will be \"switched off\" and just stop emitting.\n\nAny particle\"s alive will be allowed to finish their lifecycle.",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "This emitter instance.",
                "type": "ParticleEmitterControl"
            },
            "class": "ParticleEmitterControl",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleEmitterControl.js",
            "line": 869,
            "description": "Remove this emitter from it's parent group (if it has been added to one).\n\nDelgates to group.prototype.removeEmitter().\n\nWhen called, all particle\"s belonging to this emitter will be instantly removed from the scene.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "This emitter instance.",
                "type": "ParticleEmitterControl"
            },
            "class": "ParticleEmitterControl",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 85,
            "description": "Map of uniforms to be applied to the ShaderMaterial instance.",
            "itemtype": "attribute",
            "name": "uniforms",
            "type": "{Object}",
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 147,
            "description": "Map of all attributes to be applied to the particles.\n\nSee ShaderAttribute for a bit more info on this bit.",
            "itemtype": "attribute",
            "name": "attributes",
            "type": "{Object}",
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 271,
            "description": "Adds an ParticleEmitterControl instance to this group, creating particle values and assigning them to this group\"s shader attributes.",
            "itemtype": "method",
            "name": "addEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "The emitter to add to this group.",
                    "type": "ParticleEmitterControl"
                }
            ],
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 371,
            "description": "Removes an ParticleEmitterControl instance from this group.\n\nWhen called, all particle\"s belonging to the given emitter will be instantly removed from the scene.",
            "itemtype": "method",
            "name": "removeEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "The emitter to add to this group.",
                    "type": "ParticleEmitterControl"
                }
            ],
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 433,
            "description": "Fetch a single emitter instance from the pool.\n\nIf there are no objects in the pool, a new emitter will becreated if specified.",
            "itemtype": "method",
            "name": "getFromPool",
            "return": {
                "description": "",
                "type": "ParticleEmitterControl|null"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 462,
            "description": "Release an emitter into the pool.",
            "itemtype": "method",
            "name": "releaseIntoPool",
            "params": [
                {
                    "name": "emitter",
                    "description": "",
                    "type": "ShaderParticleParticleEmitterControl"
                }
            ],
            "return": {
                "description": "This group instance.",
                "type": "ParticleGroup"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 483,
            "description": "Get the pool array",
            "itemtype": "method",
            "name": "getPool",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 494,
            "description": "Add a pool of emitters to this particle group",
            "itemtype": "method",
            "name": "addPool",
            "params": [
                {
                    "name": "numEmitters",
                    "description": "The number of emitters to add to the pool.",
                    "type": "Number"
                },
                {
                    "name": "emitterOptions",
                    "description": "An object, or array of objects, describing the options to pass to each emitter.",
                    "type": "ParticleEmitterControlOptions|Array"
                },
                {
                    "name": "createNew",
                    "description": "Should a new emitter be created if the pool runs out?",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "This group instance.",
                "type": "ParticleGroup"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 557,
            "description": "Set a given number of emitters as alive, with an optional position vector3 to move them to.",
            "itemtype": "method",
            "name": "triggerEmitter",
            "params": [
                {
                    "name": "numEmitters",
                    "description": "The number of emitters to activate",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "A Vector3 instance describing the position to activate the emitter(s) at.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "This group instance.",
                "type": "ParticleGroup"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 619,
            "description": "Simulate all the emitter\"s belonging to this group, updating attribute values along the way.",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "The number of seconds to simulate the group\"s emitters for(deltaTime)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "ParticleGroup\"s fixedTimeStep value"
                }
            ],
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ParticleGroup.js",
            "line": 682,
            "description": "Dipose the geometry and material for the group.",
            "itemtype": "method",
            "name": "dispose",
            "return": {
                "description": "ParticleGroup instance.",
                "type": "ParticleGroup"
            },
            "class": "ParticleGroup",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 12,
            "description": "A map of types used by ShaderUtils.ensureTypedArg and ShaderUtils.ensureArrayTypedArg to compare types against.",
            "static": 1,
            "itemtype": "attribute",
            "name": "types",
            "type": "{Object}",
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 27,
            "description": "Given a value, a type, and a default value to fallback to, ensure the given argument adheres to the type requesting, returning the default value if type check is false.",
            "itemtype": "method",
            "name": "ensureTypedArg",
            "params": [
                {
                    "name": "arg",
                    "description": "The value to perform a type-check on.",
                    "type": "(boolean|string|number|object)"
                },
                {
                    "name": "type",
                    "description": "The type the arg argument should adhere to.",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "A default value to fallback on if the type check fails.",
                    "type": "(boolean|string|number|object)"
                }
            ],
            "return": {
                "description": "The given value if type check passes, or the default value if it fails.",
                "type": "(boolean|string|number|object)"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 48,
            "description": "Given an array of values, a type, and a default value, ensure the given array\"s contents ALL adhere to the provided type, returning the default value if type check fails.\n\nIf the given value to check isn't an Array, delegates to ShaderUtils.ensureTypedArg.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ensureArrayTypedArg",
            "params": [
                {
                    "name": "arg",
                    "description": "The array of values to check type of.",
                    "type": "Array|boolean|string|number|object"
                },
                {
                    "name": "type",
                    "description": "The type that should be adhered to.",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "A default fallback value.",
                    "type": "(boolean|string|number|object)"
                }
            ],
            "return": {
                "description": "The given value if type check passes, or the default value if it fails.",
                "type": "(boolean|string|number|object)"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 80,
            "description": "Ensures the given value is an instance of a constructor function.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ensureInstanceOf",
            "params": [
                {
                    "name": "Object}",
                    "description": "arg The value to check instance of."
                },
                {
                    "name": "instance",
                    "description": "The constructor of the instance to check against.",
                    "type": "Function"
                },
                {
                    "name": "defaultValue",
                    "description": "A default fallback value if instance check fails",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The given value if type check passes, or the default value if it fails.",
                "type": "Object"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 102,
            "description": "Given an array of values, ensure the instances of all items in the array matches the given instance constructor falling back to a default value if the check fails.\n\nIf given value isn't an Array, delegates to ShaderUtils.ensureInstanceOf.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ensureArrayInstanceOf",
            "params": [
                {
                    "name": "arg",
                    "description": "The value to perform the instanceof check on.",
                    "type": "Array|Object"
                },
                {
                    "name": "instance",
                    "description": "The constructor of the instance to check against.",
                    "type": "Function"
                },
                {
                    "name": "defaultValue",
                    "description": "A default fallback value if instance check fails",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The given value if type check passes, or the default value if it fails.",
                "type": "Object"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 133,
            "description": "Ensures that any \"value-over-lifetime\" properties of an emitter are of the correct length (as dictated by valueOverLifetimeLength).\n\nDelegates to ShaderUtils.interpolateArray for array resizing.\n\nIf properties aren't arrays, then property values are put into one.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ensureValueOverLifetimeCompliance",
            "params": [
                {
                    "name": "property",
                    "description": "The property of an ParticleEmitterControl instance to check compliance of.",
                    "type": "Object"
                },
                {
                    "name": "minLength",
                    "description": "The minimum length of the array to create.",
                    "type": "Number"
                },
                {
                    "name": "maxLength",
                    "description": "The maximum length of the array to create.",
                    "type": "Number"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 177,
            "description": "Performs linear interpolation (lerp) on an array.\n\nFor example, lerping [1, 10], with a newLength of 10 will produce [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].\n\nDelegates to ShaderUtils.lerpTypeAgnostic to perform the actual interpolation.",
            "static": 1,
            "itemtype": "attribute",
            "name": "interpolateArray",
            "params": [
                {
                    "name": "srcArray",
                    "description": "The array to lerp.",
                    "type": "Array"
                },
                {
                    "name": "newLength",
                    "description": "The length the array should be interpolated to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated array.",
                "type": "Array"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 216,
            "description": "Clamp a number to between the given min and max values.",
            "static": 1,
            "itemtype": "attribute",
            "name": "clamp",
            "params": [
                {
                    "name": "value",
                    "description": "The number to clamp.",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The clamped number.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 231,
            "description": "If the given value is less than the epsilon value, then return a randomised epsilon value if specified, or just the epsilon value if not.\n\nWorks for negative numbers as well as positive.",
            "static": 1,
            "itemtype": "attribute",
            "name": "zeroToEpsilon",
            "params": [
                {
                    "name": "value",
                    "description": "The value to perform the operation on.",
                    "type": "Number"
                },
                {
                    "name": "randomise",
                    "description": "Whether the value should be randomised.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The result of the operation.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 257,
            "description": "Linearly interpolates two values of various types. The given values must be of the same type for the interpolation to work.",
            "static": 1,
            "itemtype": "attribute",
            "name": "lerpTypeAgnostic",
            "params": [
                {
                    "name": "start",
                    "description": "The start value of the lerp.",
                    "type": "(number|Object)"
                },
                {
                    "name": "end",
                    "description": "The end value of the lerp.",
                    "type": "(number|object)"
                },
                {
                    "name": "delta",
                    "description": "The delta posiiton of the lerp operation. Ideally between 0 and 1 (inclusive).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The result of the operation. Result will be undefined if the start and end arguments aren't a supported type, or if their types do not match.",
                "type": "(number|object|undefined)"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 314,
            "description": "Perform a linear interpolation operation on two numbers.",
            "static": 1,
            "itemtype": "attribute",
            "name": "lerp",
            "params": [
                {
                    "name": "start",
                    "description": "The start value.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The end value.",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "The position to interpolate to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The result of the lerp operation.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 329,
            "description": "Rounds a number to a nearest multiple.",
            "static": 1,
            "itemtype": "attribute",
            "name": "roundToNearestMultiple",
            "params": [
                {
                    "name": "n",
                    "description": "The number to round.",
                    "type": "Number"
                },
                {
                    "name": "multiple",
                    "description": "The multiple to round to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The result of the round operation.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 362,
            "description": "Check if all items in an array are equal. Uses strict equality.",
            "static": 1,
            "itemtype": "attribute",
            "name": "arrayValuesAreEqual",
            "params": [
                {
                    "name": "array",
                    "description": "The array of values to check equality of.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether the array\"s values are all equal or not.",
                "type": "Boolean"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 383,
            "description": "Given a start value and a spread value, create and return a random number.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomFloat",
            "params": [
                {
                    "name": "base",
                    "description": "The start value.",
                    "type": "Number"
                },
                {
                    "name": "spread",
                    "description": "The size of the random variance to apply.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A randomised number.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 397,
            "description": "Given an ShaderAttribute instance, and various other settings, assign values to the attribute\"s array in a vec3 format.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomVector3",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "Vector3 instance describing the start value.",
                    "type": "Object"
                },
                {
                    "name": "spread",
                    "description": "Vector3 instance describing the random variance to apply to the start value.",
                    "type": "Object"
                },
                {
                    "name": "spreadClamp",
                    "description": "Vector3 instance describing the multiples to clamp the randomness to.",
                    "type": "Object"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 424,
            "description": "Given an Shader attribute instance, and various other settings, assign Color values to the attribute.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomColor",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "Color instance describing the start color.",
                    "type": "Object"
                },
                {
                    "name": "spread",
                    "description": "Vector3 instance describing the random variance to apply to the start color.",
                    "type": "Object"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 449,
            "description": "Assigns a random color value, encoded as a hex value in decimal format, to a ShaderAttribute instance.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomColorAsHex",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "Color instance describing the start color.",
                    "type": "Object"
                },
                {
                    "name": "spread",
                    "description": "Vector3 instance describing the random variance to apply to the start color.",
                    "type": "Object"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 489,
            "description": "Assigns a random vector 3 value to an ShaderAttribute instance, projecting the given values onto a sphere.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomVector3OnSphere",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "Vector3 instance describing the origin of the transform.",
                    "type": "Object"
                },
                {
                    "name": "radius",
                    "description": "The radius of the sphere to project onto.",
                    "type": "Number"
                },
                {
                    "name": "radiusSpread",
                    "description": "The amount of randomness to apply to the projection result",
                    "type": "Number"
                },
                {
                    "name": "radiusScale",
                    "description": "Vector3 instance describing the scale of each axis of the sphere.",
                    "type": "Object"
                },
                {
                    "name": "radiusSpreadClamp",
                    "description": "What numeric multiple the projected value should be clamped to.",
                    "type": "Number"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 543,
            "description": "Assigns a random vector 3 value to an ShaderAttribute instance, projecting the given values onto a 2d-disc.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomVector3OnDisc",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "base",
                    "description": "Vector3 instance describing the origin of the transform.",
                    "type": "Object"
                },
                {
                    "name": "radius",
                    "description": "The radius of the sphere to project onto.",
                    "type": "Number"
                },
                {
                    "name": "radiusSpread",
                    "description": "The amount of randomness to apply to the projection result",
                    "type": "Number"
                },
                {
                    "name": "radiusScale",
                    "description": "Vector3 instance describing the scale of each axis of the disc. The z-component is ignored.",
                    "type": "Object"
                },
                {
                    "name": "radiusSpreadClamp",
                    "description": "What numeric multiple the projected value should be clamped to.",
                    "type": "Number"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 586,
            "description": "Given an ShaderAttribute instance, create a direction vector from the given\nposition, using speed as the magnitude. Values are saved to the attribute.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomDirectionVector3OnSphere",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "posX",
                    "description": "The particle\"s x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "posY",
                    "description": "The particle\"s y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "posZ",
                    "description": "The particle\"s z coordinate.",
                    "type": "Number"
                },
                {
                    "name": "emitterPosition",
                    "description": "Vector3 instance describing the emitter\"s base position.",
                    "type": "Object"
                },
                {
                    "name": "speed",
                    "description": "The magnitude to apply to the vector.",
                    "type": "Number"
                },
                {
                    "name": "speedSpread",
                    "description": "The amount of randomness to apply to the magnitude.",
                    "type": "Number"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 620,
            "description": "Given an ShaderAttribute instance, create a direction vector from the given position, using speed as the magnitude. Values are saved to the attribute.",
            "static": 1,
            "itemtype": "attribute",
            "name": "randomDirectionVector3OnDisc",
            "params": [
                {
                    "name": "attribute",
                    "description": "The instance of ShaderAttribute to save the result to.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The offset in the attribute\"s TypedArray to save the result from.",
                    "type": "Number"
                },
                {
                    "name": "posX",
                    "description": "The particle\"s x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "posY",
                    "description": "The particle\"s y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "posZ",
                    "description": "The particle\"s z coordinate.",
                    "type": "Number"
                },
                {
                    "name": "emitterPosition",
                    "description": "Vector3 instance describing the emitter\"s base position.",
                    "type": "Object"
                },
                {
                    "name": "speed",
                    "description": "The magnitude to apply to the vector.",
                    "type": "Number"
                },
                {
                    "name": "speedSpread",
                    "description": "The amount of randomness to apply to the magnitude.",
                    "type": "Number"
                }
            ],
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\core\\ShaderUtils.js",
            "line": 652,
            "description": "Given a rotation axis, and a rotation axis spread vector, calculate a randomised rotation axis, and pack it into a hexadecimal value represented in decimal form.",
            "static": 1,
            "itemtype": "attribute",
            "name": "getPackedRotationAxis",
            "params": [
                {
                    "name": "axis",
                    "description": "Vector3 instance describing the rotation axis.",
                    "type": "Object"
                },
                {
                    "name": "axisSpread",
                    "description": "Vector3 instance describing the amount of randomness to apply to the rotation axis.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The packed rotation axis, with randomness.",
                "type": "Number"
            },
            "class": "ShaderUtils",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 29,
            "description": "A map of uniform types to their component size.",
            "static": 1,
            "itemtype": "attribute",
            "name": "typeSizeMap",
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 46,
            "description": "Calculate the minimum and maximum update range for this buffer attribute using component size independant min and max values.",
            "itemtype": "method",
            "name": "setUpdateRange",
            "params": [
                {
                    "name": "min",
                    "description": "The start of the range to mark as needing an update.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The end of the range to mark as needing an update.",
                    "type": "Number"
                }
            ],
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 59,
            "description": "Calculate the number of indices that this attribute should mark as needing updating. Also marks the attribute as needing an update.",
            "itemtype": "method",
            "name": "flagUpdate",
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 73,
            "description": "Reset the index update counts for this attribute",
            "itemtype": "method",
            "name": "resetUpdateRange",
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 89,
            "description": "Perform a splice operation on this attribute\"s buffer.",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "start",
                    "description": "The start index of the splice. Will be multiplied by the number of components for this attribute.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The end index of the splice. Will be multiplied by the number of components for this attribute.",
                    "type": "Number"
                }
            ],
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 113,
            "description": "Make sure this attribute has a typed array associated with it.\n\nIf it does, then it will ensure the typed array is of the correct size.\n\nIf not, a new TypedArrayHelper instance will be created.",
            "itemtype": "method",
            "name": "_ensureTypedArray",
            "params": [
                {
                    "name": "size",
                    "description": "The size of the typed array to create or update to.",
                    "type": "Number"
                }
            ],
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 145,
            "description": "Creates a BufferAttribute instance if one doesn't exist already.\n\nEnsures a typed array is present by calling _ensureTypedArray() first.\n\nIf a buffer attribute exists already, then it will be marked as needing an update.",
            "itemtype": "method",
            "name": "_createBufferAttribute",
            "params": [
                {
                    "name": "size",
                    "description": "The size of the typed array to create if one doesn't exist, or resize existing array to.",
                    "type": "Number"
                }
            ],
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\ShaderAttribute.js",
            "line": 173,
            "description": "Returns the length of the typed array associated with this attribute.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "The length of the typed array. Will be 0 if no typed array has been created yet.",
                "type": "Number"
            },
            "class": "ShaderAttribute",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 25,
            "description": "Sets the size of the internal array.\n\nDelegates to this.shrink or this.grow depending on size argument's relation to the current size of the internal array.\n\nNote that if the array is to be shrunk, data will be lost.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "The new size of the array.",
                    "type": "Number"
                }
            ],
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 54,
            "description": "Shrinks the internal array.",
            "itemtype": "method",
            "name": "shrink",
            "params": [
                {
                    "name": "size",
                    "description": "The new size of the typed array. Must be smaller than this.array.length.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 68,
            "description": "Grows the internal array.",
            "itemtype": "method",
            "name": "grow",
            "params": [
                {
                    "name": "size",
                    "description": "The new size of the typed array. Must be larger than this.array.length.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 88,
            "description": "Perform a splice operation on this arrays buffer.",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "start",
                    "description": "The start index of the splice. Will be multiplied by the number of components for this attribute.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The end index of the splice. Will be multiplied by the number of components for this attribute.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The TypedArrayHelper instance.",
                "type": "Object"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 119,
            "description": "Copies from the given TypedArray into this one, using the index argument as the start position.\n\nAlias for TypedArray.set. Will automatically resize if the given source array is of a larger size than the internal array.",
            "itemtype": "method",
            "name": "setFromArray",
            "params": [
                {
                    "name": "index",
                    "description": "The start position from which to copy into this array.",
                    "type": "Number"
                },
                {
                    "name": "array",
                    "description": "The array from which to copy; the source array.",
                    "type": "TypedArray"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 148,
            "description": "Set a Vector2 value at index.",
            "itemtype": "method",
            "name": "setVec2",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec2 values from.",
                    "type": "Number"
                },
                {
                    "name": "vec2",
                    "description": "Any object that has x and y properties.",
                    "type": "Vector2"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 161,
            "description": "Set a Vector2 value using raw components.",
            "itemtype": "method",
            "name": "setVec2Components",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec2 values from.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "The Vec2\"s x component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Vec2\"s y component.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 180,
            "description": "Set a Vector3 value at index.",
            "itemtype": "method",
            "name": "setVec3",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec3 values from.",
                    "type": "Number"
                },
                {
                    "name": "vec2",
                    "description": "Any object that has x, y, and z properties.",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 193,
            "description": "Set a Vector3 value using raw components.",
            "itemtype": "method",
            "name": "setVec3Components",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec3 values from.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "The Vec3\"s x component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Vec3\"s y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Vec3\"s z component.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 214,
            "description": "Set a Vector4 value at index.",
            "itemtype": "method",
            "name": "setVec4",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec4 values from.",
                    "type": "Number"
                },
                {
                    "name": "vec2",
                    "description": "Any object that has x, y, z, and w properties.",
                    "type": "Vector4"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 227,
            "description": "Set a Vector4 value using raw components.",
            "itemtype": "method",
            "name": "setVec4Components",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec4 values from.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "The Vec4\"s x component.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Vec4\"s y component.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The Vec4\"s z component.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The Vec4\"s w component.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 250,
            "description": "Set a Matrix3 value at index.",
            "itemtype": "method",
            "name": "setMat3",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the matrix values from.",
                    "type": "Number"
                },
                {
                    "name": "mat3",
                    "description": "The 3x3 matrix to set from. Must have a TypedArray property named elements to copy from.",
                    "type": "Matrix3"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 263,
            "description": "Set a Matrix4 value at index.",
            "itemtype": "method",
            "name": "setMat4",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the matrix values from.",
                    "type": "Number"
                },
                {
                    "name": "mat3",
                    "description": "The 4x4 matrix to set from. Must have a TypedArray property named elements to copy from.",
                    "type": "Matrix4"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 276,
            "description": "Set a Color value at index.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec3 values from.",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "Any object that has r, g, and b properties.",
                    "type": "Color"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 289,
            "description": "Set a Number value at index.",
            "itemtype": "method",
            "name": "setNumber",
            "params": [
                {
                    "name": "index",
                    "description": "The index at which to set the vec3 values from.",
                    "type": "Number"
                },
                {
                    "name": "numericValue",
                    "description": "The number to assign to this index in the array.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Instance of this class.",
                "type": "TypedArrayHelper"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 303,
            "description": "Returns the value of the array at the given index, taking into account the indexOffset property of this class.\n\nNote that this function ignores the component size and will just return a single value.",
            "itemtype": "method",
            "name": "getValueAtIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The index in the array to fetch.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The value at the given index.",
                "type": "Number"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\helpers\\TypedArrayHelper.js",
            "line": 317,
            "description": "Returns the component value of the array at the given index, taking into account the indexOffset property of this class.\n\nIf the componentSize is set to 3, then it will return a new TypedArray of length 3.",
            "itemtype": "method",
            "name": "getComponentValueAtIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The index in the array to fetch.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The component value at the given index.",
                "type": "TypedArray"
            },
            "class": "TypedArrayHelper",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "line": 9,
            "description": "Values will be distributed within a box.",
            "itemtype": "attribute",
            "name": "BOX",
            "type": "{number}",
            "class": "ParticleDistributions",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "line": 17,
            "description": "Values will be distributed on a sphere.",
            "itemtype": "attribute",
            "name": "SPHERE",
            "type": "{number}",
            "class": "ParticleDistributions",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleDistributions.js",
            "line": 25,
            "description": "Values will be distributed on a 2d-disc shape.",
            "itemtype": "attribute",
            "name": "DISC",
            "type": "{number}",
            "class": "ParticleDistributions",
            "module": "Lights"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 20,
            "description": "Particle group instance.",
            "itemtype": "property",
            "name": "group",
            "type": "{ParticleGroup}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 28,
            "description": "Emitter instance.\n\nEmitter has attributes that can be used to controll the particle system",
            "itemtype": "property",
            "name": "emitter",
            "type": "{ParticleEmitterControl}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 45,
            "description": "A dynamic particle emmiter ignores the position in its transform and applies it directly to the emitter origin.",
            "itemtype": "property",
            "name": "dinamicEmitter",
            "type": "{boolean}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 56,
            "description": "Texture attached to the group of this particle emitter.",
            "itemtype": "property",
            "name": "texture",
            "type": "{Texture}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 73,
            "description": "Set this value to however many \"steps\" you want value-over-lifetime properties to have.\n\nIts adjustable to fix an interpolation problem:\n\nAssuming you specify an opacity value as [0, 1, 0] and the valueOverLifetimeLength is 4, then the opacity value array will be reinterpolated to be [0, 0.66, 0.66, 0].\nThis isn't ideal, as particles would never reach full opacity.\n\nThis property affects the length of ALL value-over-lifetime properties for ALL  emitters and ALL groups. Only values >= 3 && <= 4 are allowed.",
            "itemtype": "attribute",
            "name": "valueOverLifetimeLength",
            "type": "{number}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 90,
            "description": "Default particle emitter configuration.",
            "itemtype": "attribute",
            "name": "defaultEmitter",
            "type": "{Object}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 111,
            "description": "Default particle emitter group configuration.",
            "itemtype": "attribute",
            "name": "defaultGroup",
            "type": "{Object}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 130,
            "description": "Reload internal material and geometry of this particle emitter.\n\nRecretes the group and emitter object attached to the particle.\n\nMay be required after changing material related parameters.",
            "itemtype": "method",
            "name": "reload",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 154,
            "description": "Update particle object matrix.\n\nIgnores the particle position if the moveEmitter attribute is set true.",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 176,
            "description": "Particle emitter state is automatically updated before rendering.",
            "itemtype": "method",
            "name": "onBeforeRender",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 192,
            "description": "Dispose particle emitter.\n\nShould be called when destroying particle emitter.",
            "itemtype": "method",
            "name": "dispose",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 23,
            "description": "Physics body contains the following attributes:\n - position Vec3\n - velocity Vec3\n - torque Vec3\n - angularVelocity Vec3\n - quaternion Quaternion\n - mass Number\n - material Material\n - type Number\n - linearDamping Number\n - angularDamping Number\n - allowSleep Boolean\n - sleepSpeedLimit Number\n - sleepTimeLimit Number\n - collisionFilterGroup Number\n - collisionFilterMask Number\n - fixedRotation Boolean\n - shape Array",
            "itemtype": "attribute",
            "name": "body",
            "type": "{Body}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 51,
            "description": "Physics object position mode, indicates how coordinates from the physics engine are transformed into object coordinates.",
            "itemtype": "attribute",
            "name": "mode",
            "type": "{number}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 59,
            "description": "Refenrece to the physics world.",
            "itemtype": "attribute",
            "name": "world",
            "type": "{World}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 70,
            "description": "The position of the object is copied directly from the body.\n\nIgnores the world tranforms inherited from parent objects.\n\nFaster but the physics object should not carry any world transformations.",
            "static": 1,
            "itemtype": "attribute",
            "name": "LOCAL",
            "type": "{number}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 83,
            "description": "The position of the object is adjusted to follow the parent object transformation.\n\nThis mode should be used for objects placed inside others.",
            "static": 1,
            "itemtype": "attribute",
            "name": "WORLD",
            "type": "{number}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 94,
            "description": "Intialize physics object and add it to the scene physics world.",
            "itemtype": "method",
            "name": "initialize",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 132,
            "description": "Update object position and rotation based on cannon.js body.",
            "itemtype": "method",
            "name": "update",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 178,
            "description": "Add shape to physics object body.",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "Shape"
                }
            ],
            "itemtype": "method",
            "name": "addShape",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "source\\core\\objects\\script\\nodes\\BaseNode.js",
            "line": 36,
            "description": "Button used to destroy the node and remove it from the graph.",
            "itemtype": "attribute",
            "name": "destroyButton",
            "type": "{Circle}",
            "class": "BaseNode",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "line": 18,
            "description": "Math operation performed by this node.",
            "itemtype": "attribute",
            "name": "operation",
            "type": "{string}",
            "class": "OperationNode",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "line": 28,
            "description": "Input node socket a.",
            "itemtype": "attribute",
            "name": "a",
            "type": "{NodeSocket}",
            "class": "OperationNode",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "line": 36,
            "description": "Input node socket b.",
            "itemtype": "attribute",
            "name": "b",
            "type": "{NodeSocket}",
            "class": "OperationNode",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\nodes\\OperationNode.js",
            "line": 44,
            "description": "Output node socket r with the result.",
            "itemtype": "attribute",
            "name": "r",
            "type": "{NodeSocket}",
            "class": "OperationNode",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 20,
            "description": "Node graph that composes this script.",
            "itemtype": "attribute",
            "name": "graph",
            "type": "{NodeGraph}",
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 31,
            "description": "Add a node the graph, these nodes can be connected with other already existing nodes in the graph.",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "node",
                    "description": "Node to be added into the graph.",
                    "type": "Node"
                }
            ],
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 42,
            "description": "Initialize script, automatically called by the runtime.\n\nCompiles the script code and calls the script initialize method if it exists after the code is compiled.",
            "itemtype": "method",
            "name": "initialize",
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 56,
            "description": "Update node script state runs the update methods from the node graph.",
            "itemtype": "method",
            "name": "update",
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 68,
            "description": "Disposes the script, can be used to clear resources when the program exits.\n\nCalls the script dispose method if it exists.",
            "itemtype": "method",
            "name": "dispose",
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\NodeScript.js",
            "line": 82,
            "description": "Call resize method if available.\n\nThe resize method receives width and height as arguments.",
            "itemtype": "method",
            "name": "resize",
            "class": "NodeScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 27,
            "description": "Python code attached to the script.\n\nIt only has acess to the data provided as parameter in each method.\n- initialize(obj, scene, program, keyboard, mouse) \n   - Called on app initialization, its called after all children elements are initialized, its safe to apply operations on other objects inside this method.\n - update(delta, obj, scene, program, keyboard, mouse)\n   - Called on every frame after rendering\n - dispose(obj, scene, program, keyboard, mouse)\n   - Called when disposing the program\n - onMouseOver(intersections, obj, scene, program, keyboard, mouse)\n   - Called on every frame if mouse is on top of one of the script children\n   - Receives an intersections array as argument.\n - onResize(x, y, obj, scene, program, keyboard, mouse)\n   - Called every time the window is resized\n   - Receives width and height as parameters\n - onAppData(data, obj, scene, program, keyboard, mouse)\n   - Called when receiving data sent by the host website",
            "itemtype": "property",
            "name": "code",
            "type": "{string}",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 51,
            "description": "Compiled function used during runtime.\n\nThis varible gets created using the compileCode() function called automatically on initalization.",
            "itemtype": "attribute",
            "name": "script",
            "type": "{Function}",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 61,
            "description": "Reference to the program object.\n\nCan be used to access other scenes, get resources and objects.",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 71,
            "description": "Reference to the scene where the script is placed.\n\nCan be used to interact with other objects.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 84,
            "description": "Default script code used when creating a new Script.",
            "itemtype": "attribute",
            "name": "DEFAULT",
            "type": "{string}",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 124,
            "description": "Update script state automatically calls for mouse events if they are defined and for the script update method.\n\nThis method is executed every frame, script logic should not relly on the frame time, use the \"delta\" value provided.",
            "itemtype": "method",
            "name": "update",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 150,
            "description": "Disposes the script, can be used to clear resources when the program exits.\n\nCalls the script dispose method if it exists.",
            "itemtype": "method",
            "name": "dispose",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 167,
            "description": "Call resize method if available.\n\nThe resize method receives width and height as arguments.",
            "itemtype": "method",
            "name": "resize",
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 182,
            "description": "Call onAppData() from the script if available.\n\nThis method is called everytime that external data is passed to the runtime.",
            "itemtype": "method",
            "name": "appData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\PythonScript.js",
            "line": 198,
            "description": "Prepare the script code to be run. The script can be prepared using different methods depending on the include mode defined.\n\nCan be used to dinamically change the script code. However it is not recommended can lead to undefined behavior.",
            "itemtype": "method",
            "name": "compileCode",
            "params": [
                {
                    "name": "code",
                    "description": "Code to be compiled into usable code.",
                    "type": "String"
                }
            ],
            "class": "PythonScript",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 30,
            "description": "Source code attached to the script, by default it is a Javacript source but other languages can be implemented.\n\nIt can access and change every object in the program and supports some events\n- initialize\n   - Called on app initialization, its called after all children elements are initialized, its safe to apply operations on other objects inside this method.\n - update(delta)\n   - Called on every frame after rendering\n - dispose\n   - Called when disposing the program\n - onMouseOver(intersections)\n   - Called on every frame if mouse is on top of one of the script children\n   - Receives an intersections array as argument.\n - onResize(x, y)\n   - Called every time the window is resized\n   - Receives width and height as parameters\n - onAppData(data)\n   - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes:\n - scene\n - program\n - self\n   - Same as this reference but global in the script scope\n - Keyboard\n - Mouse\n\nThere is also access to the following functions\n - include\n   - Include a javascript file from resources, when including files the user needs to be carefull and clear manually global declarations. The access to this method may be restricted depeding on the include mode",
            "itemtype": "property",
            "name": "code",
            "type": "{string}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 66,
            "description": "Mode indicates how to include external javascripts files into the script.\n\nCan be APPEND, EVALUATE or INCLUDE.\n\nAPPEND mode with append the library code to the script code, when running in this mode the include method cannot be used during runtime\n\nEVALUATE node with evaluate the library code during runtime, include method may still be used.\n\nINCLUDE mode will include the file as a global script, these libraries are not unloaded after the script or application is terminated.",
            "itemtype": "property",
            "name": "mode",
            "type": "{number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 82,
            "description": "Compiled function used during runtime.\n\nThis varible gets created using the compileCode() function called automatically on initalization.",
            "itemtype": "attribute",
            "name": "script",
            "type": "{Function}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 92,
            "description": "Reference to the program object.\n\nCan be used to access other scenes, get resources and objects.",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 102,
            "description": "Reference to the scene where the script is placed.\n\nCan be used to interact with other objects.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 115,
            "description": "Regular expression to obtain all the include calls placed inside of scripts.",
            "itemtype": "attribute",
            "name": "includeRegex",
            "type": "{RegExp}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 125,
            "description": "Default script code used when creating a new Script.",
            "itemtype": "attribute",
            "name": "DEFAULT",
            "type": "{string}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 139,
            "description": "List of default methods that can be implemented by scripts.\n\nThis list is used to search for these implementations in the script object at runtime.",
            "itemtype": "attribute",
            "name": "METHODS",
            "type": "{Array}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 149,
            "description": "Append libraries on initialization.\n\nLibraries are appended to the script code on initialization.",
            "itemtype": "attribute",
            "name": "APPEND",
            "type": "{number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 159,
            "description": "Evaluate libs during runtime.\n\nThis allows to load new libs during runtime, but its not possible to access private statements.",
            "itemtype": "attribute",
            "name": "EVALUATE",
            "type": "{number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 169,
            "description": "Include file into the document.body.\n\nThis imports the JS file as any other file included into a <script> tag.",
            "itemtype": "attribute",
            "name": "INCLUDE",
            "type": "{number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 179,
            "description": "Auxiliar function to include javascript source file from resource into the script.\n\nThe imported source is evaluated and loaded in the context of the script.\n\nGlobal declarations need to be cleaned using the dipose method.",
            "itemtype": "method",
            "name": "include",
            "params": [
                {
                    "name": "name",
                    "description": "Javascript resource name.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 190,
            "description": "Get includes from the code, includes are fetched from the resource manager or if not found fetched using XHR.\n\nUsed to extract includes from code when loading libraries in APPEND mode.",
            "static": 1,
            "itemtype": "method",
            "name": "getIncludes",
            "params": [
                {
                    "name": "code",
                    "description": "Script code.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 224,
            "description": "Remove comments from javascript code using regex.",
            "itemtype": "method",
            "name": "removeComments",
            "params": [
                {
                    "name": "code",
                    "description": "Input javascript code.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The processed javascript code.",
                "type": "String"
            },
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 236,
            "description": "Remove includes from code.\n\nUsed to remove include statements when initializing code in APPEND mode.",
            "static": 1,
            "itemtype": "method",
            "name": "removeIncludes",
            "params": [
                {
                    "name": "code",
                    "description": "Script code.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 250,
            "description": "Initialize script, code automatically called by the runtime on program initialization.\n\nCompiles the script code and calls the script initialize method if it exists after the code is compiled.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 286,
            "description": "Update script state automatically calls for mouse events if they are defined and for the script update method.\n\nThis method is executed every frame, script logic should not relly on the frame time, use the \"delta\" value provided.",
            "itemtype": "method",
            "name": "update",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 312,
            "description": "Disposes the script, can be used to clear resources when the program exits.\n\nCalls the script dispose method if it exists.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 329,
            "description": "Call resize method if available.\n\nThe resize method receives width and height as arguments.",
            "itemtype": "method",
            "name": "resize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 344,
            "description": "Call onAppData() from the script if available.\n\nThis method is called everytime that external data is passed to the runtime.",
            "itemtype": "method",
            "name": "appData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 360,
            "description": "Prepare the script code to be run. The script can be prepared using different methods depending on the include mode defined.\n\nCan be used to dinamically change the script code. However it is not recommended can lead to undefined behavior.",
            "itemtype": "method",
            "name": "compileCode",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onReady",
                    "description": "Funtion called when the code is ready.",
                    "type": "Function"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\script\\Script.js",
            "line": 530,
            "description": "Create a object to access the context of this script.\n\nAlso includes the access to three cannon and engine methods.",
            "itemtype": "method",
            "name": "createContextObject",
            "return": {
                "description": "Context object for the script to access data.",
                "type": "Object"
            },
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 84,
            "description": "Spine animation data.",
            "itemtype": "property",
            "name": "json",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 92,
            "description": "Texture atlas information.",
            "itemtype": "property",
            "name": "atlas",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 100,
            "description": "Array of SpineTextures used by the animation.",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 108,
            "description": "The animation can have multiple skins that define diferent sets of textures for the same animation.",
            "itemtype": "attribute",
            "name": "skin",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 116,
            "description": "Animation currently playing, animations are split into tracks.\n\nAn animation (e.g. walk) can be composed of multiple tracks.",
            "itemtype": "attribute",
            "name": "animation",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 126,
            "description": "Index of the animation track playing.",
            "itemtype": "attribute",
            "name": "track",
            "type": "{number}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 134,
            "description": "Indicates the loop mode of the animation if set true the animation starts again after it ends.",
            "itemtype": "attribute",
            "name": "loop",
            "type": "{boolean}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 155,
            "description": "Update mesh geometry from animation state before rendering.",
            "itemtype": "method",
            "name": "onBeforeRender",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 168,
            "description": "Play animation.",
            "itemtype": "method",
            "name": "play",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 186,
            "description": "Get all available animations.",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "Animations",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 197,
            "description": "Set animation from track number and name.",
            "itemtype": "method",
            "name": "setAnimation",
            "params": [
                {
                    "name": "track",
                    "description": "Track number.",
                    "type": "Number"
                },
                {
                    "name": "animation",
                    "description": "Animation name.",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "If true the animation plays in loop.",
                    "type": "Boolean"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 223,
            "description": "Get skins available for this animation.",
            "itemtype": "method",
            "name": "getSkins",
            "return": {
                "description": "List of skins available for this animation.",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 234,
            "description": "Set skin to be used by this animation",
            "itemtype": "method",
            "name": "setSkin",
            "params": [
                {
                    "name": "name",
                    "description": "Skin name.",
                    "type": "String"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "source\\core\\objects\\sprite\\CanvasSprite.js",
            "line": 14,
            "description": "Texture where the text is drawn to.",
            "itemtype": "attribute",
            "name": "texture",
            "type": "{CanvasTexture}",
            "class": "CanvasSprite",
            "module": "Textures"
        },
        {
            "file": "source\\core\\objects\\sprite\\CanvasSprite.js",
            "line": 22,
            "description": "DOM canvas to draw.",
            "itemtype": "attribute",
            "name": "canvas",
            "type": "{Element}",
            "class": "CanvasSprite",
            "module": "Textures"
        },
        {
            "file": "source\\core\\objects\\sprite\\CanvasSprite.js",
            "line": 48,
            "description": "Size attenuation indicates how the sprite should be scaled relative to the camera.",
            "itemtype": "attribute",
            "name": "sizeAttenuation",
            "type": "{number}",
            "class": "CanvasSprite",
            "module": "Textures"
        },
        {
            "file": "source\\core\\objects\\sprite\\Sprite.js",
            "line": 14,
            "description": "Material used to render the sprite.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 39,
            "description": "BMFont text configuration object.\n\nPassed to the BMFont text geometry generator. It is a object with the format.\n\n{\n   font: (Object) Font data should be parsed from (.json, .fnt, etc) file,\n   text: (String),\n   width: (Number) Width of the text area,\n   align: (String) Side to align the text,\n   lineHeight: (Number) Line height/font size,\n   letterSpacing: (Number) Spacing between characters,\n   mode: (String) a mode for word-wrapper; can be 'pre' (maintain spacing), or 'nowrap' (collapse whitespace but only break on newline characters), otherwise assumes normal word-wrap behaviour (collapse whitespace, break at width or newlines)\n   tabSize: (Number) the number of spaces to use in a single tab (default 4)\n   start: (Number) the starting index into the text to layout (default 0)\n   end: (Number) the ending index (exclusive) into the text to layout (default text.length)\n}",
            "itemtype": "attribute",
            "name": "config",
            "type": "{Object}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 62,
            "description": "Uniforms passed to the text rendering shaders.",
            "itemtype": "attribute",
            "name": "uniforms",
            "type": "{Object}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 86,
            "description": "Scale applied to the generated text geometry.",
            "itemtype": "attribute",
            "name": "fontScale",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 98,
            "description": "Text bitmap rendering shader, can be:\n   - TextBitmap.BITMAP \n   - TextBitmap.SDF \n   - TextBitmap.MSDF",
            "itemtype": "attribute",
            "name": "shader",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 113,
            "description": "Texture containing the bitmap characters.\n\nData specifiyng the position of each character in the texture should be placed in the font.",
            "itemtype": "attribute",
            "name": "texture",
            "type": "{Texture}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 127,
            "description": "BMFont text font data, contains the data about all characters available, and their position in the atlas.\n\nFont data should be parsed from (.json, .fnt, etc) file.\n\nPassed to the BMFont text geometry generator.",
            "itemtype": "attribute",
            "name": "font",
            "type": "{Object}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 143,
            "description": "Text displayed on the object.",
            "itemtype": "attribute",
            "name": "text",
            "type": "{string}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 162,
            "description": "Space between each text line.",
            "itemtype": "attribute",
            "name": "lineHeight",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 174,
            "description": "Spacing between each letter.",
            "itemtype": "attribute",
            "name": "letterSpacing",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 186,
            "description": "Horizontal text alignment can be\n   - TextBitmap.LEFT\n   - TextBitmap.RIGHT\n   - TextBitmap.CENTER",
            "itemtype": "attribute",
            "name": "align",
            "type": "{string}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 201,
            "description": "Width of the text box.",
            "itemtype": "attribute",
            "name": "width",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 213,
            "description": "Color of the text, only applied for SDF and MSDF modes.",
            "itemtype": "attribute",
            "name": "color",
            "type": "{Color}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 225,
            "description": "SDF distance alpha threshold.",
            "itemtype": "attribute",
            "name": "threshold",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 237,
            "description": "Smoothing of the text borders.",
            "itemtype": "attribute",
            "name": "smoothing",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 257,
            "description": "Simple bitmap font atlas.",
            "static": 1,
            "itemtype": "attribute",
            "name": "BITMAP",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 266,
            "description": "Single channel signed distance field font atlas.",
            "static": 1,
            "itemtype": "attribute",
            "name": "SDF",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 275,
            "description": "Multi channel signed distance field font atlas.",
            "static": 1,
            "itemtype": "attribute",
            "name": "MSDF",
            "type": "{number}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 284,
            "description": "Align text to the left side.",
            "static": 1,
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{string}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 293,
            "description": "Align text to the center.",
            "static": 1,
            "itemtype": "attribute",
            "name": "CENTER",
            "type": "{string}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 302,
            "description": "Align text to the right side.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{string}",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 311,
            "description": "Set the text to be displayed.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 322,
            "description": "Update the shader used to draw the bitmap information in the screen.",
            "itemtype": "method",
            "name": "updateShader",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextBitmap.js",
            "line": 358,
            "description": "Update the text bitmap geometry to match config.\n\nShould be called every time after changes to configuration are made.",
            "itemtype": "method",
            "name": "updateGeometry",
            "class": "TextBitmap",
            "module": "Sprite"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 30,
            "description": "Font used to draw text.",
            "itemtype": "property",
            "name": "font",
            "type": "{Font}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 38,
            "description": "Indicates if the text mesh has volume or not.",
            "itemtype": "property",
            "name": "extruded",
            "type": "{boolean}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 46,
            "description": "Size of the text (depth).",
            "itemtype": "property",
            "name": "size",
            "type": "{number}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 54,
            "description": "Height of the text.",
            "itemtype": "property",
            "name": "height",
            "type": "{number}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 62,
            "description": "Number of segments that compose a curve in the font.",
            "itemtype": "property",
            "name": "curveSegments",
            "type": "{number}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 70,
            "description": "If true a bevel is added to the text.",
            "itemtype": "property",
            "name": "bevel",
            "type": "{boolean}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 78,
            "description": "Bevel thickness.",
            "itemtype": "property",
            "name": "bevelThickness",
            "type": "{number}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 86,
            "description": "Bevel size.",
            "itemtype": "property",
            "name": "bevelSize",
            "type": "{number}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 94,
            "description": "Text to be diplayed in the mesh.",
            "itemtype": "property",
            "name": "text",
            "type": "{string}",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 127,
            "description": "Set font used by this text 3D instance.",
            "params": [
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 142,
            "description": "Change text.",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 153,
            "description": "Update the text geometry.\n\nShould be called after chaging any attribute to generate a new geometry.",
            "itemtype": "method",
            "name": "updateGeometry",
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 197,
            "description": "Clone this object instance into a new object.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Clone of this object.",
                "type": "TextMesh"
            },
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextMesh.js",
            "line": 208,
            "description": "Create JSON for object.\n\nNeed to backup geometry and set to undefined to avoid it being stored.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "TextMesh",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 32,
            "description": "CSS Font style to be used.",
            "itemtype": "attribute",
            "name": "font",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 44,
            "description": "Horizontal text alignment can be\n   - TextSprite.LEFT\n   - TextSprite.RIGHT\n   - TextSprite.CENTER",
            "itemtype": "attribute",
            "name": "align",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 59,
            "description": "CSS color of the text.",
            "itemtype": "attribute",
            "name": "color",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 71,
            "description": "Text of this object.",
            "itemtype": "attribute",
            "name": "text",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 90,
            "description": "Indicates if the text has an outline border.",
            "itemtype": "attribute",
            "name": "outline",
            "type": "{boolean}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 102,
            "description": "CSS color of the outline.",
            "itemtype": "attribute",
            "name": "outlineColor",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 114,
            "description": "Width of the text outline.",
            "itemtype": "attribute",
            "name": "outlineWidth",
            "type": "{number}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 126,
            "description": "Vertical resolution of the texture created from canvas used.\n\nShould always be a npot of 2.",
            "itemtype": "attribute",
            "name": "resolution",
            "type": "{number}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 146,
            "description": "Align text to the left side.",
            "static": 1,
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 155,
            "description": "Align text to the center.",
            "static": 1,
            "itemtype": "attribute",
            "name": "CENTER",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 164,
            "description": "Align text to the right side.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{string}",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\text\\TextSprite.js",
            "line": 173,
            "description": "Update the canvas texture, redrawText text into the canvas.",
            "itemtype": "method",
            "name": "drawText",
            "class": "TextSprite",
            "module": "Meshes"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 34,
            "description": "Runtime instance used to communication between app and the host webpage.\n\nInside the editor communication with the app is simulated on the debug console.",
            "itemtype": "property",
            "name": "app",
            "type": "{App}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 44,
            "description": "Program name.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 52,
            "description": "Program description, will be stamped when the app is exported.",
            "itemtype": "property",
            "name": "description",
            "type": "{string}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 60,
            "description": "Program author, will be stamped when the app is exported.",
            "itemtype": "property",
            "name": "author",
            "type": "{string}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 68,
            "description": "Program version should adhere to semantic versioning, but it is not mandatory.",
            "itemtype": "property",
            "name": "version",
            "type": "{string}",
            "default": "\"0.0.0\"",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 77,
            "description": "Flag to control pointer locking, when set true the cursor is locked into the application window.",
            "itemtype": "property",
            "name": "lockPointer",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 86,
            "description": "Flag to indicate if the runtime should handle device pixel ratio.\n\nIf set false the runtime will ignore the pixel ratio, and use in browser coordinates.",
            "itemtype": "property",
            "name": "handlePixelRatio",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 96,
            "description": "Enable augmented reality flag to allow the application to run using AR using WebXR.",
            "itemtype": "property",
            "name": "ar",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 104,
            "description": "Enable virtual reality flag, allows the application to run in VR mode.\n\nVR mode can only be enabled if the system and browser have support for VR using WebXR or WebVR.",
            "itemtype": "property",
            "name": "vr",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 114,
            "description": "Virtual reality movement scale.\n\nIndicates the relation between the real movement and virtual world movement.",
            "itemtype": "property",
            "name": "vrScale",
            "type": "{number}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 124,
            "description": "Renderer configuration applied to the WebGL renderer.",
            "itemtype": "property",
            "name": "rendererConfig",
            "type": "{RendererConfiguration}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 132,
            "description": "Target related configurations applied when exporting the app.",
            "itemtype": "property",
            "name": "targetConfig",
            "type": "{TargetConfig}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 140,
            "description": "Scene loaded as default on startup.",
            "itemtype": "property",
            "name": "defaultScene",
            "type": "{Scene}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 148,
            "description": "Default camera to be used by scenes where there is no camera.\n\nOn the editor this value is automatically set to the last editor camera point used",
            "itemtype": "property",
            "name": "defaultCamera",
            "type": "{Camera}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 158,
            "description": "Scene currently running in the program, runtime variable.\n\nShould never be manually defined, change it using the setScene(scene) method.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 168,
            "description": "Keyboard input object, runtime variable.",
            "itemtype": "property",
            "name": "keyboard",
            "type": "{Keyboard}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 176,
            "description": "Mouse input object, runtime variable.",
            "itemtype": "property",
            "name": "mouse",
            "type": "{Mouse}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 184,
            "description": "Renderer being used during runtime.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{WebGLRenderer}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 192,
            "description": "Canvas being used to draw content by the renderer.\n\nThis canvas is where the WebGL rendering context was created.",
            "itemtype": "property",
            "name": "canvas",
            "type": "{Element}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 202,
            "description": "DOM Division element that can be used to add html content to the app.\n\nAll content added to this division should be manually removed before the app exits.",
            "itemtype": "property",
            "name": "division",
            "type": "{Element}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 212,
            "description": "Event manager used to attach and manage program events.\n\nIts created on initialization and destroys on disposal, scripts can attach events to the manager safely during runtime.",
            "itemtype": "property",
            "name": "manager",
            "type": "{EventManager}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 222,
            "description": "Clock object used to measure times between frames.\n\nThe time measured is passed down to the scene and its children elements.",
            "itemtype": "property",
            "name": "clock",
            "type": "{Clock}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 232,
            "description": "WebX runtime control, true when the app is running in an XR environment.\n\nXR environment can be VR or AR only one of them can be used at a time.",
            "itemtype": "property",
            "name": "xrEnabled",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 242,
            "description": "Indicates the XR mode currently active.",
            "itemtype": "property",
            "name": "xrMode",
            "type": "{number}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 251,
            "description": "No XR mode is enabled.",
            "static": 1,
            "itemtype": "attribute",
            "name": "XR_NONE",
            "type": "{number}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 260,
            "description": "XR is running in VR mode.",
            "static": 1,
            "itemtype": "attribute",
            "name": "XR_VR",
            "type": "{number}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 269,
            "description": "XR is running in AR mode.",
            "static": 1,
            "itemtype": "attribute",
            "name": "XR_AR",
            "type": "{number}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 280,
            "description": "Select initial scene and initialize that scene.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 331,
            "description": "Set program mouse and keyboard.\n\nShould be set before initialize() is called otherwise a keyboard and mouse are created by default.",
            "itemtype": "method",
            "name": "setMouseKeyboard",
            "params": [
                {
                    "name": "mouse",
                    "description": "",
                    "type": "Mouse"
                },
                {
                    "name": "keyboard",
                    "description": "",
                    "type": "Keyboard"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 363,
            "description": "Set program renderer to be used by this program.\n\nGets the renderer canvas and uses the parent DOM element of the canvas for DOM division property.",
            "itemtype": "method",
            "name": "setRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "Three.js renderer to be used by this program",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "configure",
                    "description": "If true also updates renderer configuration to match rendering quality specified in the program.",
                    "type": "Bool"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 386,
            "description": "Update program state, this updated all current scene children elements.",
            "itemtype": "method",
            "name": "update",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 401,
            "description": "Render current scene to canvas.\n\nWhen rendering in VR mode all effects and camera parameters are ignored.\n\nRenderer should be initialized and passed as argument.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 416,
            "description": "Resize the current scene elements.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 434,
            "description": "This method updated the webgl renderer configuration.\n\nShould be called after changing any rendering related parameter.",
            "itemtype": "method",
            "name": "updateRenderer",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 449,
            "description": "Check if augmented reality is available.\n\nThe program need to be configured for AR and the host device should support the required WebXR modes.",
            "itemtype": "method",
            "name": "arAvailable",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 461,
            "description": "Enter virtual reality mode.",
            "itemtype": "method",
            "name": "enterAR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 479,
            "description": "Exit augmented reality mode.",
            "itemtype": "method",
            "name": "exitAR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 495,
            "description": "Check if virtual reality is available.",
            "itemtype": "method",
            "name": "vrAvailable",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 505,
            "description": "Enter virtual reality mode.",
            "itemtype": "method",
            "name": "enterVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 523,
            "description": "Exit virtual reality mode.",
            "itemtype": "method",
            "name": "exitVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 538,
            "description": "Change scene during runtime, this method can receive booth a scene name or a scene object.\n\nThis method should be used inside of script objects during runtime.",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "Scene object or name of the scene to be used.",
                    "type": "Scene | string"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 583,
            "description": "Remove Scene from program.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 620,
            "description": "Add new scene to this program.\n\nOn the program class only scenes can be added as children.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 641,
            "description": "Clone program, keeping uuids and every identification attribute.\n\nClone method uses the ObjectLoad to serialize and create a new program instance with the same data.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned program",
                "type": "Program"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 654,
            "description": "Set a scene as initial scene using its uuid.\n\nThis method is used by the editor.",
            "itemtype": "method",
            "name": "setInitialScene",
            "params": [
                {
                    "name": "uuid",
                    "description": "Scene uuid",
                    "type": "String"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 667,
            "description": "Dispose program data to avoid memory leaks.\n\nCalled when exiting the program.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 706,
            "description": "Receive external data and pass it to all script instances.",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "receiveDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 733,
            "description": "Send data to external app instance.",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "sendDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Program.js",
            "line": 758,
            "description": "Serialize the object to JSON format.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object passed to the objects and resources toJSON method to store data.",
                    "type": "Object"
                },
                {
                    "name": "exportResources",
                    "description": "If true all resources in the program are exported, else only resources attached to objects are exported.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json Serialized JSON data containing the program, all scenes and resources stored.",
                "type": "Object"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 28,
            "description": "Cannon.js world used for physics simulation.\n\nThe world is configured by default with a NaiveBroadphase and a SplitSolver.\n\nDocumentation for cannon.js physics World object can be found at http://schteppe.github.io/cannon.js/docs/classes/World.html.",
            "itemtype": "property",
            "name": "world",
            "type": "{World}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 49,
            "description": "Background of the scene.\n\nThe background of the scene is drawn after the renderer clears the buffers.\n\nIt can be a color, a texture or a cube map.",
            "itemtype": "property",
            "name": "background",
            "type": "{Color|Texture|null}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 61,
            "description": "Opacity of the background color.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{number}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 69,
            "description": "List of active cameras currently being displayed.\n\nThe cameras are rendered by their render order.",
            "itemtype": "property",
            "name": "cameras",
            "type": "{Array}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 79,
            "description": "Default camera of the scene used where there is no active camera.\n\nWhile using the editor the scene default camera gets set as the last camera configuration used.",
            "itemtype": "property",
            "name": "defaultCamera",
            "type": "{Camera}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 89,
            "description": "Stores the time since the last frame.",
            "itemtype": "property",
            "name": "delta",
            "type": "{number}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 97,
            "description": "Raycaster used for mouse interaction with 3D objects.\n\nThis raycaster is automatically updated using the first camera being drawn.",
            "itemtype": "property",
            "name": "raycaster",
            "type": "{Raycaster}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 107,
            "description": "Indicates if the scene is using octree indexation for ray casting.",
            "itemtype": "property",
            "name": "useOctree",
            "type": "{boolean}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 117,
            "description": "Octree used to index all the unoObject in the scene being visualized.\n\nIt is used to filter the visibility of objects and raycast them.",
            "itemtype": "attribute",
            "name": "octree",
            "type": "{PointOctree}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 127,
            "description": "Flag indicating if the is a octree update scheduled.\n\nAvoids scheduling multiple octree updates from different objects.",
            "itemtype": "attribute",
            "name": "octreeUpdateScheduled",
            "type": "{Boolean}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 137,
            "description": "Stores the octree object matches, that are the objects currently visible.",
            "itemtype": "attribute",
            "name": "octreeMatches",
            "type": "{Array}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 145,
            "description": "Program that contains this scene.",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 153,
            "description": "Canvas used to draw this scene.",
            "itemtype": "property",
            "name": "canvas",
            "type": "{Element}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 161,
            "description": "Normalized mouse coordinates used by the scene internal raycaster.",
            "itemtype": "property",
            "name": "mouse",
            "type": "{Vector2}",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 188,
            "description": "Update scene objects and the physics world.\n\nAlso updates the global ray caster object used for object culling.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "The time since the last frame.",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 255,
            "description": "Render scene using all active cameras.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 313,
            "description": "Get camera from scene using cameras uuid.",
            "itemtype": "method",
            "name": "getCamera",
            "params": [
                {
                    "name": "uuid",
                    "description": "UUID of the camera",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "Object to search cameras in.",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Camera if found, else null",
                "type": "Camera"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 346,
            "description": "Add camera to active cameras list.",
            "itemtype": "method",
            "name": "addCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 361,
            "description": "Update active camera lister order.\n\nThis method should be called after changing order value for an active camera.",
            "itemtype": "method",
            "name": "updateCameraOrder",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 377,
            "description": "Remove camera from active camera list.",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "removeCamera",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 392,
            "description": "Check is camera is active.",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "isCameraActive",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\objects\\Scene.js",
            "line": 404,
            "description": "Set scene fog mode.\n\nIt recreates the fog object attached to the scene and set the same color.",
            "itemtype": "method",
            "name": "setFogMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "source\\core\\platform\\TargetConfig.js",
            "line": 8,
            "description": "Desktop related export properties.",
            "itemtype": "attribute",
            "name": "desktop",
            "type": "{Object}",
            "class": "TargetConfig",
            "module": "Core"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js",
            "line": 71,
            "description": "Minimum luminance.",
            "itemtype": "property",
            "name": "minLuminance",
            "type": "{number}",
            "class": "AfterimagePass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js",
            "line": 83,
            "description": "Rate of luminance variation (adaptation rate).",
            "itemtype": "property",
            "name": "tau",
            "type": "{number}",
            "class": "AfterimagePass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js",
            "line": 95,
            "description": "Rate of luminance variation (adaptation rate).",
            "itemtype": "property",
            "name": "tau",
            "type": "{number}",
            "class": "AfterimagePass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\AfterimagePass.js",
            "line": 49,
            "description": "Dampening applied to the previous frame.",
            "itemtype": "property",
            "name": "damp",
            "type": "{number}",
            "class": "AfterimagePass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 50,
            "description": "Camera aperture.",
            "itemtype": "property",
            "name": "aperture",
            "type": "{number}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 62,
            "description": "Focus point distance.",
            "itemtype": "property",
            "name": "focus",
            "type": "{number}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 74,
            "description": "Maximum level of blur that can be applied to more distant objects.",
            "itemtype": "property",
            "name": "enabled",
            "type": "{maxblur}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 137,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "line": 29,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "ColorifyPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 34,
            "description": "Center of rotation of the dot grid in normalized coordinates.",
            "itemtype": "property",
            "name": "center",
            "type": "{Vector2}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 46,
            "description": "Rotation of the dot grid.",
            "itemtype": "property",
            "name": "angle",
            "type": "{number}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 58,
            "description": "Scale of the dots used in the effect.",
            "itemtype": "property",
            "name": "scale",
            "type": "{number}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 31,
            "description": "If set true a grayscale effect will be applied.",
            "itemtype": "property",
            "name": "grayscale",
            "type": "{boolean}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 43,
            "description": "Amount of noise to be applied to the image.",
            "itemtype": "property",
            "name": "noiseIntensity",
            "type": "{number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 55,
            "description": "Scanline intensity.",
            "itemtype": "property",
            "name": "scanlinesIntensity",
            "type": "{number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 67,
            "description": "Number of scanline to be displayed.",
            "itemtype": "property",
            "name": "scanlinesCount",
            "type": "{number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "line": 41,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "HueSaturationPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 30,
            "description": "Depth texture attached to the normal material",
            "itemtype": "attribute",
            "name": "depthTexture",
            "type": "{DepthTexture}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 41,
            "description": "Normal rendering material.",
            "itemtype": "attribute",
            "name": "normalMaterial",
            "type": "{MeshNormalMaterial}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 66,
            "description": "Blur pass render material.",
            "itemtype": "attribute",
            "name": "blurMaterial",
            "type": "{ShaderMaterial}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 81,
            "description": "Shader material for the SSAO render pass.",
            "itemtype": "attribute",
            "name": "ssaoMaterial",
            "type": "{ShaderMaterial}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 97,
            "description": "Material used to copy data between buffers.",
            "itemtype": "attribute",
            "name": "copyMaterial",
            "type": "{ShaderMaterial}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 125,
            "description": "Kernel radius used for the SSAO effect.",
            "itemtype": "property",
            "name": "kernelRadius",
            "type": "{boolean}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 137,
            "description": "Minimum camera distance considered for the SSAO effect.",
            "itemtype": "property",
            "name": "minDistance",
            "type": "{number}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 149,
            "description": "Maximum camera distance considered for the SSAO effect.",
            "itemtype": "property",
            "name": "maxDistance",
            "type": "{number}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 161,
            "description": "SSAO effect kernel size.",
            "itemtype": "property",
            "name": "kernelSize",
            "type": "{number}",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 189,
            "description": "Generate a sample kernel based on the kernelSize value.",
            "itemtype": "method",
            "name": "generateSampleKernel",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 211,
            "description": "Use noise to generate multiple pseudo random kernel rotations.",
            "itemtype": "method",
            "name": "generateRandomKernelRotations",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 237,
            "description": "Render using this pass.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "Buffer to write output.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "Input buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "Delta time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "Not used in this pass.",
                    "type": "Boolean"
                }
            ],
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 302,
            "description": "Render a quad scene using a pass material.",
            "itemtype": "method",
            "name": "renderPass",
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 338,
            "description": "Set resolution of this render pass.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAONOHPass.js",
            "line": 355,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "SSAONOHPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 39,
            "description": "Ambient occlusion shadow radius.",
            "itemtype": "property",
            "name": "radius",
            "type": "{number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 51,
            "description": "Display only ambient occlusion result.",
            "itemtype": "property",
            "name": "onlyAO",
            "type": "{boolean}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 63,
            "description": "Ambient occlusion clamp.",
            "itemtype": "property",
            "name": "aoClamp",
            "type": "{number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 75,
            "description": "Pixel luminosity influence in AO calculation.",
            "itemtype": "property",
            "name": "lumInfluence",
            "type": "{number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 96,
            "description": "Render using this pass.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "Buffer to write output.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "Input buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "Delta time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "Not used in this pass.",
                    "type": "Boolean"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 125,
            "description": "Set resolution of this render pass.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 138,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 103,
            "description": "Scales the color of the whole bloom effect.",
            "itemtype": "property",
            "name": "strength",
            "type": "{number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 115,
            "description": "Bloom effect radius.",
            "itemtype": "property",
            "name": "radius",
            "type": "{number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 127,
            "description": "Defines how many luminance units a color needs to have to affect bloom. In addition to the threshold, there is a linear part (one unit wide) where the color only partly affects the bloom.\n\nTo have all scene colors contributing to the bloom, a volume of -1 needs to be used.",
            "itemtype": "property",
            "name": "threshold",
            "type": "{number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 141,
            "description": "Smooth factor.",
            "itemtype": "property",
            "name": "smooth",
            "type": "{number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 153,
            "description": "The size in percent of the screen width. Is clamped by some number. If you need a larger number, use the next lower resolution blur instead (higher number).",
            "itemtype": "property",
            "name": "bloomFactors",
            "type": "{Array}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 165,
            "description": "Modifies the brightness and color of each bloom. Using a black color will not make this pass faster but that can be done.",
            "itemtype": "property",
            "name": "bloomTintColors",
            "type": "{Array}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 284,
            "description": "Serialize this effect composer to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 39,
            "description": "Passes attached to this effect composer.\n\nThe passes are rendered in order.",
            "itemtype": "property",
            "name": "passes",
            "type": "{Array}",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 49,
            "description": "Input buffer passed to the render pass.",
            "itemtype": "property",
            "name": "writeBuffer",
            "type": "{WebGLRenderTarget}",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 57,
            "description": "Input buffer passed to the render pass.",
            "itemtype": "property",
            "name": "readBuffer",
            "type": "{WebGLRenderTarget}",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 65,
            "description": "Copy shader used to copy data between the read and write buffer or to copy the writeBuffer to screen when necessary.",
            "itemtype": "property",
            "name": "copyPass",
            "type": "{ShaderPass}",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 73,
            "description": "Renderer state configuration, stored the clear configuration of the renderer.\n\nUsed to store and restore states.",
            "itemtype": "property",
            "name": "rendererState",
            "type": "{RendererState}",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 92,
            "description": "Swap rendering buffers.\n\nUsed to make the output buffer of a render pass the input of the next one.",
            "itemtype": "method",
            "name": "swapBuffers",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 106,
            "description": "Add new pass to the composer.",
            "itemtype": "method",
            "name": "addPass",
            "params": [
                {
                    "name": "pass",
                    "description": "Rendering pass to be added.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 117,
            "description": "Move pass back in the list of render passes.\n\nMoving back means that the pass is rendered earlier in the pipeline.",
            "itemtype": "method",
            "name": "moveBack",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be moved.",
                    "type": "Pass"
                }
            ],
            "return": {
                "description": "Returns true on success, false otherwise.",
                "type": "Boolean"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 144,
            "description": "Move pass forward in the list of render passes.\n\nMoving forward in the list means being renderer later down the pipeline.",
            "itemtype": "method",
            "name": "moveForward",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be moved.",
                    "type": "Pass"
                }
            ],
            "return": {
                "description": "Returns true on success, false otherwise.",
                "type": "Boolean"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 171,
            "description": "Remove pass from this composer, if pass is not found nothing happens.",
            "itemtype": "method",
            "name": "removePass",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be removed from the composer.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 186,
            "description": "Insert new pass into the composer in a specific position.",
            "itemtype": "method",
            "name": "insertPass",
            "params": [
                {
                    "name": "pass",
                    "description": "Rendering pass to be added.",
                    "type": "Pass"
                },
                {
                    "name": "index",
                    "description": "Index to be inserted on.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 198,
            "description": "Render a scene using this effect composer and a renderer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "Render to be used to render the scene.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "delta",
                    "description": "Delta time.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 266,
            "description": "Set rendering size for the composer.\n\nAlso updates the size for all passes attached to the composer.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 292,
            "description": "Reset this effect composer.",
            "itemtype": "method",
            "name": "reset",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 306,
            "description": "Dispose this effect composer.",
            "itemtype": "method",
            "name": "dispose",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 320,
            "description": "Serialize this effect composer to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\EffectComposer.js",
            "line": 340,
            "description": "Create a new effect composer loaded from json data.",
            "static": 1,
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "JSON data to load.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Composer loaded from data.",
                "type": "EffectComposer"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 16,
            "description": "If set to true, the pass is processed by the composer.",
            "itemtype": "property",
            "name": "enabled",
            "type": "{boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 24,
            "description": "If set to true, the pass indicates to swap read and write buffer after rendering.",
            "itemtype": "property",
            "name": "needsSwap",
            "type": "{boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 32,
            "description": "If set to true, the pass clears its target buffer before rendering.",
            "itemtype": "property",
            "name": "clear",
            "type": "{boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 40,
            "description": "If set to true, the result of the pass is rendered to screen.",
            "itemtype": "property",
            "name": "renderToScreen",
            "type": "{boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 48,
            "description": "If set to true, the result of the pass needs to be copied to the ouput by the effect renderer if renderToScren is enabled.",
            "itemtype": "property",
            "name": "copyToScreen",
            "type": "{boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 57,
            "description": "Parameters used for a RGBA linear filtered render target.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RGBALinear",
            "type": "{Object}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 71,
            "description": "Parameters used for a RGB linear filtered render target.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RGBLinear",
            "type": "{Object}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 85,
            "description": "Parameters used for a RGBA unfiltered render target.",
            "static": 1,
            "itemtype": "attribute",
            "name": "RGBANearest",
            "type": "{Object}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 99,
            "description": "Create a quad scene to render post-processing effects.\n\nIt creates multiple attributes in the object to support that scene.",
            "itemtype": "method",
            "name": "createQuadScene",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 108,
            "description": "Quad rendering camera.",
            "itemtype": "attribute",
            "name": "camera",
            "type": "{OthographicCamera}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 116,
            "description": "Quad scene, that contains a single quad children.",
            "itemtype": "attribute",
            "name": "scene",
            "type": "{Scene}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 124,
            "description": "Quad mesh, composed of a 2 by 2 plane geometry.",
            "itemtype": "attribute",
            "name": "quad",
            "type": "{Mesh}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 135,
            "description": "Set resolution of this render pass.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 144,
            "description": "Render the scene using this render pass.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "Buffer to write output.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "Input buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "Delta time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "Not used in this pass.",
                    "type": "Boolean"
                },
                {
                    "name": "scene",
                    "description": "Scene to render.",
                    "type": "Scene"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 157,
            "description": "Dispose this render pass.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\postprocessing\\Pass.js",
            "line": 164,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DObject.js",
            "line": 18,
            "description": "The DOM element to be projected in 3D space.\n\nIt is automatically added to the appropiate DOM container used by the renderer.",
            "itemtype": "attribute",
            "name": "element",
            "type": "{Element}",
            "class": "CSS3DObject",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 17,
            "description": "Size of the renderer viewport.",
            "itemtype": "attribute",
            "name": "size",
            "type": "{Vector2}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 25,
            "description": "Size of the renderer viewport.",
            "itemtype": "attribute",
            "name": "size",
            "type": "{Vector2}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 33,
            "description": "Temporary matrix object.",
            "itemtype": "attribute",
            "name": "matrix",
            "type": "{Matrix4}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 41,
            "description": "Object cache, used to store the rendered objects state.",
            "itemtype": "attribute",
            "name": "cache",
            "type": "{Object}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 53,
            "description": "Main DOM element used for the renderer.",
            "itemtype": "attribute",
            "name": "domElement",
            "type": "{Element}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 63,
            "description": "Camera projected DOM element.",
            "itemtype": "attribute",
            "name": "domElement",
            "type": "{Element}",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 75,
            "description": "Get the size of the renderer.",
            "itemtype": "method",
            "name": "getSize",
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 85,
            "description": "Set the size of the renderer.\n\nThe size is also applie to the internal DOM division.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\css\\CSS3DRenderer.js",
            "line": 105,
            "description": "Render the CSS object of a scene using a camera.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "scene",
                    "description": "Scene to be rendered.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "Camera used to render the scene.",
                    "type": "Camera"
                }
            ],
            "class": "CSS3DRenderer",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 12,
            "description": "Canvas background color, optional only used if specified.\n\nDifferent from the clear color used to clear the render target.",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "{string}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 22,
            "description": "Prefered redering backend API to use if available.\n\nIf the selected backend is not available it defaults to WebGL.\n\nShader code might not be cross compatible between rendering backends.",
            "itemtype": "property",
            "name": "backend",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 34,
            "description": "Defines whether the renderer should automatically clear its output before rendering a frame.",
            "itemtype": "property",
            "name": "autoClear",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 42,
            "description": "Defines whether the renderer should clear the color buffer.",
            "itemtype": "property",
            "name": "autoClearColor",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 50,
            "description": "Defines whether the renderer should clear the depth buffer.",
            "itemtype": "property",
            "name": "autoClearDepth",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 58,
            "description": "Defines whether the renderer should clear the stencil buffer.",
            "itemtype": "property",
            "name": "autoClearStencil",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 66,
            "description": "Antialiasing flag.",
            "itemtype": "property",
            "name": "antialiasing",
            "type": "{boolean}",
            "default": "false",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 75,
            "description": "If true the program is rendered with shadows.",
            "itemtype": "property",
            "name": "shadows",
            "type": "{boolean}",
            "default": "true",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 84,
            "description": "Whether the drawing buffer has a stencil buffer of at least 8 bits.",
            "itemtype": "property",
            "name": "@stencil",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 92,
            "description": "Shadow map filtering type.",
            "itemtype": "property",
            "name": "shadowsType",
            "type": "{number}",
            "default": "PCFSoftShadowMap",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 101,
            "description": "Enables automatic updates to the shadows in the scene.\n\nIf you do not require dynamic lighting / shadows, you may set this to false.\n\nUse renderer.shadowMap.needsUpdate to update the shadow map.",
            "itemtype": "property",
            "name": "shadowsAutoUpdate",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 113,
            "description": "Tonemapping can be used to remap the color of the image to a different set giving the scene a different color mood and/or dynamic color based on global luminosity.",
            "itemtype": "property",
            "name": "toneMapping",
            "type": "{number}",
            "default": "NoToneMapping",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 122,
            "description": "Exposure level of tone mapping.",
            "itemtype": "property",
            "name": "toneMappingExposure",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 130,
            "description": "If true the renderer sorts the objects from back to front for rendering.\n\nImportant if using multiple transparent objects.",
            "itemtype": "property",
            "name": "sortObjects",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 140,
            "description": "Gamma factor applied to the image.",
            "itemtype": "property",
            "name": "gammaFactor",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 148,
            "description": "Shader precision. Can be \"highp\", \"mediump\" or \"lowp\". Defaults to \"highp\" if supported by the device.",
            "itemtype": "property",
            "name": "precision",
            "type": "{string}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 156,
            "description": "Whether the canvas contains an alpha (transparency) buffer or not.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 164,
            "description": "Whether the renderer will assume that colors have premultiplied alpha.",
            "itemtype": "property",
            "name": "premultipliedAlpha",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 172,
            "description": "Whether to preserve the buffers until manually cleared or overwritten.",
            "itemtype": "property",
            "name": "preserveDrawingBuffer",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 180,
            "description": "Provides a hint to the user agent indicating what configuration of GPU is suitable for this WebGL context. Can be \"high-performance\", \"low-power\" or \"default\".",
            "itemtype": "property",
            "name": "powerPreference",
            "type": "{string}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 188,
            "description": "Whether to use a logarithmic depth buffer. It may be neccesary to use this if dealing with huge differences in scale in a single scene.",
            "itemtype": "property",
            "name": "logarithmicDepthBuffer",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 196,
            "description": "Whether to use physically correct lighting mode.",
            "itemtype": "property",
            "name": "physicallyCorrectLights",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 204,
            "description": "Defines whether material shader programs are checked for errors during compilation and linkage process.",
            "itemtype": "property",
            "name": "checkShaderErrors",
            "type": "{boolean}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 212,
            "description": "The maximum number of MorphTargets allowed in a shader.",
            "itemtype": "property",
            "name": "maxMorphTargets",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 220,
            "description": "The maximum number of MorphNormals allowed in a shader.",
            "itemtype": "property",
            "name": "maxMorphNormals",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 241,
            "description": "Use WebGL 1.0 to render data.\n\nMost devices fully support WebGL 1.0 at this point, should work for any type of device.",
            "static": 1,
            "itemtype": "attribute",
            "name": "WEBGL",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 252,
            "description": "Use WebGL 2.0 to render data, should be faster for some types of data.\n\nAdditinal features of GLSL can be used in WebGL 2.0. Most mobile device still dont support WebGL 2.0.",
            "static": 1,
            "itemtype": "attribute",
            "name": "WEBGL2",
            "type": "{number}",
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererConfiguration.js",
            "line": 263,
            "description": "Create a THREE renderer object based on the renderer configuration.",
            "itemtype": "method",
            "name": "createRenderer",
            "return": {
                "description": "Renderer created from the configuration.",
                "type": "WebGLRenderer"
            },
            "class": "RendererConfiguration",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererState.js",
            "line": 23,
            "description": "Store the renderer state.",
            "itemtype": "method",
            "name": "backup",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "RendererState",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\renderer\\RendererState.js",
            "line": 42,
            "description": "Restore the renderer state.",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "RendererState",
            "module": "Postprocessing"
        },
        {
            "file": "source\\core\\resources\\Audio.js",
            "line": 47,
            "description": "Check if a file name refers to a supported audio file.",
            "itemtype": "method",
            "name": "fileIsAudio",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported audio format.",
                "type": "Boolean"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Audio.js",
            "line": 68,
            "description": "Get an WebAudio buffer to play the audio stored in this resources.\n\nThis method is asyncronous and the value is returned using a callback function.",
            "itemtype": "method",
            "name": "getAudioBuffer",
            "params": [
                {
                    "name": "context",
                    "description": "WebAudio context used to decode the audio data.",
                    "type": "AudioContext"
                },
                {
                    "name": "callback",
                    "description": "Callback funtion that receives an audio buffer as argument.",
                    "type": "Function"
                }
            ],
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Audio.js",
            "line": 86,
            "description": "Serialize audio data as json.\n\nAudio data is serialized in Base64.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 21,
            "description": "If true the font glyphs are reversed.",
            "itemtype": "property",
            "name": "reversed",
            "type": "{boolean}",
            "default": "false",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 30,
            "description": "Font data, can be an ArrayBuffer or JSON.",
            "itemtype": "property",
            "name": "font",
            "type": "{Object}",
            "default": "null",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 80,
            "description": "Check if a file name refers to a font file.",
            "itemtype": "method",
            "name": "fileIsFont",
            "static": 1,
            "params": [
                {
                    "name": "fname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the fname refers to a supported font format.",
                "type": "Boolean"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 102,
            "description": "Reverse the font glyphs.\n\nCan be used to fix fonts that have paths defined CW.",
            "itemtype": "method",
            "name": "reverseGlyphs",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 116,
            "description": "Load font from data using the TTF loader.",
            "itemtype": "method",
            "name": "loadTTF",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 128,
            "description": "Serialize font resource to json.\n\nFont data is stored as Base64 is present in a binary format, or JSON otherwise.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Font.js",
            "line": 170,
            "description": "Generate shapes from font data.\n\nThe shapes generated can be extruded to create 3D geometry.",
            "itemtype": "method",
            "name": "generateShapes",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "divisions",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "paths",
                "type": "Array"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 24,
            "description": "Image width (in pixels), if not available should be set -1.\n\nStores the real size of the image not the used to represent it, its obtained from the naturalWidth attribute of the image element.",
            "itemtype": "attribute",
            "name": "width",
            "type": "{number}",
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 34,
            "description": "Image height (in pixels), if not available should be set -1.\n\nStores the real size of the image not the used to represent it, its obtained from the naturalHeight attribute of the image element.",
            "itemtype": "attribute",
            "name": "height",
            "type": "{number}",
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 80,
            "description": "Check if a file name refers to a supported binary image file.",
            "static": 1,
            "itemtype": "method",
            "name": "fileIsImage",
            "params": [
                {
                    "name": "file",
                    "description": "File to check format of.",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported image format.",
                "type": "Boolean"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 105,
            "description": "Get the image size if its available, if the image size its not available it has to be loaded first.",
            "itemtype": "method",
            "name": "getImageSize",
            "params": [
                {
                    "name": "onLoad",
                    "description": "Callack method to get the image size, receives (width, height) as parameters.",
                    "type": "Function"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 134,
            "description": "Read the image data and return the raw pixel data of the image as a ImageData object.",
            "itemtype": "method",
            "name": "getImageData",
            "params": [
                {
                    "name": "onLoad",
                    "description": "Callback method to retrieve the image data, receives (data, width, height) as parameters.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Image data object with the content of the image object.",
                "type": "ImageData"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 164,
            "description": "Create a new image with 1x1 resolution with solid color.\n\nCan be called externally on data load error to load dummy data.",
            "itemtype": "method",
            "name": "createSolidColor",
            "params": [
                {
                    "name": "color",
                    "description": "CSS Color string.",
                    "type": "String"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 187,
            "description": "Load arraybuffer data to this image.\n\nCreates a blob with data to be stored on data atribute and used by external objects.",
            "itemtype": "method",
            "name": "loadArrayBufferData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be loaded.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "encoding",
                    "description": "Image enconding (jpeg, png, etc).",
                    "type": "String"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 207,
            "description": "Check if this image has alpha channel.\n\nThis checks the file encoding if the file a GIF or a PNG is assumed that the file has alpha channel.",
            "itemtype": "method",
            "name": "hasTransparency",
            "params": [
                {
                    "name": "perPixel",
                    "description": "Check every individual pixel to see if the image actually has tranparency data, default is false.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True if the image is encoded as PNG or GIF",
                "type": "Boolean"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 247,
            "description": "Compresses image data to JPEG.\n\nCan be used to compress data and save some space.",
            "itemtype": "method",
            "name": "compressJPEG",
            "params": [
                {
                    "name": "quality",
                    "description": "JPEG compression quality level by default 0.7 is used (1.0  means max quality).",
                    "type": "Number"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Image.js",
            "line": 293,
            "description": "Serialize Image resource to json.\n\nIf image is stored as URL it is converter to PNG or JPEG.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Model.js",
            "line": 20,
            "description": "List of file types supported for 3D models.",
            "itemtype": "property",
            "name": "extensions List of extensions.",
            "type": "{Array}",
            "class": "Model",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Model.js",
            "line": 28,
            "description": "Check if a file name refers to a 3D geometry file.",
            "itemtype": "method",
            "name": "fileIsFont",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the fname refers to a supported format.",
                "type": "Boolean"
            },
            "class": "Model",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 14,
            "description": "Resource name.\n\nNot required to be unique.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 24,
            "description": "UUID unique identifier.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{string}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 32,
            "description": "Resource type. Used to identify the type of the resource, usefull for serialization.",
            "itemtype": "property",
            "name": "type",
            "type": "{string}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 40,
            "description": "Data format (base64, arraybuffer, blob, url, chunk, ...).\n\nIndicates the format used to store the data.",
            "itemtype": "property",
            "name": "format",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 50,
            "description": "Data encoding (mp3, jpg, mp4, ...).\n\nIndicates how the data is encoded.",
            "itemtype": "property",
            "name": "encoding",
            "type": "{string | ArrayBuffer}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 60,
            "description": "Resource data.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 69,
            "description": "Export resource data to file.",
            "itemtype": "method",
            "name": "export",
            "params": [
                {
                    "name": "fname",
                    "description": "File name or file path.",
                    "type": "String"
                }
            ],
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 99,
            "description": "Dispose resource, should be called to free memory after its no longer required.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Resource.js",
            "line": 106,
            "description": "Serialize resource to json.\n\nOnly serializes name, uuid and type.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 1,
            "description": "Resource container contains resource of multiple types.",
            "itemtype": "method",
            "name": "ResourceContainer",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 8,
            "description": "Image resources.",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 16,
            "description": "Video resources.",
            "itemtype": "property",
            "name": "videos",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 24,
            "description": "Audio resources.",
            "itemtype": "property",
            "name": "audio",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 32,
            "description": "Fonts resources.",
            "itemtype": "property",
            "name": "fonts",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 40,
            "description": "Materials resources.",
            "itemtype": "property",
            "name": "materials",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 48,
            "description": "Textures resources.",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 56,
            "description": "Geometries resources.",
            "itemtype": "property",
            "name": "geometries",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 64,
            "description": "Generic resources, can be program data, code files etc.",
            "itemtype": "property",
            "name": "resources",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 72,
            "description": "Shapes resources, may be used to generate geometry data.",
            "itemtype": "property",
            "name": "shapes",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 80,
            "description": "Skeletons resources, use for the meshes to store their skeleton data.\n\nSkeletons can be shared between meshes.",
            "itemtype": "property",
            "name": "skeletons",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceContainer.js",
            "line": 93,
            "description": "Copy resources from another resource container into this one.",
            "itemtype": "method",
            "name": "copyResources",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 30,
            "description": "Dispose all the resources present in the resource manager.",
            "itemtype": "method",
            "name": "dispose",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 51,
            "description": "Remove geometry from the list and replace by other.",
            "itemtype": "method",
            "name": "removeGeometry",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Resource"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 70,
            "description": "Get resource by name.",
            "itemtype": "method",
            "name": "getResourceByName",
            "params": [
                {
                    "name": "name",
                    "description": "Resource name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Resource if found else null",
                "type": "Resource"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 91,
            "description": "Add resource to resources manager.",
            "itemtype": "method",
            "name": "addResource",
            "params": [
                {
                    "name": "Resource",
                    "description": "to add.",
                    "type": "Resource"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 105,
            "description": "Remove resource from font list.",
            "itemtype": "method",
            "name": "removeResource",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Resource"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 116,
            "description": "Get image by name.",
            "itemtype": "method",
            "name": "getImageByName",
            "params": [
                {
                    "name": "name",
                    "description": "Image name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Image if found else null",
                "type": "Image"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 137,
            "description": "Remove image.",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                }
            ],
            "itemtype": "method",
            "name": "removeImage",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 152,
            "description": "Get video by name.",
            "itemtype": "method",
            "name": "getVideoByName",
            "params": [
                {
                    "name": "name",
                    "description": "Video name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Video if found else null",
                "type": "Video"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 173,
            "description": "Remove video.",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                }
            ],
            "itemtype": "method",
            "name": "removeVideo",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 187,
            "description": "Get material by its name.",
            "itemtype": "method",
            "name": "getMaterialByName",
            "params": [
                {
                    "name": "name",
                    "description": "Material name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material if found else null",
                "type": "Material"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 208,
            "description": "Add material to materials list.",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be added",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 222,
            "description": "Remove material from materials list, also receives default material used to replace.",
            "itemtype": "method",
            "name": "removeMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be removed from manager.",
                    "type": "Material"
                },
                {
                    "name": "defaultMeshMaterial",
                    "description": "Default mesh material to replace objects mesh materials.",
                    "type": "Material"
                },
                {
                    "name": "defaultSpriteMaterial",
                    "description": "Defaul sprite material.",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 263,
            "description": "Get texture by name.",
            "itemtype": "method",
            "name": "getTextureByName",
            "params": [
                {
                    "name": "name",
                    "description": "Texture name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Texture is found else null.",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 284,
            "description": "Add texture to texture list.",
            "itemtype": "method",
            "name": "addTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 298,
            "description": "Remove texture from textures list (also receives default used to replace).",
            "itemtype": "method",
            "name": "removeTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "defaultTexture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "return": {
                "description": "Texture if found, else null",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 385,
            "description": "Get font by name.",
            "itemtype": "method",
            "name": "getFontByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Font if found, else null",
                "type": "Font"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 406,
            "description": "Add font to fonts list.",
            "itemtype": "method",
            "name": "addFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 420,
            "description": "Remove font from font list.",
            "itemtype": "method",
            "name": "removeFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                },
                {
                    "name": "defaultFont",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 448,
            "description": "Get audio by name.",
            "itemtype": "method",
            "name": "getAudioByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Audio if found, else null",
                "type": "Audio"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 469,
            "description": "Add audio to audio list.",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "addAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\ResourceManager.js",
            "line": 483,
            "description": "Remove audio resource from the manager, replace on objects that are using it with another resource.",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                },
                {
                    "name": "defaultAudio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "removeAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\TextFile.js",
            "line": 25,
            "description": "Check if a file name refers to a text file.",
            "itemtype": "method",
            "name": "fileIsText",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file is text.",
                "type": "Boolean"
            },
            "class": "TextFile",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\TextFile.js",
            "line": 48,
            "description": "Serialize File resource data to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "TextFile",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Video.js",
            "line": 45,
            "description": "Check if a file name refers to a supported video file.",
            "itemtype": "method",
            "name": "fileIsVideo",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported video format.",
                "type": "Boolean"
            },
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Video.js",
            "line": 66,
            "description": "Load arraybuffer data to this image.\n\nCreates a blob with data to be stored on data atribute and used by external objects.",
            "itemtype": "method",
            "name": "loadArrayBufferData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be loaded.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "encoding",
                    "description": "Video enconding (mp4, webm, etc).",
                    "type": "String"
                }
            ],
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "source\\core\\resources\\Video.js",
            "line": 86,
            "description": "Serialize resource to json.\n\nVideo data is stored in Base64.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 25,
            "description": "Image is used to store a DOM canvas element.",
            "itemtype": "property",
            "name": "image",
            "type": "{Element}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 39,
            "description": "Canvas width, internal resolution of the canvas texture.",
            "itemtype": "property",
            "name": "width",
            "type": "{number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 51,
            "description": "Canvas height, internal resolution of the canvas texture.",
            "itemtype": "property",
            "name": "height",
            "type": "{number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 67,
            "description": "Canvas context 2D, can be used to draw content do the canvas texture.",
            "itemtype": "property",
            "name": "context",
            "type": "{Context2D}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 80,
            "description": "Draw a placeholder figure into the canvas texture.",
            "itemtype": "method",
            "name": "placeholder",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 96,
            "description": "Clear canvas texture with a background color.\n\nUses the internal context to draw a rect to fill the canvas.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CanvasTexture.js",
            "line": 117,
            "description": "Create JSON description for canvas texture, canvas image is not serialized.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 42,
            "description": "Size of each one of the texture that compose the CubeTexture.",
            "itemtype": "property",
            "name": "size",
            "type": "{number}",
            "default": "512",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 53,
            "description": "Cube texture mode, the mode specifies how the cube texture is created.\n\nSource format may vary from a mode to another.",
            "itemtype": "property",
            "name": "mode",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 76,
            "description": "Cubemap right image index",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 84,
            "description": "Cubemap left image index",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 92,
            "description": "Cubemap top image index",
            "itemtype": "attribute",
            "name": "TOP",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 100,
            "description": "Cubemap bottom image index",
            "itemtype": "attribute",
            "name": "BOTTOM",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 108,
            "description": "Cubemap front image index",
            "itemtype": "attribute",
            "name": "FRONT",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 116,
            "description": "Cubemap back image index",
            "itemtype": "attribute",
            "name": "BACK",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 124,
            "description": "CubeMap mode, 6 images used as source for the texture.",
            "itemtype": "attribute",
            "name": "CUBE",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 132,
            "description": "CubeMap mode, single image used as source.",
            "itemtype": "attribute",
            "name": "CROSS",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 140,
            "description": "Equirectangular projection mode, 1 single image used as source.\n\nSource image should have a 2:1 aspect ratio.",
            "itemtype": "attribute",
            "name": "EQUIRECTANGULAR",
            "type": "{number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 151,
            "description": "Set resolution of each face of the cubemap.\n\nThe size has to be a power of 2.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "Cube face resolution.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 170,
            "description": "Set new images for this cube texture.",
            "itemtype": "method",
            "name": "setImages",
            "params": [
                {
                    "name": "images",
                    "description": "Cube texture images.",
                    "type": "Array"
                },
                {
                    "name": "mode",
                    "description": "Mode to be used.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 183,
            "description": "Updates the CubeTexture images, should be called after changing the images attached to the texture",
            "itemtype": "method",
            "name": "updateImages",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 273,
            "description": "Resample an image pixel from ImageData to ImageData, using bilinear interpolation.",
            "itemtype": "method",
            "name": "resampleBilinear",
            "params": [
                {
                    "name": "read",
                    "description": "Where to read data from.",
                    "type": "ImageData"
                },
                {
                    "name": "write",
                    "description": "Where to write data.",
                    "type": "ImageData"
                },
                {
                    "name": "x",
                    "description": "Origin pixel x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Origin pixel y.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Target index.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 311,
            "description": "Render a cube face from equirectangular projection.",
            "itemtype": "method",
            "name": "renderEquirectFace",
            "params": [
                {
                    "name": "read",
                    "description": "Equirectangular image.",
                    "type": "ImageData"
                },
                {
                    "name": "face",
                    "description": "Face to render.",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "Image rotation",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "Face size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Face data.",
                "type": "ImageData"
            },
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\CubeTexture.js",
            "line": 381,
            "description": "Serialize cube texture to JSON.\n\nAll images of the cube texture are stored individually.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 33,
            "description": "If true the animation plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 42,
            "description": "Animation speed in seconds.",
            "itemtype": "property",
            "name": "animationSpeed",
            "default": "0.1",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 61,
            "description": "Spritesheet number of frames horizontally.\n\nWhen this values is changed the totalFrames value is automatically updated to framesHorizontal * framesVertical.",
            "itemtype": "property",
            "name": "framesHorizontal",
            "default": "1.0",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 84,
            "description": "Spritesheet number of frames vertically.\n\nWhen this values is changed the totalFrames value is automatically updated to framesHorizontal * framesVertical.",
            "itemtype": "property",
            "name": "framesVertical",
            "default": "1.0",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 107,
            "description": "The offset frame can be ajusted to control in which frame the animation ends.",
            "itemtype": "property",
            "name": "endFrame",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 129,
            "description": "The offset frame can be ajusted to control in which frame the animation starts.",
            "itemtype": "property",
            "name": "beginFrame",
            "default": "0",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 153,
            "description": "Total number of frames present in the texture.\n\nSometimes a NxM spritesheet does not have all spaces filled, this parameter is used to take care of those cases.",
            "itemtype": "property",
            "name": "totalFrames",
            "default": "1",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 177,
            "description": "Indicates the current frame of the animation.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "{number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 200,
            "description": "Step the sprite sheet animation, move to next frame and recalculate the texture offset.",
            "itemtype": "method",
            "name": "step",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 219,
            "description": "Set animation playback speed.",
            "itemtype": "method",
            "name": "setAnimationSpeed",
            "params": [
                {
                    "name": "animationSpeed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 230,
            "description": "Set the sprite sheet grid dimension.\n\nAutomatically sets the totalFrame value to framesHorizontal * framesVertical.",
            "itemtype": "method",
            "name": "setFrameGrid",
            "params": [
                {
                    "name": "framesHorizontal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "framesVertical",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 248,
            "description": "Set frames to be used for this animation.\n\nFrame starts counting from 0.",
            "itemtype": "method",
            "name": "setAnimationFrames",
            "params": [
                {
                    "name": "beginFrame",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "endFrame",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 263,
            "description": "Dispose spritesheet texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\SpriteSheetTexture.js",
            "line": 275,
            "description": "Create texture json description.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 25,
            "description": "Source image of the texture.",
            "itemtype": "property",
            "name": "source",
            "type": "{Image}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 48,
            "description": "Name of the texture (doesn't need to be unique).",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 57,
            "description": "Flag used to know is the texture has been disposed.\n\nIs used to control animation when using a gif as a texture.",
            "itemtype": "property",
            "name": "disposed",
            "type": "{boolean}",
            "default": "false",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 94,
            "description": "Should be called after updating the source of the texture.\n\nWill copy the source data to the texture for upload to the GPU.",
            "itemtype": "method",
            "name": "updateSource",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 131,
            "description": "Dispose texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 143,
            "description": "Create JSON description for texture, serializes image used in the texture\nTexture serialization is different inside Freedom World Editor, the Texture class does not serialize any image data.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 160,
            "description": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{string}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 166,
            "description": "How much a single repetition of the texture is offset from the beginning, in each direction U and V.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 172,
            "description": "How many times the texture is repeated across the surface, in each direction U and V.  If repeat is set greater than 1 in either direction, the corresponding Wrap parameter should also be set to .",
            "itemtype": "property",
            "name": "repeat",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 178,
            "description": "Indicates where the center of rotation is. To rotate around the center point set this value to (0.5, 0.5).",
            "itemtype": "property",
            "name": "center",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 184,
            "description": "How much the texture is rotated around the center point, in radians. Postive values are counter-clockwise.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{number}",
            "default": "0",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 191,
            "description": "False by default, which is the norm for PNG images. Set to true if the RGB values have been stored premultiplied by alpha.",
            "itemtype": "property",
            "name": "premultiplyAlpha",
            "type": "{boolean}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 197,
            "description": "Flips the image's Y axis to match the WebGL texture coordinate space.",
            "itemtype": "property",
            "name": "flipY",
            "type": "{boolean}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 203,
            "description": "Array of user-specified mipmaps (optional).",
            "itemtype": "property",
            "name": "mipmaps",
            "type": "{Array}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\Texture.js",
            "line": 209,
            "description": "DOM element attached to the texture",
            "itemtype": "property",
            "name": "image",
            "type": "{Element}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 29,
            "description": "If true the video starts playing automatically.",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 38,
            "description": "If true the video plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 47,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 56,
            "description": "Video audio volume, its a values between 1.0 and 0.0.",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 65,
            "description": "Image is used to store a DOM video element.",
            "itemtype": "property",
            "name": "image",
            "type": "{Element}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 77,
            "description": "Video source resource.",
            "itemtype": "property",
            "name": "video",
            "type": "{Video}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 107,
            "description": "Set the video source to be used.\n\nCan be a Video, VideoStream or a URL String.",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video | VideoStream | string"
                }
            ],
            "itemtype": "method",
            "name": "setVideo",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 128,
            "description": "Set video time in seconds.",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setTime",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 139,
            "description": "Set loop mode.",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 151,
            "description": "Set video volume.",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setVolume",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 163,
            "description": "Set autoplay value.\n\nIf the image is already playing it will not stop playing.",
            "itemtype": "method",
            "name": "setAutoPlay",
            "params": [
                {
                    "name": "value",
                    "description": "If true the video will play automatically.",
                    "type": "Boolean"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 177,
            "description": "Set video playback speed.",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 189,
            "description": "Pause video playback.",
            "itemtype": "method",
            "name": "pause",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 202,
            "description": "Start playing video.",
            "itemtype": "method",
            "name": "play",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 215,
            "description": "Dispose video texture.\n\nStops the video and cleans the DOM video element inside the VideoTexture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\VideoTexture.js",
            "line": 233,
            "description": "Create Video texture json description.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 22,
            "description": "Image is used to store a DOM video element",
            "itemtype": "property",
            "name": "image",
            "type": "{Element}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 38,
            "description": "Webcam video, media stream",
            "itemtype": "property",
            "name": "stream",
            "type": "{MediaStream}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 64,
            "description": "Prefer the front facing camera.",
            "static": 1,
            "itemtype": "attribute",
            "name": "USER",
            "type": "{number}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 73,
            "description": "Prefer the back camera.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ENVIRONMENT",
            "type": "{number}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 86,
            "description": "Connect to camera.",
            "itemtype": "method",
            "name": "connect",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 129,
            "description": "Disconnect from camera.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 146,
            "description": "Dispose webcam texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\texture\\WebcamTexture.js",
            "line": 164,
            "description": "Serialize webcam texture to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata.",
                    "type": "Object"
                }
            ],
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 7,
            "description": "Folded attribute is used only for editing, if true the object shows as folded in the object explorer.",
            "itemtype": "property",
            "name": "folded",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 15,
            "description": "Indicates if the object is locked. A locked object cannot be edited.",
            "itemtype": "property",
            "name": "locked",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 23,
            "description": "Check if this object contains a object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "object",
                    "description": "Object to look for.",
                    "type": "THREE.Object3D"
                }
            ],
            "return": {
                "description": "True if this object contains the object.",
                "type": "Boolean"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 43,
            "description": "Play animations attached to this object.\n\nAnimations rely on other objects, if some of these are missing the animation will have problems playing.",
            "itemtype": "method",
            "name": "playAnimation",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 58,
            "description": "Stop all animations playback.",
            "itemtype": "method",
            "name": "stopAnimation",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 71,
            "description": "Initializes the object.\n\nThis method is calling one time on initialization.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 88,
            "description": "Update the object state.\n\nCalled every time before rendering into the screen.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "Time since last update call.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 104,
            "description": "Resize this object, called everytime the window is resized.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Screen width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Screen height.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 113,
            "description": "Disposes the object from memory.\n\nShould be called when the object is no longer required to avoid memory leaks.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 128,
            "description": "Add object as children of this object above the indicated children",
            "itemtype": "method",
            "name": "addAbove",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "THREE.Object3D"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 165,
            "description": "Add object as children of this object bellow the indicated children",
            "itemtype": "method",
            "name": "addBellow",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "THREE.Object3D"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 202,
            "description": "Get scene that contains this object.",
            "itemtype": "method",
            "name": "getScene",
            "return": {
                "description": "scene",
                "type": "THREE.Object3D"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 225,
            "description": "Remove all children from the object.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 238,
            "description": "Check if object is empty (has no childrens).",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True is object is empty",
                "type": "Boolean"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 249,
            "description": "Destroy object, dispose and remove from its parent.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 273,
            "description": "Serialize the object data to JSON. Should serialize all attributes and resources used by the object.\n\nParsing of the data serialized is performed using the ObjectLoader class.\n\nThe objects being serialized share a \"meta\" object where the resources can be stored to avoid repetition in the serialized data.\n\nOn the root object the meta object does not need to be initialized manually it is automatically created, to access resource the resourceAccess callback should be used.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Resource storage passed to all resources toJSON for self storage.",
                    "type": "Object"
                },
                {
                    "name": "resourceAccess",
                    "description": "Callback method used to access the resources receives (meta, object) as parameters, meta is the resource storage and object is the current serialized status of the object new attributes can be added here.",
                    "type": "Function"
                },
                {
                    "name": "recursive",
                    "description": "If true the method will call toJSON for all available children and store the result in children attribute.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json Output JSON will all data serialized, this can be stores in file or transfered to later be loaded using the ObjectLoader.",
                "type": "Object"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 462,
            "description": "Array with object's children.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 468,
            "description": "When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object. Otherwise the object gets renderered every frame even if it isn't visible.",
            "itemtype": "property",
            "name": "frustumCulled",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 475,
            "description": "The layer membership of the object. The object is only visible if it has at least one layer in common with the Camera in use.",
            "itemtype": "property",
            "name": "layers",
            "type": "{Layers}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 481,
            "description": "The local transform matrix",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 487,
            "description": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property.",
            "itemtype": "property",
            "name": "matrixAutoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 494,
            "description": "The global transform of the object. If the Object3D has no parent, then it's identical to the local transform.",
            "itemtype": "property",
            "name": "matrixWorld",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 500,
            "description": "Name of the object (doesn't need to be unique).",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 506,
            "description": "The object's local position.",
            "itemtype": "property",
            "name": "position",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 512,
            "description": "Object's local rotation as a Quaternion.",
            "itemtype": "property",
            "name": "quaternion",
            "type": "{Quaternion}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 518,
            "description": "Object's local rotation (see Euler angles), in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Euler}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 524,
            "description": "The object's local scale.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 530,
            "description": "This is used by the lookAt method, for example, to determine the orientation of the result.",
            "itemtype": "property",
            "name": "up",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 536,
            "description": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{string}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 542,
            "description": "Object gets rendered if true.",
            "itemtype": "property",
            "name": "visible",
            "type": "{boolean}",
            "default": "true",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 549,
            "description": "This value allows the default rendering order of scene graph objects to be overridden although opaque and transparent objects remain sorted independently.",
            "itemtype": "property",
            "name": "renderOrder",
            "default": "0",
            "type": "{number}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 556,
            "description": "Whether the object gets rendered into shadow map.",
            "itemtype": "property",
            "name": "castShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 563,
            "description": "Whether the material receives shadows.",
            "itemtype": "property",
            "name": "receiveShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 570,
            "description": "Space reserved for user data, can be used for variables in runtime or can be used by scripts to store values on an object.",
            "itemtype": "property",
            "name": "userData",
            "type": "{Object}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 576,
            "description": "Array with the animations available in this object.\n\nEach position contains an AnimationClip that has name, tracks, duration and uuid.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Array}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 585,
            "description": "Remove children from this object",
            "params": [
                {
                    "name": "objects",
                    "description": "Removes object as child of this object. An arbitrary number of objects may be removed.",
                    "type": "Object3D"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 592,
            "description": "Rotates the object to face a point in world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A vector representing a position in world space.",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "lookAt",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 599,
            "description": "Converts the vector from local space to world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "vector representing a position in local (object) space.",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "localToWorld",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 606,
            "description": "Updates the vector from world space to local space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A world vector",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "worldToLocal",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 613,
            "description": "Adds object as child of this object. An arbitrary number of objects may be added.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 620,
            "description": "This updates the position, rotation and scale with the matrix.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 627,
            "description": "Returns a clone of this object and optionaly all descendants.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also cloned. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 634,
            "description": "Copy the given object into this object.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also copied. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 642,
            "description": "Searches through the object's children and returns the first with a matching name.",
            "params": [
                {
                    "name": "name",
                    "description": "String to match to the children's Object3D.name property.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByName",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 649,
            "description": "Searches through the object's children and returns the first with a property that matches the aclue given.",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to search for.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the given property.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByProperty",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 657,
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "Target to set the result. Otherwise, a new Vector3 is instantiated.",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "Returns a vector representing the position of the object in world space.",
                "type": "Vector3"
            },
            "itemtype": "method",
            "name": "getWorldPosition",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 663,
            "description": "Returns a quaternion representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldQuaternion",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Quaternion, otherwise a new Quaternion will be created.",
                    "type": "Quaternion"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 670,
            "description": "Returns a vector of the scaling factors applied to the object for each axis in world space.",
            "itemtype": "method",
            "name": "getWorldScale",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 677,
            "description": "Returns a vector representing the direction of object's positive z-axis in world space.",
            "itemtype": "method",
            "name": "getWorldDirection",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 684,
            "description": "Rotate an object along an axis in object space. The axis is assumed to be normalized..",
            "itemtype": "method",
            "name": "rotateOnAxis",
            "params": [
                {
                    "name": "axis",
                    "description": "A normalized vector in object space.",
                    "type": "Vector3"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 692,
            "description": "Rotates the object around x axis in local space.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 699,
            "description": "Rotates the object around y axis in local space.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\core\\Object3D.js",
            "line": 706,
            "description": "Rotates the object around z axis in local space.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\materials\\Material.js",
            "line": 12,
            "description": "Dispose material.\n\nAlso disposes all the textures attached to the material.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\materials\\Material.js",
            "line": 43,
            "description": "Serialize material to JSON data.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON data.",
                "type": "Object"
            },
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 40,
            "description": "Parse skeleton from JSON data, for a specific object.",
            "static": 1,
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "data",
                    "description": "JSON encoded data.",
                    "type": "Object"
                },
                {
                    "name": "object",
                    "description": "Target object that has this skeleton.",
                    "type": "Object3D"
                },
                {
                    "name": "resources",
                    "description": "Resource container to read resouce data.",
                    "type": "ResourceContainer"
                }
            ],
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 73,
            "description": "The array of bones. Note this is a copy of the original array, not a reference, so you can modify the original array without effecting this one.",
            "itemtype": "property",
            "name": "bones",
            "type": "{Array}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 80,
            "description": "The array buffer holding the bone data when using a vertex texture.",
            "itemtype": "property",
            "name": "boneMatrices",
            "type": "{ArrayBuffer}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 87,
            "description": "An array of Matrix4s that represent the inverse of the matrixWorld of the individual bones.\n\nUse the supplied bone inverses or calculate the inverses.",
            "itemtype": "property",
            "name": "boneInverses",
            "type": "{Array}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "source\\core\\three\\objects\\Skeleton.js",
            "line": 96,
            "description": "The DataTexture holding the bone data when using a vertex texture.",
            "itemtype": "property",
            "name": "boneTexture",
            "type": "{DataTexture}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "source\\core\\three\\scenes\\Fog.js",
            "line": 10,
            "description": "No fog",
            "itemtype": "attribute",
            "name": "NONE",
            "type": "{number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\scenes\\Fog.js",
            "line": 18,
            "description": "Linear fog",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "{number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "source\\core\\three\\scenes\\Fog.js",
            "line": 26,
            "description": "Exponential fog",
            "itemtype": "attribute",
            "name": "EXPONENTIAL",
            "type": "{number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 10,
            "description": "Create arraybuffer from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 31,
            "description": "Create arraybuffer from base64 string",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 68,
            "description": "Create arraybuffer from Nodejs buffer",
            "itemtype": "method",
            "name": "fromBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 11,
            "description": "Charset used to encode binary data.",
            "itemtype": "attribute",
            "name": "encoding",
            "type": "{string}",
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 19,
            "description": "Check if some data is encoded as base64.\n\nThis is a fast test that picks some random position in the string to check if they are valid base64 characters.",
            "itemtype": "method",
            "name": "isBase64",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be tested.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if data is base64 encoded, false otherwise.",
                "type": "Boolean"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 53,
            "description": "Remove base64 header from data.\n\nUsefull for removing the heander from image, audio, video, etc.",
            "itemtype": "method",
            "name": "removeHeader",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 67,
            "description": "Get the file format present in the base64 string.",
            "itemtype": "method",
            "name": "getFileFormat",
            "params": [
                {
                    "name": "data",
                    "description": "Base64 data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File format present in the JSON data.",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 82,
            "description": "Create base64 string from arraybuffer.",
            "itemtype": "method",
            "name": "fromArraybuffer",
            "params": [
                {
                    "name": "arraybuffer",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\Base64Utils.js",
            "line": 137,
            "description": "Create base64 string from binary string.",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\BufferUtils.js",
            "line": 10,
            "description": "Create nodejs buffer from arraybuffer",
            "itemtype": "method",
            "name": "fromArrayBuffer",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "return": {
                "description": "buffer",
                "type": "Buffer"
            },
            "class": "BufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\binary\\ByteArrayUtils.js",
            "line": 12,
            "description": "Create byte array from base64 string data.",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Array"
            },
            "class": "ByteArrayUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\Tree.js",
            "line": 21,
            "description": "Add new element to tree.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "tree",
                    "description": "Object to be added to the three, if object is not a tree a new tree is created automatically.",
                    "type": "Object"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\Tree.js",
            "line": 44,
            "description": "Remove element from tree.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "tree",
                    "description": "Element to be removed from the three",
                    "type": "Tree"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\Tree.js",
            "line": 64,
            "description": "Clone tree recursively.\n\nThe cloned tree has the same UUID.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned tree.",
                "type": "Tree"
            },
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\Tree.js",
            "line": 86,
            "description": "Print tree into console, recursively.",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "level",
                    "description": "Recursive parameter, not required.",
                    "type": "Number"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\TreeUtils.js",
            "line": 13,
            "description": "Flag used to indicate ADDED diff.",
            "itemtype": "attribute",
            "name": "DIFF_ADDED",
            "type": "{number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\TreeUtils.js",
            "line": 21,
            "description": "Flag used to indicate REMOVED diff.",
            "itemtype": "attribute",
            "name": "DIFF_REMOVED",
            "type": "{number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\TreeUtils.js",
            "line": 29,
            "description": "Flag used to indicate MOVED diff.",
            "itemtype": "attribute",
            "name": "DIFF_MOVED",
            "type": "{number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\struct\\TreeUtils.js",
            "line": 37,
            "description": "Compare two trees and return list of changes.\n\noldTree is compared to newTree. The list of changes indicate wath needs to be changed in oldTree to become wqual to the newTree.\n\nElements inside Trees are compared using their UUID.\n\nThe array returned from this method contains objects in the format {status:<Operation>, uuid: <UUID>, from: <Tree>, to: <Tree>}",
            "static": 1,
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "oldTree",
                    "description": "Old version of Tree.",
                    "type": "Tree"
                },
                {
                    "name": "newTree",
                    "description": "New version of Tree.",
                    "type": "Tree"
                },
                {
                    "name": "diffs",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                },
                {
                    "name": "pathOldTree",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                },
                {
                    "name": "pathNewTree",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array with diffs between oldTree and newTree.",
                "type": "Array"
            },
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 13,
            "description": "Task of the timer, executed at the timer defined rate.",
            "itemtype": "attribute",
            "name": "callback",
            "type": "{Function}",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 20,
            "description": "Indicates if the timer is currently running, it is set to true on start and reset to false on stop.",
            "itemtype": "attribute",
            "name": "running",
            "type": "{boolean}",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 28,
            "description": "ID of the currently waiting timeout clock. Used to cancel the already request execution of the next clock tick.",
            "itemtype": "attribute",
            "name": "running",
            "type": "{number}",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 37,
            "description": "Start timer, is the timer is already running dosen't do anything.",
            "itemtype": "method",
            "name": "start",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 65,
            "description": "Stop animation timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 13,
            "description": "Task of the timer, executed at the timer defined rate.",
            "itemtype": "attribute",
            "name": "callback",
            "type": "{Function}",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 21,
            "description": "Period of the timer in milliseconds.",
            "itemtype": "attribute",
            "name": "time",
            "type": "{number}",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 29,
            "description": "Indicates if the timer is currently running, it is set to true on start and reset to false on stop.",
            "itemtype": "attribute",
            "name": "running",
            "type": "{boolean}",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 37,
            "description": "ID of the currently waiting timeout clock. Used to cancel the already request execution of the next clock tick.",
            "itemtype": "attribute",
            "name": "running",
            "type": "{number}",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 46,
            "description": "Start timer, is the timer is already running dosen't do anything.\n\nThe callback is called right after starting the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\timer\\Timer.js",
            "line": 76,
            "description": "Stop timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 23,
            "description": "Size of this worker pool.",
            "itemtype": "attribute",
            "name": "size",
            "type": "{Number}",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 31,
            "description": "Javascript file for the workers.",
            "itemtype": "attribute",
            "name": "file",
            "type": "{String}",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 39,
            "description": "List of worker of this pool.",
            "itemtype": "attribute",
            "name": "workers",
            "type": "{Array}",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 47,
            "description": "Worker index to be used for the next task.",
            "itemtype": "attribute",
            "name": "next",
            "type": "{Number}",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 56,
            "description": "Tasks waiting to be processed.",
            "itemtype": "attribute",
            "name": "tasks",
            "type": "{Array}",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 65,
            "description": "Create workers for this pool.",
            "itemtype": "method",
            "name": "createWorkers",
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerPool.js",
            "line": 106,
            "description": "Create task to be executed in this pool.",
            "itemtype": "method",
            "name": "runTask",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be sent to the worker.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to be called by the worker after processing the data sent.",
                    "type": "Function"
                }
            ],
            "class": "WorkerPool",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerTask.js",
            "line": 12,
            "description": "Worker task identifier.",
            "itemtype": "attribute",
            "name": "uuid",
            "type": "{String}",
            "class": "WorkerTask",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerTask.js",
            "line": 20,
            "description": "Data to be sent to the worker.",
            "itemtype": "attribute",
            "name": "data",
            "type": "{Object}",
            "class": "WorkerTask",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\worker\\WorkerTask.js",
            "line": 28,
            "description": "Function called when the task finishes.",
            "itemtype": "attribute",
            "name": "callback",
            "type": "{Function}",
            "class": "WorkerTask",
            "module": "BinaryUtils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 14,
            "description": "Stores all events in the manager, their target and callback.\n\nFormat [target, event, callback, active]",
            "itemtype": "attribute",
            "name": "events",
            "type": "{Array}",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 25,
            "description": "Add and create and event to the event manager.\n\nCreates the event and attaches it to the DOM element immediatly.",
            "itemtype": "method",
            "name": "addCreate",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element.",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "Event name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 44,
            "description": "Remove and destroy event(s) from a DOM element and from the manager.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element to remove elements from.",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "Event name to be removed.",
                    "type": "String"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 71,
            "description": "Add new event to the manager, the event is not created immediatly the create() method had to be called to create the event.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element.",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "Event name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 84,
            "description": "Destroys this manager by stopping all event handlers and remove them from the manager.",
            "itemtype": "method",
            "name": "clear",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 95,
            "description": "Creates the events in this manager by attaching them to the DOM elements.\n\nUses the element.addEventListener() method to attach the event handlers.",
            "itemtype": "method",
            "name": "create",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 112,
            "description": "Destroy all events in this manager, stop the events.\n\nUses the element.removeEventListener() method to destroy the event handlers.\n\nDoes not remove the events from the manager.",
            "itemtype": "method",
            "name": "destroy",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\EventManager.js",
            "line": 131,
            "description": "Add a scroll event to a target element.",
            "itemtype": "method",
            "name": "addScrollEvent",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element.",
                    "type": "Element"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\LocalStorage.js",
            "line": 10,
            "description": "Store value in the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\LocalStorage.js",
            "line": 30,
            "description": "Get value from the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value obtained from the storage.",
                "type": "Object"
            },
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\LocalStorage.js",
            "line": 52,
            "description": "Check if a key exists in the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the key exists false otherwise.",
                "type": "Boolean"
            },
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\LocalStorage.js",
            "line": 65,
            "description": "Delete a key from the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\MathUtils.js",
            "line": 10,
            "description": "Value of PI*2. 360 degrees.",
            "itemtype": "attribute",
            "name": "pi2",
            "type": "{number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\MathUtils.js",
            "line": 18,
            "description": "Value of PI/3. 60 degrees.",
            "itemtype": "attribute",
            "name": "pid3",
            "type": "{number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\MathUtils.js",
            "line": 26,
            "description": "Value of PI/2. 45 degrees.",
            "itemtype": "attribute",
            "name": "pid2",
            "type": "{number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\MathUtils.js",
            "line": 34,
            "description": "Generates a random color code.\n\nUses the #RRGGBB format.",
            "itemtype": "method",
            "name": "randomColor",
            "return": {
                "description": "Generated color code.",
                "type": "String"
            },
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 12,
            "description": "Get object tree root by traversing the tree upwards.\n\nFor a object placed inside a running scene the root is always the program.",
            "itemtype": "method",
            "name": "getRoot",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "root",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 33,
            "description": "Scale and center object into a unitary box.\n\nUseful to scale objects to fit into a known size box.",
            "itemtype": "method",
            "name": "centerUnitary",
            "params": [
                {
                    "name": "object",
                    "description": "Object to be positioned and scaled.",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 61,
            "description": "Calculates a bounding box for an object considering all its children.\n\nIncludes booth the object and all of its children, the box is adjusted to world space coordinates.",
            "itemtype": "method",
            "name": "calculateBoundingBox",
            "params": [
                {
                    "name": "object",
                    "description": "Root object to be traversed.",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Bounding box of the object considering all of its children.",
                "type": "Box3"
            },
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 120,
            "description": "Recalculate all children origins, to be centered with their geometry.",
            "itemtype": "method",
            "name": "centerGeometryOrigin",
            "params": [
                {
                    "name": "object",
                    "description": "Object to recalculate origin of.",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\ObjectUtils.js",
            "line": 147,
            "description": "Covert all the geometries found in the object to BufferGeometry format.",
            "itemtype": "method",
            "name": "convertToBufferGeometry",
            "params": [
                {
                    "name": "object",
                    "description": "Object to search for geometries",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 18,
            "description": "Type is used to identify the type of physics shapes:\n- BOX\n- CYLINDER\n- SPHERE\n- HULL",
            "itemtype": "attribute",
            "name": "Type",
            "type": "{Object}",
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 36,
            "description": "Given a Object3D instance, creates a corresponding CANNON shape.",
            "itemtype": "method",
            "name": "createShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "type",
                    "description": "PhysicsGenerator.Type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Shape"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 98,
            "description": "Create box shape from geometry.",
            "itemtype": "method",
            "name": "createBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 121,
            "description": "Bounding box needs to be computed with the entire mesh, not just geometry.",
            "itemtype": "method",
            "name": "createBoundingBoxShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 148,
            "description": "Computes 3D convex hull as a ConvexPolyhedron.\n\nA convex hull is a convex geometry that contain all the geometry points inside.",
            "itemtype": "method",
            "name": "createConvexPolyhedron",
            "params": [
                {
                    "name": "object",
                    "description": "Object to calculate the convex hull.",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Convex polyhedron calculated from thr object meshes.",
                "type": "ConvexPolyhedron"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 189,
            "description": "Create cylinder shape from geometry.",
            "itemtype": "method",
            "name": "createCylinderShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Cylinder"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 207,
            "description": "Create cylinder shape from bounding cylinder calculated from bounding box and bouding sphere.",
            "itemtype": "method",
            "name": "createBoundingCylinderShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Cylinder"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 235,
            "description": "Plane shape from geometry.",
            "itemtype": "method",
            "name": "createPlaneShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 250,
            "description": "Sphere shape from geometry.",
            "itemtype": "method",
            "name": "createSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Sphere"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 262,
            "description": "Sphere shape from bouding sphere.",
            "itemtype": "method",
            "name": "createBoundingSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Sphere"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 277,
            "description": "Cylinder shape from bounding sphere.",
            "itemtype": "method",
            "name": "createTubeShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Trimesh"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 291,
            "description": "Trimesh shape from geometry. Trimesh objects represent the object exactly with all the triangles that compose the original geometry\n\nThis type of physics shape should be avoided as much as possible since it is a lot slower that other available types.",
            "itemtype": "method",
            "name": "createTrimeshShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "Trimesh"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 312,
            "description": "Returns a single geometry for the given object.\n\nIf the object is compound, its geometries are automatically merged.",
            "itemtype": "method",
            "name": "getGeometry",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Geometry that contains all merger geometry",
                "type": "Geometry"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 376,
            "description": "Get geometry vertices.",
            "itemtype": "method",
            "name": "getVertices",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\PhysicsGenerator.js",
            "line": 393,
            "description": "Returns a array of Mesh instances from the given object.\n\nIf nested transformations are found, they are applied to child meshes as mesh.userData.matrix, so that each mesh has its position/rotation/scale independently of all of its parents except the top-level object.",
            "itemtype": "method",
            "name": "getMeshes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "meshes found inside the Object3D",
                "type": "Array"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\UnitConverter.js",
            "line": 12,
            "description": "Scale levels.\n\nIs a map containing the scale symbol and its value.",
            "static": 1,
            "itemtype": "attribute",
            "name": "scales",
            "type": "{Map}",
            "class": "UnitConverter",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\UnitConverter.js",
            "line": 41,
            "description": "List of known units.\n\nIt a map containing sub maps that contains methods that allow getting to the unit refered.",
            "static": 1,
            "itemtype": "attribute",
            "name": "units",
            "type": "{Map}",
            "class": "UnitConverter",
            "module": "Physics"
        },
        {
            "file": "source\\core\\utils\\UnitConverter.js",
            "line": 72,
            "description": "Convert a unit form one input unit to another unit.",
            "static": 1,
            "itemtype": "method",
            "name": "convert",
            "params": [
                {
                    "name": "value",
                    "description": "Input value to be converted.",
                    "type": "Number"
                },
                {
                    "name": "inUnit",
                    "description": "Input original unit.",
                    "type": "Number"
                },
                {
                    "name": "outUnit",
                    "description": "Input output unit.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Retuns the value converted based on input and output units, if the value cannot be converted returns null.",
                "type": "Number"
            },
            "class": "UnitConverter",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 12,
            "description": "The rendered image is drawn without allowing any pass-through imagery. This is primarily used by fully-immersive VR headsets.",
            "static": 1,
            "itemtype": "attribute",
            "name": "OPAQUE",
            "type": "{string}",
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 21,
            "description": "Primarily used by AR devices with transparent lenses which directly allow reality to pass through to the user's eyes.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ADDITIVE",
            "type": "{string}",
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 30,
            "description": "Used by headsets or goggles which use cameras to capture the real world and display it digitally on the screen or screens used to render the content for the user to see, this offers a way to create an AR presentation using a VR device.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ALPHA_BLEND",
            "type": "{string}",
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 39,
            "description": "Flag checking if there is support for XR immersive AR mode.",
            "itemtype": "attribute",
            "name": "webXRSupported",
            "type": "{boolean}",
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 47,
            "description": "WebXR session if there is one active.",
            "itemtype": "attribute",
            "name": "webXRSession",
            "type": "{XRSession}",
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 55,
            "description": "Check if there is any AR API available, on the device.\n\nChecks if there is support for WebAR or WebXR.",
            "itemtype": "method",
            "name": "arAvailable",
            "return": {
                "description": "True if the browser supports AR.",
                "type": "Boolean"
            },
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 68,
            "description": "Enter virtual reality mode using WebXR or WebAR depending on the API available.\n\nIf booth API are available the WebXR API is used.\n\nWhen displaying AR content the display.requestAnimationFrame should be used to call the render method.",
            "itemtype": "method",
            "name": "enterAR",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer used to draw the scene.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "onSuccess",
                    "description": "Method called if the application entered AR successfully.",
                    "type": "Function"
                }
            ],
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 108,
            "description": "Enter virtual reality mode, if the application is not running on AR mode does not do anything.",
            "itemtype": "method",
            "name": "exitAR",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer used to draw the scene.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\ARHandler.js",
            "line": 126,
            "description": "Get WebXR session.",
            "itemtype": "method",
            "name": "getXRSession",
            "return": {
                "description": "Promise used to get the XR session, receives the session as argument.",
                "type": "Promise"
            },
            "class": "ARHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 12,
            "description": "Flag checking if there is support for XR immersive VR mode.\n\nChecked on the library startup if XR is supported, while the check does not finish it is set to null.",
            "itemtype": "attribute",
            "name": "webXRSupported",
            "type": "{boolean}",
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 22,
            "description": "WebXR session if there is one active.",
            "itemtype": "attribute",
            "name": "webXRSession",
            "type": "{XRSession}",
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 30,
            "description": "Flag indicating if there are any VR displays available.\n\nChecked on the library bootup if WebVR is available, while the check does not finish it is set to null.",
            "itemtype": "attribute",
            "name": "webVRHasDisplay",
            "type": "{boolean}",
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 40,
            "description": "WebVR display if there is one active.",
            "itemtype": "attribute",
            "name": "webVRDisplay",
            "type": "{VRDisplay}",
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 48,
            "description": "Check if there is any VR API available, on the device.\n\nChecks if there is support for WebVR or WebXR.",
            "itemtype": "method",
            "name": "vrAvailable",
            "return": {
                "description": "True if the browser supports vr.",
                "type": "Boolean"
            },
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 61,
            "description": "Enter virtual reality mode using WebXR or WebVR depending on the API available.\n\nIf booth API are available the WebXR API is used.\n\nWhen displaying VR content the display.requestAnimationFrame should be used to call the render method.",
            "itemtype": "method",
            "name": "enterVR",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer used to draw the scene.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "onSuccess",
                    "description": "Method called if the application entered VR successfully.",
                    "type": "Function"
                }
            ],
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 122,
            "description": "Enter virtual reality mode, if the application is not running on VR mode does not do anything.",
            "itemtype": "method",
            "name": "exitVR",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer used to draw the scene.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 151,
            "description": "Get WebXR session.",
            "itemtype": "method",
            "name": "getXRSession",
            "return": {
                "description": "Promise used to get the XR session, receives the session as argument.",
                "type": "Promise"
            },
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\xr\\VRHandler.js",
            "line": 169,
            "description": "Used to get the first VR display available, the display is returned as argument of the onDisplay function.",
            "itemtype": "method",
            "name": "getVRDisplays",
            "return": {
                "description": "Promise used to get the display, receives the display as argument.",
                "type": "Promise"
            },
            "class": "VRHandler",
            "module": "Physics"
        },
        {
            "file": "source\\core\\App.js",
            "line": 22,
            "description": "Program",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 30,
            "description": "Graphics renderer in use by this app instance",
            "itemtype": "property",
            "name": "renderer",
            "type": "{Renderer}",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 38,
            "description": "Runtime control, if true the app is running.",
            "itemtype": "property",
            "name": "running",
            "type": "{boolean}",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 46,
            "description": "Flag used to control if the canvas element is resized automatically by the app instance.\n\nIf true the canvas is resized whether the resize method is called.",
            "itemtype": "property",
            "name": "canvasFitWindow",
            "type": "{boolean}",
            "default": "false if a canvas is provided, else true",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 57,
            "description": "Canvas used to render graphics.",
            "itemtype": "property",
            "name": "canvas",
            "type": "{Element}",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 65,
            "description": "Event manager used to create and manage events for this app.",
            "itemtype": "property",
            "name": "events",
            "type": "{EventManager}",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 84,
            "description": "Load a application and attach it to the canvas indicated.\n\nThis method automatically creates resize events, this single line should be enough to make a app run in a webpage.",
            "static": 1,
            "itemtype": "method",
            "name": "loadApp",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the nsp or isp file.",
                    "type": "String"
                },
                {
                    "name": "canvas",
                    "description": "Canvas object or canvas id.",
                    "type": "String"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 120,
            "description": "Start running program.\n\nCreates renderer, mouse and keyboard objects, and starts running the loaded application.\n\nA program must be loaded before calling this method.",
            "itemtype": "method",
            "name": "run",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 176,
            "description": "Load program asynchronously and run it after its loaded.",
            "itemtype": "method",
            "name": "loadRunProgram",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file to load",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback, receives progress (percentage) and the xhr onprogress event as parameters.",
                    "type": "Function"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 197,
            "description": "Load program from file.",
            "itemtype": "method",
            "name": "loadProgram",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file to load",
                    "type": "String"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 222,
            "description": "Load program from file, asynchronously.",
            "itemtype": "method",
            "name": "loadProgramAsync",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file to load",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback. Receives as argument the loaded application.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback, receives progress (percentage) and the xhr onprogress event as parameters.",
                    "type": "Function"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 273,
            "description": "Update program state and render to the canvas.\n\nAutomatically called by the runtime handler.",
            "itemtype": "method",
            "name": "update",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 286,
            "description": "Exit from app.\n\nKills the app and disposes all internal elements to avoid memory leaks.\n\nShould be called before exiting the webpage or before switching programs.\n\nWhen loading new programs the same app instance can be used.",
            "itemtype": "method",
            "name": "exit",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 323,
            "description": "Start or resume the paused application.\n\nStarts a new update cycle and sets the running flag.",
            "itemtype": "method",
            "name": "resume",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 344,
            "description": "Pause the running application.",
            "itemtype": "method",
            "name": "pause",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 355,
            "description": "Set the canvas to be used for rendering.\n\nShould be set before starting the program.",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas",
                    "type": "Component"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 369,
            "description": "Resize the window.\n\nShould be called whenether the host window is resized.",
            "itemtype": "method",
            "name": "resize",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 410,
            "description": "Send data to running application.\n\nThe data sent using this method is received by scripts that implement the onAppData method.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to send",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "sendData",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 426,
            "description": "Set on data receive callback.\n\nCallback receives data as an argument.",
            "itemtype": "method",
            "name": "setOnDataReceived",
            "params": [
                {
                    "name": "callback",
                    "description": "Function executed whenether the app running sends data to the host",
                    "type": "Function"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 439,
            "description": "Set on exit callback.\n\nCallback is executed when exiting the app.",
            "itemtype": "method",
            "name": "setOnExit",
            "params": [
                {
                    "name": "callback",
                    "description": "onExit callback",
                    "type": "Function"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 452,
            "description": "Check if virtual reality mode is available.",
            "itemtype": "method",
            "name": "vrAvailable",
            "return": {
                "description": "True if VR mode available",
                "type": "Boolean"
            },
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 463,
            "description": "Toggle VR mode, only works if VR mode is available.",
            "itemtype": "method",
            "name": "toggleVR",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 487,
            "description": "Check if augmented reality mode is available.",
            "itemtype": "method",
            "name": "arAvailable",
            "return": {
                "description": "True if VR mode available",
                "type": "Boolean"
            },
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 498,
            "description": "Toggle augmented reality mode, only works if augmented reality mode is available.",
            "itemtype": "method",
            "name": "toggleAR",
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\App.js",
            "line": 522,
            "description": "Set a element to fullscreen mode, if none is passed the rendering canvas is used.",
            "itemtype": "method",
            "name": "toggleFullscreen",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element to go fullscreen by default the rendering canvas is used",
                    "type": "Component"
                }
            ],
            "class": "App",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 25,
            "description": "Check if a file corresponds to a remote location.",
            "itemtype": "method",
            "name": "isLocalFile",
            "return": {
                "description": "If the file is remote returns true, false otherwise.",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 36,
            "description": "Read a local or remote file as text data.\n\nWhen running on desktop uses nodejs to access files, on the web performs a http GET request.",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "fname",
                    "description": "Path or URL of the file being read.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback receives the read data as parameter.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback used to check the file reading progress.",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "onError call is called when a error occurs while reading the file.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File text, or null if the request is async.",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 120,
            "description": "Read a local or remote file as arraybuffer data.\n\nWhen running on desktop uses nodejs to access files, on the web performs a http GET request.",
            "itemtype": "method",
            "name": "readFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "Path or URL of the file being read.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback receives the read data as parameter.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback used to check the file reading progress.",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "onError call is called when a error occurs while reading the file.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File data as array buffer, or null if the request is async.",
                "type": "ArrayBuffer"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 198,
            "description": "Read a local or remote file as base64 data.\n\nWhen running on desktop uses nodejs to access files, on the web performs a http GET request.",
            "itemtype": "method",
            "name": "readFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "Path or URL of the file being read.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback receives the read data as parameter.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback used to check the file reading progress.",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "onError call is called when a error occurs while reading the file.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File data as base64, or null if the request is async.",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 275,
            "description": "Write text to a file.\n\nWhen running on the web it writes file to a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Text to be written to the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs).",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 334,
            "description": "Write binary file using base64 data.\n\nIf running on the web writes the file into a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Base64 data to be written into the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs)",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 397,
            "description": "Write binary file using arraybuffer data. \n\nIf running on the web writes the file into a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Arraybuffer data to be written into the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs)",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 459,
            "description": "Choose a file path/name to create a new file and write it to the system.\n\nDepending on the platform opens a file path selection windows of a box to select the name of the file.",
            "itemtype": "method",
            "name": "chooseFileWrite",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback that receives the path select to write the file.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "File type filter (e.g. \".zip,.rar\").",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 489,
            "description": "Open file chooser dialog window for the user to select a directory.\n\nOnly works while using NWJS.",
            "itemtype": "method",
            "name": "chooseDirectory",
            "return": {
                "description": "Promise that resolves with the selected path.",
                "type": "Promise<string>"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 521,
            "description": "Open file chooser dialog window for the user to select files stored in the system.\n\nThe files selected are retrieved using the onLoad callback that receives a array of File objects.",
            "itemtype": "method",
            "name": "chooseFile",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback that receives array of files as parameter.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "File type filter (e.g. .zip, .rar).",
                    "type": "String"
                },
                {
                    "name": "saveas",
                    "description": "File format or name to be used, optinonally it can be a boolean value indicating savemode.",
                    "type": "String"
                },
                {
                    "name": "multiFile",
                    "description": "If true the chooser will accept multiple files.",
                    "type": "Boolean"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 567,
            "description": "Used as an alternative to chooseFile for saving files in the browser.\n\nUses a prompt to question the user the file name.",
            "itemtype": "method",
            "name": "chooseFileName",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "saveas",
                    "description": "File extension",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 594,
            "description": "Copy file (cannot be used to copy folders).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 621,
            "description": "Make a directory (dont throw exeption if directory already exists).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "makeDirectory",
            "params": [
                {
                    "name": "dir",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 638,
            "description": "Returns files in directory (returns empty array in case of error).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "getFilesDirectory",
            "return": {
                "description": "Files in the directory",
                "type": "Array"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 664,
            "description": "Delete folders and all subfolders.\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "deleteFolder",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 697,
            "description": "Copy folder and all its files (includes symbolic links).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "copyFolder",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 741,
            "description": "Check if a file exists.\n\nOnly works inside of NWJS. When running inside the browser always returns false.",
            "itemtype": "method",
            "name": "fileExists",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True is file exists",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 762,
            "description": "Get file name without extension from file path string.\n\nIf input is a/b/c/abc.d output is abc.",
            "itemtype": "method",
            "name": "getFileName",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File name without path and extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 789,
            "description": "Get file name with extension from file path string.\n\nIf input is a/b/c/abc.d output is abc.d.",
            "itemtype": "method",
            "name": "getFileNameWithExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File name without path with extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 816,
            "description": "Get file name without extension.\n\nIf input is a/b/c/abc.d output is a/b/c/abc.",
            "itemtype": "method",
            "name": "getNameWithoutExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 840,
            "description": "Get directory where the file is placed.\n\nIf input is a/b/c/abc.d output is a/b/c/",
            "itemtype": "method",
            "name": "getFilePath",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\FileSystem.js",
            "line": 867,
            "description": "Get file extension from file path string (always in lowercase).\n\nIf input is a/b/c/abc.d output is d.",
            "itemtype": "method",
            "name": "getFileExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 27,
            "description": "Aplication name (might be usefull if getting the module as a unnamed export)",
            "itemtype": "attribute",
            "name": "NAME",
            "type": "{string}",
            "default": "\"Freedom World Editor\"",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 36,
            "description": "Stores the runtime version.",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "{string}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 43,
            "description": "Stores the timestamp of the application build.",
            "itemtype": "attribute",
            "name": "TIMESTAMP",
            "type": "{string}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 50,
            "description": "Repository branch, used to track the version after publishing.",
            "static": 1,
            "itemtype": "attribute",
            "name": "REPOSITORY_BRANCH",
            "type": "{string}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 58,
            "description": "Repository commit uuid, used to track the version after publishing.",
            "static": 1,
            "itemtype": "attribute",
            "name": "REPOSITORY_COMMIT",
            "type": "{string}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 66,
            "description": "Indicates if the application/library is being used in development mode.\n\nCan be usefull to restrict development functionality when building to production.",
            "static": 1,
            "itemtype": "attribute",
            "name": "DEVELOPMENT",
            "type": "{boolean}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 76,
            "description": "NWJS platform, used for desktop version.",
            "static": 1,
            "itemtype": "attribute",
            "name": "NWJS",
            "type": "{number}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 85,
            "description": "Running inside of a regular web browser.",
            "static": 1,
            "itemtype": "attribute",
            "name": "BROWSER",
            "type": "{number}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 94,
            "description": "Cordova platform, used for mobile versions.",
            "static": 1,
            "itemtype": "attribute",
            "name": "CORDOVA",
            "type": "{number}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 103,
            "description": "Import stuff from a namespace to another target namespace.\n\nIf not target is specified window is used.",
            "static": 1,
            "itemtype": "method",
            "name": "copyNamespace",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 127,
            "description": "Get the query parameter from the browser URL.",
            "itemtype": "method",
            "name": "getQueryParameters",
            "return": {
                "description": "Object with parameters read from the URL.",
                "type": "Object"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 152,
            "description": "Create a web worker from code written in a string.\n\nUses a blob to inject the code and loads it from and URL object.",
            "itemtype": "method",
            "name": "createWorker",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code for this worker.",
                    "type": "String"
                },
                {
                    "name": "onMessage",
                    "description": "On message worker callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns a worker instance (for comunication).",
                "type": "Worker"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 175,
            "description": "Check if host supports WebAudio.",
            "itemtype": "method",
            "name": "webAudioAvailable",
            "return": {
                "description": "True if WebAudio is available.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 186,
            "description": "Check if host supports WebGL, only checks for WebGL 1.0 support.",
            "itemtype": "method",
            "name": "webglAvailable",
            "return": {
                "description": "True if WebGL is available.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 207,
            "description": "Check in wich platform the enviroment is running.\n\nPossible return values are:\n- Nunu.NWJS\n- Nunu.BROWSER\n- Nunu.CORDOVA",
            "itemtype": "method",
            "name": "getPlatform",
            "return": {
                "description": "Indicates the platform type.",
                "type": "Number"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 232,
            "description": "Check if app is running inside NWJS.",
            "itemtype": "method",
            "name": "runningOnDesktop",
            "return": {
                "description": "True if running inside NWJS",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 243,
            "description": "Open a webpage on a new window.\n\nOn desktop and mobile it will open the default browser.\n\nOn the web it will open as a popup.",
            "itemtype": "method",
            "name": "openWebpage",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 264,
            "description": "Check if there is some element on fullscreen mode.\n\nReturns true even the fullscreen element is not related with the app.",
            "itemtype": "method",
            "name": "isFullscreen",
            "return": {
                "description": "True if there is some element in fullscreen mode.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "source\\core\\Nunu.js",
            "line": 277,
            "description": "Set an element into fullscreen mode or exit out of fullscreen mode.\n\nUses isFullscreen to check if the application is running in fullscreen mode already.",
            "itemtype": "method",
            "name": "setFullscreen",
            "params": [
                {
                    "name": "fullscreen",
                    "description": "If true the application will enter fullscreen mode, if false it will exit, if undefine it will toggle the value.",
                    "type": "Boolean"
                },
                {
                    "name": "element",
                    "description": "DOM element to put into fullscreen.",
                    "type": "Component"
                }
            ],
            "class": "Nunu",
            "module": "Runtime"
        }
    ],
    "warnings": []
}
